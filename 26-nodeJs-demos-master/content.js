/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.SSRedisData = (function() {

    /**
     * Properties of a SSRedisData.
     * @exports ISSRedisData
     * @interface ISSRedisData
     * @property {number} [version] SSRedisData version
     * @property {number} [updatetime] SSRedisData updatetime
     * @property {number|Long} [key] SSRedisData key
     * @property {Uint8Array} [value] SSRedisData value
     * @property {boolean} [useVersionCheck] SSRedisData useVersionCheck
     */

    /**
     * Constructs a new SSRedisData.
     * @exports SSRedisData
     * @classdesc Represents a SSRedisData.
     * @constructor
     * @param {ISSRedisData=} [properties] Properties to set
     */
    function SSRedisData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSRedisData version.
     * @member {number}version
     * @memberof SSRedisData
     * @instance
     */
    SSRedisData.prototype.version = 0;

    /**
     * SSRedisData updatetime.
     * @member {number}updatetime
     * @memberof SSRedisData
     * @instance
     */
    SSRedisData.prototype.updatetime = 0;

    /**
     * SSRedisData key.
     * @member {number|Long}key
     * @memberof SSRedisData
     * @instance
     */
    SSRedisData.prototype.key = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSRedisData value.
     * @member {Uint8Array}value
     * @memberof SSRedisData
     * @instance
     */
    SSRedisData.prototype.value = $util.newBuffer([]);

    /**
     * SSRedisData useVersionCheck.
     * @member {boolean}useVersionCheck
     * @memberof SSRedisData
     * @instance
     */
    SSRedisData.prototype.useVersionCheck = false;

    /**
     * Creates a new SSRedisData instance using the specified properties.
     * @function create
     * @memberof SSRedisData
     * @static
     * @param {ISSRedisData=} [properties] Properties to set
     * @returns {SSRedisData} SSRedisData instance
     */
    SSRedisData.create = function create(properties) {
        return new SSRedisData(properties);
    };

    /**
     * Encodes the specified SSRedisData message. Does not implicitly {@link SSRedisData.verify|verify} messages.
     * @function encode
     * @memberof SSRedisData
     * @static
     * @param {ISSRedisData} message SSRedisData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRedisData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.version != null && message.hasOwnProperty("version"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
        if (message.updatetime != null && message.hasOwnProperty("updatetime"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.updatetime);
        if (message.key != null && message.hasOwnProperty("key"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.key);
        if (message.value != null && message.hasOwnProperty("value"))
            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.value);
        if (message.useVersionCheck != null && message.hasOwnProperty("useVersionCheck"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.useVersionCheck);
        return writer;
    };

    /**
     * Encodes the specified SSRedisData message, length delimited. Does not implicitly {@link SSRedisData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSRedisData
     * @static
     * @param {ISSRedisData} message SSRedisData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRedisData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSRedisData message from the specified reader or buffer.
     * @function decode
     * @memberof SSRedisData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSRedisData} SSRedisData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRedisData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSRedisData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.version = reader.uint32();
                break;
            case 2:
                message.updatetime = reader.uint32();
                break;
            case 3:
                message.key = reader.uint64();
                break;
            case 4:
                message.value = reader.bytes();
                break;
            case 5:
                message.useVersionCheck = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSRedisData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSRedisData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSRedisData} SSRedisData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRedisData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSRedisData message.
     * @function verify
     * @memberof SSRedisData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSRedisData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.version != null && message.hasOwnProperty("version"))
            if (!$util.isInteger(message.version))
                return "version: integer expected";
        if (message.updatetime != null && message.hasOwnProperty("updatetime"))
            if (!$util.isInteger(message.updatetime))
                return "updatetime: integer expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key) && !(message.key && $util.isInteger(message.key.low) && $util.isInteger(message.key.high)))
                return "key: integer|Long expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                return "value: buffer expected";
        if (message.useVersionCheck != null && message.hasOwnProperty("useVersionCheck"))
            if (typeof message.useVersionCheck !== "boolean")
                return "useVersionCheck: boolean expected";
        return null;
    };

    /**
     * Creates a SSRedisData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSRedisData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSRedisData} SSRedisData
     */
    SSRedisData.fromObject = function fromObject(object) {
        if (object instanceof $root.SSRedisData)
            return object;
        var message = new $root.SSRedisData();
        if (object.version != null)
            message.version = object.version >>> 0;
        if (object.updatetime != null)
            message.updatetime = object.updatetime >>> 0;
        if (object.key != null)
            if ($util.Long)
                (message.key = $util.Long.fromValue(object.key)).unsigned = true;
            else if (typeof object.key === "string")
                message.key = parseInt(object.key, 10);
            else if (typeof object.key === "number")
                message.key = object.key;
            else if (typeof object.key === "object")
                message.key = new $util.LongBits(object.key.low >>> 0, object.key.high >>> 0).toNumber(true);
        if (object.value != null)
            if (typeof object.value === "string")
                $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
            else if (object.value.length)
                message.value = object.value;
        if (object.useVersionCheck != null)
            message.useVersionCheck = Boolean(object.useVersionCheck);
        return message;
    };

    /**
     * Creates a plain object from a SSRedisData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSRedisData
     * @static
     * @param {SSRedisData} message SSRedisData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSRedisData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.version = 0;
            object.updatetime = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.key = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.key = options.longs === String ? "0" : 0;
            object.value = options.bytes === String ? "" : [];
            object.useVersionCheck = false;
        }
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        if (message.updatetime != null && message.hasOwnProperty("updatetime"))
            object.updatetime = message.updatetime;
        if (message.key != null && message.hasOwnProperty("key"))
            if (typeof message.key === "number")
                object.key = options.longs === String ? String(message.key) : message.key;
            else
                object.key = options.longs === String ? $util.Long.prototype.toString.call(message.key) : options.longs === Number ? new $util.LongBits(message.key.low >>> 0, message.key.high >>> 0).toNumber(true) : message.key;
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
        if (message.useVersionCheck != null && message.hasOwnProperty("useVersionCheck"))
            object.useVersionCheck = message.useVersionCheck;
        return object;
    };

    /**
     * Converts this SSRedisData to JSON.
     * @function toJSON
     * @memberof SSRedisData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSRedisData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSRedisData;
})();

$root.SSRequestQueryData = (function() {

    /**
     * Properties of a SSRequestQueryData.
     * @exports ISSRequestQueryData
     * @interface ISSRequestQueryData
     * @property {ENRedisDataType} [type] SSRequestQueryData type
     * @property {number|Long} [uid] SSRequestQueryData uid
     * @property {Array.<ISSRedisData>} [datas] SSRequestQueryData datas
     */

    /**
     * Constructs a new SSRequestQueryData.
     * @exports SSRequestQueryData
     * @classdesc Represents a SSRequestQueryData.
     * @constructor
     * @param {ISSRequestQueryData=} [properties] Properties to set
     */
    function SSRequestQueryData(properties) {
        this.datas = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSRequestQueryData type.
     * @member {ENRedisDataType}type
     * @memberof SSRequestQueryData
     * @instance
     */
    SSRequestQueryData.prototype.type = 1;

    /**
     * SSRequestQueryData uid.
     * @member {number|Long}uid
     * @memberof SSRequestQueryData
     * @instance
     */
    SSRequestQueryData.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSRequestQueryData datas.
     * @member {Array.<ISSRedisData>}datas
     * @memberof SSRequestQueryData
     * @instance
     */
    SSRequestQueryData.prototype.datas = $util.emptyArray;

    /**
     * Creates a new SSRequestQueryData instance using the specified properties.
     * @function create
     * @memberof SSRequestQueryData
     * @static
     * @param {ISSRequestQueryData=} [properties] Properties to set
     * @returns {SSRequestQueryData} SSRequestQueryData instance
     */
    SSRequestQueryData.create = function create(properties) {
        return new SSRequestQueryData(properties);
    };

    /**
     * Encodes the specified SSRequestQueryData message. Does not implicitly {@link SSRequestQueryData.verify|verify} messages.
     * @function encode
     * @memberof SSRequestQueryData
     * @static
     * @param {ISSRequestQueryData} message SSRequestQueryData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestQueryData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.uid);
        if (message.datas != null && message.datas.length)
            for (var i = 0; i < message.datas.length; ++i)
                $root.SSRedisData.encode(message.datas[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSRequestQueryData message, length delimited. Does not implicitly {@link SSRequestQueryData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSRequestQueryData
     * @static
     * @param {ISSRequestQueryData} message SSRequestQueryData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestQueryData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSRequestQueryData message from the specified reader or buffer.
     * @function decode
     * @memberof SSRequestQueryData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSRequestQueryData} SSRequestQueryData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestQueryData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSRequestQueryData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            case 2:
                message.uid = reader.uint64();
                break;
            case 3:
                if (!(message.datas && message.datas.length))
                    message.datas = [];
                message.datas.push($root.SSRedisData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSRequestQueryData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSRequestQueryData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSRequestQueryData} SSRequestQueryData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestQueryData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSRequestQueryData message.
     * @function verify
     * @memberof SSRequestQueryData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSRequestQueryData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
                break;
            }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.datas != null && message.hasOwnProperty("datas")) {
            if (!Array.isArray(message.datas))
                return "datas: array expected";
            for (var i = 0; i < message.datas.length; ++i) {
                var error = $root.SSRedisData.verify(message.datas[i]);
                if (error)
                    return "datas." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SSRequestQueryData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSRequestQueryData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSRequestQueryData} SSRequestQueryData
     */
    SSRequestQueryData.fromObject = function fromObject(object) {
        if (object instanceof $root.SSRequestQueryData)
            return object;
        var message = new $root.SSRequestQueryData();
        switch (object.type) {
        case "EN_REDIS_DATA_TYPE_USER":
        case 1:
            message.type = 1;
            break;
        }
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.datas) {
            if (!Array.isArray(object.datas))
                throw TypeError(".SSRequestQueryData.datas: array expected");
            message.datas = [];
            for (var i = 0; i < object.datas.length; ++i) {
                if (typeof object.datas[i] !== "object")
                    throw TypeError(".SSRequestQueryData.datas: object expected");
                message.datas[i] = $root.SSRedisData.fromObject(object.datas[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SSRequestQueryData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSRequestQueryData
     * @static
     * @param {SSRequestQueryData} message SSRequestQueryData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSRequestQueryData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.datas = [];
        if (options.defaults) {
            object.type = options.enums === String ? "EN_REDIS_DATA_TYPE_USER" : 1;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ENRedisDataType[message.type] : message.type;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.datas && message.datas.length) {
            object.datas = [];
            for (var j = 0; j < message.datas.length; ++j)
                object.datas[j] = $root.SSRedisData.toObject(message.datas[j], options);
        }
        return object;
    };

    /**
     * Converts this SSRequestQueryData to JSON.
     * @function toJSON
     * @memberof SSRequestQueryData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSRequestQueryData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSRequestQueryData;
})();

$root.SSResponseQueryData = (function() {

    /**
     * Properties of a SSResponseQueryData.
     * @exports ISSResponseQueryData
     * @interface ISSResponseQueryData
     * @property {ENMessageError} [result] SSResponseQueryData result
     * @property {ENRedisDataType} [type] SSResponseQueryData type
     * @property {number|Long} [uid] SSResponseQueryData uid
     * @property {Array.<ISSRedisData>} [datas] SSResponseQueryData datas
     */

    /**
     * Constructs a new SSResponseQueryData.
     * @exports SSResponseQueryData
     * @classdesc Represents a SSResponseQueryData.
     * @constructor
     * @param {ISSResponseQueryData=} [properties] Properties to set
     */
    function SSResponseQueryData(properties) {
        this.datas = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSResponseQueryData result.
     * @member {ENMessageError}result
     * @memberof SSResponseQueryData
     * @instance
     */
    SSResponseQueryData.prototype.result = 0;

    /**
     * SSResponseQueryData type.
     * @member {ENRedisDataType}type
     * @memberof SSResponseQueryData
     * @instance
     */
    SSResponseQueryData.prototype.type = 1;

    /**
     * SSResponseQueryData uid.
     * @member {number|Long}uid
     * @memberof SSResponseQueryData
     * @instance
     */
    SSResponseQueryData.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSResponseQueryData datas.
     * @member {Array.<ISSRedisData>}datas
     * @memberof SSResponseQueryData
     * @instance
     */
    SSResponseQueryData.prototype.datas = $util.emptyArray;

    /**
     * Creates a new SSResponseQueryData instance using the specified properties.
     * @function create
     * @memberof SSResponseQueryData
     * @static
     * @param {ISSResponseQueryData=} [properties] Properties to set
     * @returns {SSResponseQueryData} SSResponseQueryData instance
     */
    SSResponseQueryData.create = function create(properties) {
        return new SSResponseQueryData(properties);
    };

    /**
     * Encodes the specified SSResponseQueryData message. Does not implicitly {@link SSResponseQueryData.verify|verify} messages.
     * @function encode
     * @memberof SSResponseQueryData
     * @static
     * @param {ISSResponseQueryData} message SSResponseQueryData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseQueryData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.uid);
        if (message.datas != null && message.datas.length)
            for (var i = 0; i < message.datas.length; ++i)
                $root.SSRedisData.encode(message.datas[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSResponseQueryData message, length delimited. Does not implicitly {@link SSResponseQueryData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSResponseQueryData
     * @static
     * @param {ISSResponseQueryData} message SSResponseQueryData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseQueryData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSResponseQueryData message from the specified reader or buffer.
     * @function decode
     * @memberof SSResponseQueryData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSResponseQueryData} SSResponseQueryData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseQueryData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSResponseQueryData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.uid = reader.uint64();
                break;
            case 4:
                if (!(message.datas && message.datas.length))
                    message.datas = [];
                message.datas.push($root.SSRedisData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSResponseQueryData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSResponseQueryData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSResponseQueryData} SSResponseQueryData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseQueryData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSResponseQueryData message.
     * @function verify
     * @memberof SSResponseQueryData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSResponseQueryData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
                break;
            }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.datas != null && message.hasOwnProperty("datas")) {
            if (!Array.isArray(message.datas))
                return "datas: array expected";
            for (var i = 0; i < message.datas.length; ++i) {
                var error = $root.SSRedisData.verify(message.datas[i]);
                if (error)
                    return "datas." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SSResponseQueryData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSResponseQueryData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSResponseQueryData} SSResponseQueryData
     */
    SSResponseQueryData.fromObject = function fromObject(object) {
        if (object instanceof $root.SSResponseQueryData)
            return object;
        var message = new $root.SSResponseQueryData();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        switch (object.type) {
        case "EN_REDIS_DATA_TYPE_USER":
        case 1:
            message.type = 1;
            break;
        }
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.datas) {
            if (!Array.isArray(object.datas))
                throw TypeError(".SSResponseQueryData.datas: array expected");
            message.datas = [];
            for (var i = 0; i < object.datas.length; ++i) {
                if (typeof object.datas[i] !== "object")
                    throw TypeError(".SSResponseQueryData.datas: object expected");
                message.datas[i] = $root.SSRedisData.fromObject(object.datas[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SSResponseQueryData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSResponseQueryData
     * @static
     * @param {SSResponseQueryData} message SSResponseQueryData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSResponseQueryData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.datas = [];
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.type = options.enums === String ? "EN_REDIS_DATA_TYPE_USER" : 1;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ENRedisDataType[message.type] : message.type;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.datas && message.datas.length) {
            object.datas = [];
            for (var j = 0; j < message.datas.length; ++j)
                object.datas[j] = $root.SSRedisData.toObject(message.datas[j], options);
        }
        return object;
    };

    /**
     * Converts this SSResponseQueryData to JSON.
     * @function toJSON
     * @memberof SSResponseQueryData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSResponseQueryData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSResponseQueryData;
})();

$root.SSRequestSaveData = (function() {

    /**
     * Properties of a SSRequestSaveData.
     * @exports ISSRequestSaveData
     * @interface ISSRequestSaveData
     * @property {ENRedisDataType} [type] SSRequestSaveData type
     * @property {number|Long} [uid] SSRequestSaveData uid
     * @property {Array.<ISSRedisData>} [datas] SSRequestSaveData datas
     */

    /**
     * Constructs a new SSRequestSaveData.
     * @exports SSRequestSaveData
     * @classdesc Represents a SSRequestSaveData.
     * @constructor
     * @param {ISSRequestSaveData=} [properties] Properties to set
     */
    function SSRequestSaveData(properties) {
        this.datas = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSRequestSaveData type.
     * @member {ENRedisDataType}type
     * @memberof SSRequestSaveData
     * @instance
     */
    SSRequestSaveData.prototype.type = 1;

    /**
     * SSRequestSaveData uid.
     * @member {number|Long}uid
     * @memberof SSRequestSaveData
     * @instance
     */
    SSRequestSaveData.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSRequestSaveData datas.
     * @member {Array.<ISSRedisData>}datas
     * @memberof SSRequestSaveData
     * @instance
     */
    SSRequestSaveData.prototype.datas = $util.emptyArray;

    /**
     * Creates a new SSRequestSaveData instance using the specified properties.
     * @function create
     * @memberof SSRequestSaveData
     * @static
     * @param {ISSRequestSaveData=} [properties] Properties to set
     * @returns {SSRequestSaveData} SSRequestSaveData instance
     */
    SSRequestSaveData.create = function create(properties) {
        return new SSRequestSaveData(properties);
    };

    /**
     * Encodes the specified SSRequestSaveData message. Does not implicitly {@link SSRequestSaveData.verify|verify} messages.
     * @function encode
     * @memberof SSRequestSaveData
     * @static
     * @param {ISSRequestSaveData} message SSRequestSaveData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestSaveData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.uid);
        if (message.datas != null && message.datas.length)
            for (var i = 0; i < message.datas.length; ++i)
                $root.SSRedisData.encode(message.datas[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSRequestSaveData message, length delimited. Does not implicitly {@link SSRequestSaveData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSRequestSaveData
     * @static
     * @param {ISSRequestSaveData} message SSRequestSaveData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestSaveData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSRequestSaveData message from the specified reader or buffer.
     * @function decode
     * @memberof SSRequestSaveData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSRequestSaveData} SSRequestSaveData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestSaveData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSRequestSaveData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            case 2:
                message.uid = reader.uint64();
                break;
            case 3:
                if (!(message.datas && message.datas.length))
                    message.datas = [];
                message.datas.push($root.SSRedisData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSRequestSaveData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSRequestSaveData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSRequestSaveData} SSRequestSaveData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestSaveData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSRequestSaveData message.
     * @function verify
     * @memberof SSRequestSaveData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSRequestSaveData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
                break;
            }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.datas != null && message.hasOwnProperty("datas")) {
            if (!Array.isArray(message.datas))
                return "datas: array expected";
            for (var i = 0; i < message.datas.length; ++i) {
                var error = $root.SSRedisData.verify(message.datas[i]);
                if (error)
                    return "datas." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SSRequestSaveData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSRequestSaveData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSRequestSaveData} SSRequestSaveData
     */
    SSRequestSaveData.fromObject = function fromObject(object) {
        if (object instanceof $root.SSRequestSaveData)
            return object;
        var message = new $root.SSRequestSaveData();
        switch (object.type) {
        case "EN_REDIS_DATA_TYPE_USER":
        case 1:
            message.type = 1;
            break;
        }
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.datas) {
            if (!Array.isArray(object.datas))
                throw TypeError(".SSRequestSaveData.datas: array expected");
            message.datas = [];
            for (var i = 0; i < object.datas.length; ++i) {
                if (typeof object.datas[i] !== "object")
                    throw TypeError(".SSRequestSaveData.datas: object expected");
                message.datas[i] = $root.SSRedisData.fromObject(object.datas[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SSRequestSaveData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSRequestSaveData
     * @static
     * @param {SSRequestSaveData} message SSRequestSaveData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSRequestSaveData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.datas = [];
        if (options.defaults) {
            object.type = options.enums === String ? "EN_REDIS_DATA_TYPE_USER" : 1;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ENRedisDataType[message.type] : message.type;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.datas && message.datas.length) {
            object.datas = [];
            for (var j = 0; j < message.datas.length; ++j)
                object.datas[j] = $root.SSRedisData.toObject(message.datas[j], options);
        }
        return object;
    };

    /**
     * Converts this SSRequestSaveData to JSON.
     * @function toJSON
     * @memberof SSRequestSaveData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSRequestSaveData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSRequestSaveData;
})();

$root.SSResponseSaveData = (function() {

    /**
     * Properties of a SSResponseSaveData.
     * @exports ISSResponseSaveData
     * @interface ISSResponseSaveData
     * @property {ENMessageError} [result] SSResponseSaveData result
     * @property {ENRedisDataType} [type] SSResponseSaveData type
     * @property {number|Long} [uid] SSResponseSaveData uid
     * @property {Array.<ISSRedisData>} [datas] SSResponseSaveData datas
     */

    /**
     * Constructs a new SSResponseSaveData.
     * @exports SSResponseSaveData
     * @classdesc Represents a SSResponseSaveData.
     * @constructor
     * @param {ISSResponseSaveData=} [properties] Properties to set
     */
    function SSResponseSaveData(properties) {
        this.datas = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSResponseSaveData result.
     * @member {ENMessageError}result
     * @memberof SSResponseSaveData
     * @instance
     */
    SSResponseSaveData.prototype.result = 0;

    /**
     * SSResponseSaveData type.
     * @member {ENRedisDataType}type
     * @memberof SSResponseSaveData
     * @instance
     */
    SSResponseSaveData.prototype.type = 1;

    /**
     * SSResponseSaveData uid.
     * @member {number|Long}uid
     * @memberof SSResponseSaveData
     * @instance
     */
    SSResponseSaveData.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSResponseSaveData datas.
     * @member {Array.<ISSRedisData>}datas
     * @memberof SSResponseSaveData
     * @instance
     */
    SSResponseSaveData.prototype.datas = $util.emptyArray;

    /**
     * Creates a new SSResponseSaveData instance using the specified properties.
     * @function create
     * @memberof SSResponseSaveData
     * @static
     * @param {ISSResponseSaveData=} [properties] Properties to set
     * @returns {SSResponseSaveData} SSResponseSaveData instance
     */
    SSResponseSaveData.create = function create(properties) {
        return new SSResponseSaveData(properties);
    };

    /**
     * Encodes the specified SSResponseSaveData message. Does not implicitly {@link SSResponseSaveData.verify|verify} messages.
     * @function encode
     * @memberof SSResponseSaveData
     * @static
     * @param {ISSResponseSaveData} message SSResponseSaveData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseSaveData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.uid);
        if (message.datas != null && message.datas.length)
            for (var i = 0; i < message.datas.length; ++i)
                $root.SSRedisData.encode(message.datas[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSResponseSaveData message, length delimited. Does not implicitly {@link SSResponseSaveData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSResponseSaveData
     * @static
     * @param {ISSResponseSaveData} message SSResponseSaveData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseSaveData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSResponseSaveData message from the specified reader or buffer.
     * @function decode
     * @memberof SSResponseSaveData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSResponseSaveData} SSResponseSaveData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseSaveData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSResponseSaveData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.uid = reader.uint64();
                break;
            case 4:
                if (!(message.datas && message.datas.length))
                    message.datas = [];
                message.datas.push($root.SSRedisData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSResponseSaveData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSResponseSaveData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSResponseSaveData} SSResponseSaveData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseSaveData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSResponseSaveData message.
     * @function verify
     * @memberof SSResponseSaveData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSResponseSaveData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
                break;
            }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.datas != null && message.hasOwnProperty("datas")) {
            if (!Array.isArray(message.datas))
                return "datas: array expected";
            for (var i = 0; i < message.datas.length; ++i) {
                var error = $root.SSRedisData.verify(message.datas[i]);
                if (error)
                    return "datas." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SSResponseSaveData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSResponseSaveData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSResponseSaveData} SSResponseSaveData
     */
    SSResponseSaveData.fromObject = function fromObject(object) {
        if (object instanceof $root.SSResponseSaveData)
            return object;
        var message = new $root.SSResponseSaveData();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        switch (object.type) {
        case "EN_REDIS_DATA_TYPE_USER":
        case 1:
            message.type = 1;
            break;
        }
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.datas) {
            if (!Array.isArray(object.datas))
                throw TypeError(".SSResponseSaveData.datas: array expected");
            message.datas = [];
            for (var i = 0; i < object.datas.length; ++i) {
                if (typeof object.datas[i] !== "object")
                    throw TypeError(".SSResponseSaveData.datas: object expected");
                message.datas[i] = $root.SSRedisData.fromObject(object.datas[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SSResponseSaveData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSResponseSaveData
     * @static
     * @param {SSResponseSaveData} message SSResponseSaveData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSResponseSaveData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.datas = [];
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.type = options.enums === String ? "EN_REDIS_DATA_TYPE_USER" : 1;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ENRedisDataType[message.type] : message.type;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.datas && message.datas.length) {
            object.datas = [];
            for (var j = 0; j < message.datas.length; ++j)
                object.datas[j] = $root.SSRedisData.toObject(message.datas[j], options);
        }
        return object;
    };

    /**
     * Converts this SSResponseSaveData to JSON.
     * @function toJSON
     * @memberof SSResponseSaveData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSResponseSaveData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSResponseSaveData;
})();

$root.SSRequestDelData = (function() {

    /**
     * Properties of a SSRequestDelData.
     * @exports ISSRequestDelData
     * @interface ISSRequestDelData
     * @property {ENRedisDataType} [type] SSRequestDelData type
     * @property {number|Long} [uid] SSRequestDelData uid
     * @property {Array.<ISSRedisData>} [datas] SSRequestDelData datas
     */

    /**
     * Constructs a new SSRequestDelData.
     * @exports SSRequestDelData
     * @classdesc Represents a SSRequestDelData.
     * @constructor
     * @param {ISSRequestDelData=} [properties] Properties to set
     */
    function SSRequestDelData(properties) {
        this.datas = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSRequestDelData type.
     * @member {ENRedisDataType}type
     * @memberof SSRequestDelData
     * @instance
     */
    SSRequestDelData.prototype.type = 1;

    /**
     * SSRequestDelData uid.
     * @member {number|Long}uid
     * @memberof SSRequestDelData
     * @instance
     */
    SSRequestDelData.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSRequestDelData datas.
     * @member {Array.<ISSRedisData>}datas
     * @memberof SSRequestDelData
     * @instance
     */
    SSRequestDelData.prototype.datas = $util.emptyArray;

    /**
     * Creates a new SSRequestDelData instance using the specified properties.
     * @function create
     * @memberof SSRequestDelData
     * @static
     * @param {ISSRequestDelData=} [properties] Properties to set
     * @returns {SSRequestDelData} SSRequestDelData instance
     */
    SSRequestDelData.create = function create(properties) {
        return new SSRequestDelData(properties);
    };

    /**
     * Encodes the specified SSRequestDelData message. Does not implicitly {@link SSRequestDelData.verify|verify} messages.
     * @function encode
     * @memberof SSRequestDelData
     * @static
     * @param {ISSRequestDelData} message SSRequestDelData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestDelData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.uid);
        if (message.datas != null && message.datas.length)
            for (var i = 0; i < message.datas.length; ++i)
                $root.SSRedisData.encode(message.datas[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSRequestDelData message, length delimited. Does not implicitly {@link SSRequestDelData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSRequestDelData
     * @static
     * @param {ISSRequestDelData} message SSRequestDelData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestDelData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSRequestDelData message from the specified reader or buffer.
     * @function decode
     * @memberof SSRequestDelData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSRequestDelData} SSRequestDelData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestDelData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSRequestDelData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            case 2:
                message.uid = reader.uint64();
                break;
            case 3:
                if (!(message.datas && message.datas.length))
                    message.datas = [];
                message.datas.push($root.SSRedisData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSRequestDelData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSRequestDelData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSRequestDelData} SSRequestDelData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestDelData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSRequestDelData message.
     * @function verify
     * @memberof SSRequestDelData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSRequestDelData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
                break;
            }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.datas != null && message.hasOwnProperty("datas")) {
            if (!Array.isArray(message.datas))
                return "datas: array expected";
            for (var i = 0; i < message.datas.length; ++i) {
                var error = $root.SSRedisData.verify(message.datas[i]);
                if (error)
                    return "datas." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SSRequestDelData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSRequestDelData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSRequestDelData} SSRequestDelData
     */
    SSRequestDelData.fromObject = function fromObject(object) {
        if (object instanceof $root.SSRequestDelData)
            return object;
        var message = new $root.SSRequestDelData();
        switch (object.type) {
        case "EN_REDIS_DATA_TYPE_USER":
        case 1:
            message.type = 1;
            break;
        }
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.datas) {
            if (!Array.isArray(object.datas))
                throw TypeError(".SSRequestDelData.datas: array expected");
            message.datas = [];
            for (var i = 0; i < object.datas.length; ++i) {
                if (typeof object.datas[i] !== "object")
                    throw TypeError(".SSRequestDelData.datas: object expected");
                message.datas[i] = $root.SSRedisData.fromObject(object.datas[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SSRequestDelData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSRequestDelData
     * @static
     * @param {SSRequestDelData} message SSRequestDelData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSRequestDelData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.datas = [];
        if (options.defaults) {
            object.type = options.enums === String ? "EN_REDIS_DATA_TYPE_USER" : 1;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ENRedisDataType[message.type] : message.type;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.datas && message.datas.length) {
            object.datas = [];
            for (var j = 0; j < message.datas.length; ++j)
                object.datas[j] = $root.SSRedisData.toObject(message.datas[j], options);
        }
        return object;
    };

    /**
     * Converts this SSRequestDelData to JSON.
     * @function toJSON
     * @memberof SSRequestDelData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSRequestDelData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSRequestDelData;
})();

$root.SSResponseDelData = (function() {

    /**
     * Properties of a SSResponseDelData.
     * @exports ISSResponseDelData
     * @interface ISSResponseDelData
     * @property {ENMessageError} [result] SSResponseDelData result
     * @property {ENRedisDataType} [type] SSResponseDelData type
     * @property {number|Long} [uid] SSResponseDelData uid
     * @property {Array.<ISSRedisData>} [datas] SSResponseDelData datas
     */

    /**
     * Constructs a new SSResponseDelData.
     * @exports SSResponseDelData
     * @classdesc Represents a SSResponseDelData.
     * @constructor
     * @param {ISSResponseDelData=} [properties] Properties to set
     */
    function SSResponseDelData(properties) {
        this.datas = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSResponseDelData result.
     * @member {ENMessageError}result
     * @memberof SSResponseDelData
     * @instance
     */
    SSResponseDelData.prototype.result = 0;

    /**
     * SSResponseDelData type.
     * @member {ENRedisDataType}type
     * @memberof SSResponseDelData
     * @instance
     */
    SSResponseDelData.prototype.type = 1;

    /**
     * SSResponseDelData uid.
     * @member {number|Long}uid
     * @memberof SSResponseDelData
     * @instance
     */
    SSResponseDelData.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSResponseDelData datas.
     * @member {Array.<ISSRedisData>}datas
     * @memberof SSResponseDelData
     * @instance
     */
    SSResponseDelData.prototype.datas = $util.emptyArray;

    /**
     * Creates a new SSResponseDelData instance using the specified properties.
     * @function create
     * @memberof SSResponseDelData
     * @static
     * @param {ISSResponseDelData=} [properties] Properties to set
     * @returns {SSResponseDelData} SSResponseDelData instance
     */
    SSResponseDelData.create = function create(properties) {
        return new SSResponseDelData(properties);
    };

    /**
     * Encodes the specified SSResponseDelData message. Does not implicitly {@link SSResponseDelData.verify|verify} messages.
     * @function encode
     * @memberof SSResponseDelData
     * @static
     * @param {ISSResponseDelData} message SSResponseDelData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseDelData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.uid);
        if (message.datas != null && message.datas.length)
            for (var i = 0; i < message.datas.length; ++i)
                $root.SSRedisData.encode(message.datas[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSResponseDelData message, length delimited. Does not implicitly {@link SSResponseDelData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSResponseDelData
     * @static
     * @param {ISSResponseDelData} message SSResponseDelData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseDelData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSResponseDelData message from the specified reader or buffer.
     * @function decode
     * @memberof SSResponseDelData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSResponseDelData} SSResponseDelData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseDelData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSResponseDelData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.uid = reader.uint64();
                break;
            case 4:
                if (!(message.datas && message.datas.length))
                    message.datas = [];
                message.datas.push($root.SSRedisData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSResponseDelData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSResponseDelData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSResponseDelData} SSResponseDelData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseDelData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSResponseDelData message.
     * @function verify
     * @memberof SSResponseDelData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSResponseDelData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
                break;
            }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.datas != null && message.hasOwnProperty("datas")) {
            if (!Array.isArray(message.datas))
                return "datas: array expected";
            for (var i = 0; i < message.datas.length; ++i) {
                var error = $root.SSRedisData.verify(message.datas[i]);
                if (error)
                    return "datas." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SSResponseDelData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSResponseDelData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSResponseDelData} SSResponseDelData
     */
    SSResponseDelData.fromObject = function fromObject(object) {
        if (object instanceof $root.SSResponseDelData)
            return object;
        var message = new $root.SSResponseDelData();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        switch (object.type) {
        case "EN_REDIS_DATA_TYPE_USER":
        case 1:
            message.type = 1;
            break;
        }
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.datas) {
            if (!Array.isArray(object.datas))
                throw TypeError(".SSResponseDelData.datas: array expected");
            message.datas = [];
            for (var i = 0; i < object.datas.length; ++i) {
                if (typeof object.datas[i] !== "object")
                    throw TypeError(".SSResponseDelData.datas: object expected");
                message.datas[i] = $root.SSRedisData.fromObject(object.datas[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SSResponseDelData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSResponseDelData
     * @static
     * @param {SSResponseDelData} message SSResponseDelData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSResponseDelData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.datas = [];
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.type = options.enums === String ? "EN_REDIS_DATA_TYPE_USER" : 1;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ENRedisDataType[message.type] : message.type;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.datas && message.datas.length) {
            object.datas = [];
            for (var j = 0; j < message.datas.length; ++j)
                object.datas[j] = $root.SSRedisData.toObject(message.datas[j], options);
        }
        return object;
    };

    /**
     * Converts this SSResponseDelData to JSON.
     * @function toJSON
     * @memberof SSResponseDelData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSResponseDelData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSResponseDelData;
})();

$root.SSRankDataInfo = (function() {

    /**
     * Properties of a SSRankDataInfo.
     * @exports ISSRankDataInfo
     * @interface ISSRankDataInfo
     * @property {number|Long} [rankId] SSRankDataInfo rankId
     * @property {number|Long} [rankKey] SSRankDataInfo rankKey
     * @property {number|Long} [rankScore] SSRankDataInfo rankScore
     */

    /**
     * Constructs a new SSRankDataInfo.
     * @exports SSRankDataInfo
     * @classdesc Represents a SSRankDataInfo.
     * @constructor
     * @param {ISSRankDataInfo=} [properties] Properties to set
     */
    function SSRankDataInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSRankDataInfo rankId.
     * @member {number|Long}rankId
     * @memberof SSRankDataInfo
     * @instance
     */
    SSRankDataInfo.prototype.rankId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSRankDataInfo rankKey.
     * @member {number|Long}rankKey
     * @memberof SSRankDataInfo
     * @instance
     */
    SSRankDataInfo.prototype.rankKey = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSRankDataInfo rankScore.
     * @member {number|Long}rankScore
     * @memberof SSRankDataInfo
     * @instance
     */
    SSRankDataInfo.prototype.rankScore = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * Creates a new SSRankDataInfo instance using the specified properties.
     * @function create
     * @memberof SSRankDataInfo
     * @static
     * @param {ISSRankDataInfo=} [properties] Properties to set
     * @returns {SSRankDataInfo} SSRankDataInfo instance
     */
    SSRankDataInfo.create = function create(properties) {
        return new SSRankDataInfo(properties);
    };

    /**
     * Encodes the specified SSRankDataInfo message. Does not implicitly {@link SSRankDataInfo.verify|verify} messages.
     * @function encode
     * @memberof SSRankDataInfo
     * @static
     * @param {ISSRankDataInfo} message SSRankDataInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRankDataInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.rankId);
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.rankKey);
        if (message.rankScore != null && message.hasOwnProperty("rankScore"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.rankScore);
        return writer;
    };

    /**
     * Encodes the specified SSRankDataInfo message, length delimited. Does not implicitly {@link SSRankDataInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSRankDataInfo
     * @static
     * @param {ISSRankDataInfo} message SSRankDataInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRankDataInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSRankDataInfo message from the specified reader or buffer.
     * @function decode
     * @memberof SSRankDataInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSRankDataInfo} SSRankDataInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRankDataInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSRankDataInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.rankId = reader.uint64();
                break;
            case 2:
                message.rankKey = reader.uint64();
                break;
            case 3:
                message.rankScore = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSRankDataInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSRankDataInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSRankDataInfo} SSRankDataInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRankDataInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSRankDataInfo message.
     * @function verify
     * @memberof SSRankDataInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSRankDataInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            if (!$util.isInteger(message.rankId) && !(message.rankId && $util.isInteger(message.rankId.low) && $util.isInteger(message.rankId.high)))
                return "rankId: integer|Long expected";
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (!$util.isInteger(message.rankKey) && !(message.rankKey && $util.isInteger(message.rankKey.low) && $util.isInteger(message.rankKey.high)))
                return "rankKey: integer|Long expected";
        if (message.rankScore != null && message.hasOwnProperty("rankScore"))
            if (!$util.isInteger(message.rankScore) && !(message.rankScore && $util.isInteger(message.rankScore.low) && $util.isInteger(message.rankScore.high)))
                return "rankScore: integer|Long expected";
        return null;
    };

    /**
     * Creates a SSRankDataInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSRankDataInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSRankDataInfo} SSRankDataInfo
     */
    SSRankDataInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.SSRankDataInfo)
            return object;
        var message = new $root.SSRankDataInfo();
        if (object.rankId != null)
            if ($util.Long)
                (message.rankId = $util.Long.fromValue(object.rankId)).unsigned = true;
            else if (typeof object.rankId === "string")
                message.rankId = parseInt(object.rankId, 10);
            else if (typeof object.rankId === "number")
                message.rankId = object.rankId;
            else if (typeof object.rankId === "object")
                message.rankId = new $util.LongBits(object.rankId.low >>> 0, object.rankId.high >>> 0).toNumber(true);
        if (object.rankKey != null)
            if ($util.Long)
                (message.rankKey = $util.Long.fromValue(object.rankKey)).unsigned = true;
            else if (typeof object.rankKey === "string")
                message.rankKey = parseInt(object.rankKey, 10);
            else if (typeof object.rankKey === "number")
                message.rankKey = object.rankKey;
            else if (typeof object.rankKey === "object")
                message.rankKey = new $util.LongBits(object.rankKey.low >>> 0, object.rankKey.high >>> 0).toNumber(true);
        if (object.rankScore != null)
            if ($util.Long)
                (message.rankScore = $util.Long.fromValue(object.rankScore)).unsigned = false;
            else if (typeof object.rankScore === "string")
                message.rankScore = parseInt(object.rankScore, 10);
            else if (typeof object.rankScore === "number")
                message.rankScore = object.rankScore;
            else if (typeof object.rankScore === "object")
                message.rankScore = new $util.LongBits(object.rankScore.low >>> 0, object.rankScore.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a SSRankDataInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSRankDataInfo
     * @static
     * @param {SSRankDataInfo} message SSRankDataInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSRankDataInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankId = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankKey = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankKey = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.rankScore = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankScore = options.longs === String ? "0" : 0;
        }
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            if (typeof message.rankId === "number")
                object.rankId = options.longs === String ? String(message.rankId) : message.rankId;
            else
                object.rankId = options.longs === String ? $util.Long.prototype.toString.call(message.rankId) : options.longs === Number ? new $util.LongBits(message.rankId.low >>> 0, message.rankId.high >>> 0).toNumber(true) : message.rankId;
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (typeof message.rankKey === "number")
                object.rankKey = options.longs === String ? String(message.rankKey) : message.rankKey;
            else
                object.rankKey = options.longs === String ? $util.Long.prototype.toString.call(message.rankKey) : options.longs === Number ? new $util.LongBits(message.rankKey.low >>> 0, message.rankKey.high >>> 0).toNumber(true) : message.rankKey;
        if (message.rankScore != null && message.hasOwnProperty("rankScore"))
            if (typeof message.rankScore === "number")
                object.rankScore = options.longs === String ? String(message.rankScore) : message.rankScore;
            else
                object.rankScore = options.longs === String ? $util.Long.prototype.toString.call(message.rankScore) : options.longs === Number ? new $util.LongBits(message.rankScore.low >>> 0, message.rankScore.high >>> 0).toNumber() : message.rankScore;
        return object;
    };

    /**
     * Converts this SSRankDataInfo to JSON.
     * @function toJSON
     * @memberof SSRankDataInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSRankDataInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSRankDataInfo;
})();

$root.SSRankData = (function() {

    /**
     * Properties of a SSRankData.
     * @exports ISSRankData
     * @interface ISSRankData
     * @property {number|Long} [rankKey] SSRankData rankKey
     * @property {number|Long} [rankScore] SSRankData rankScore
     * @property {number} [rank] SSRankData rank
     */

    /**
     * Constructs a new SSRankData.
     * @exports SSRankData
     * @classdesc Represents a SSRankData.
     * @constructor
     * @param {ISSRankData=} [properties] Properties to set
     */
    function SSRankData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSRankData rankKey.
     * @member {number|Long}rankKey
     * @memberof SSRankData
     * @instance
     */
    SSRankData.prototype.rankKey = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSRankData rankScore.
     * @member {number|Long}rankScore
     * @memberof SSRankData
     * @instance
     */
    SSRankData.prototype.rankScore = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * SSRankData rank.
     * @member {number}rank
     * @memberof SSRankData
     * @instance
     */
    SSRankData.prototype.rank = 0;

    /**
     * Creates a new SSRankData instance using the specified properties.
     * @function create
     * @memberof SSRankData
     * @static
     * @param {ISSRankData=} [properties] Properties to set
     * @returns {SSRankData} SSRankData instance
     */
    SSRankData.create = function create(properties) {
        return new SSRankData(properties);
    };

    /**
     * Encodes the specified SSRankData message. Does not implicitly {@link SSRankData.verify|verify} messages.
     * @function encode
     * @memberof SSRankData
     * @static
     * @param {ISSRankData} message SSRankData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRankData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.rankKey);
        if (message.rankScore != null && message.hasOwnProperty("rankScore"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.rankScore);
        if (message.rank != null && message.hasOwnProperty("rank"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.rank);
        return writer;
    };

    /**
     * Encodes the specified SSRankData message, length delimited. Does not implicitly {@link SSRankData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSRankData
     * @static
     * @param {ISSRankData} message SSRankData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRankData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSRankData message from the specified reader or buffer.
     * @function decode
     * @memberof SSRankData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSRankData} SSRankData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRankData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSRankData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 3:
                message.rankKey = reader.uint64();
                break;
            case 4:
                message.rankScore = reader.int64();
                break;
            case 5:
                message.rank = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSRankData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSRankData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSRankData} SSRankData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRankData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSRankData message.
     * @function verify
     * @memberof SSRankData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSRankData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (!$util.isInteger(message.rankKey) && !(message.rankKey && $util.isInteger(message.rankKey.low) && $util.isInteger(message.rankKey.high)))
                return "rankKey: integer|Long expected";
        if (message.rankScore != null && message.hasOwnProperty("rankScore"))
            if (!$util.isInteger(message.rankScore) && !(message.rankScore && $util.isInteger(message.rankScore.low) && $util.isInteger(message.rankScore.high)))
                return "rankScore: integer|Long expected";
        if (message.rank != null && message.hasOwnProperty("rank"))
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
        return null;
    };

    /**
     * Creates a SSRankData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSRankData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSRankData} SSRankData
     */
    SSRankData.fromObject = function fromObject(object) {
        if (object instanceof $root.SSRankData)
            return object;
        var message = new $root.SSRankData();
        if (object.rankKey != null)
            if ($util.Long)
                (message.rankKey = $util.Long.fromValue(object.rankKey)).unsigned = true;
            else if (typeof object.rankKey === "string")
                message.rankKey = parseInt(object.rankKey, 10);
            else if (typeof object.rankKey === "number")
                message.rankKey = object.rankKey;
            else if (typeof object.rankKey === "object")
                message.rankKey = new $util.LongBits(object.rankKey.low >>> 0, object.rankKey.high >>> 0).toNumber(true);
        if (object.rankScore != null)
            if ($util.Long)
                (message.rankScore = $util.Long.fromValue(object.rankScore)).unsigned = false;
            else if (typeof object.rankScore === "string")
                message.rankScore = parseInt(object.rankScore, 10);
            else if (typeof object.rankScore === "number")
                message.rankScore = object.rankScore;
            else if (typeof object.rankScore === "object")
                message.rankScore = new $util.LongBits(object.rankScore.low >>> 0, object.rankScore.high >>> 0).toNumber();
        if (object.rank != null)
            message.rank = object.rank >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SSRankData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSRankData
     * @static
     * @param {SSRankData} message SSRankData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSRankData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankKey = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankKey = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.rankScore = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankScore = options.longs === String ? "0" : 0;
            object.rank = 0;
        }
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (typeof message.rankKey === "number")
                object.rankKey = options.longs === String ? String(message.rankKey) : message.rankKey;
            else
                object.rankKey = options.longs === String ? $util.Long.prototype.toString.call(message.rankKey) : options.longs === Number ? new $util.LongBits(message.rankKey.low >>> 0, message.rankKey.high >>> 0).toNumber(true) : message.rankKey;
        if (message.rankScore != null && message.hasOwnProperty("rankScore"))
            if (typeof message.rankScore === "number")
                object.rankScore = options.longs === String ? String(message.rankScore) : message.rankScore;
            else
                object.rankScore = options.longs === String ? $util.Long.prototype.toString.call(message.rankScore) : options.longs === Number ? new $util.LongBits(message.rankScore.low >>> 0, message.rankScore.high >>> 0).toNumber() : message.rankScore;
        if (message.rank != null && message.hasOwnProperty("rank"))
            object.rank = message.rank;
        return object;
    };

    /**
     * Converts this SSRankData to JSON.
     * @function toJSON
     * @memberof SSRankData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSRankData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSRankData;
})();

$root.SSRequestToplistUpdate = (function() {

    /**
     * Properties of a SSRequestToplistUpdate.
     * @exports ISSRequestToplistUpdate
     * @interface ISSRequestToplistUpdate
     * @property {Array.<ISSRankDataInfo>} [dataInfos] SSRequestToplistUpdate dataInfos
     */

    /**
     * Constructs a new SSRequestToplistUpdate.
     * @exports SSRequestToplistUpdate
     * @classdesc Represents a SSRequestToplistUpdate.
     * @constructor
     * @param {ISSRequestToplistUpdate=} [properties] Properties to set
     */
    function SSRequestToplistUpdate(properties) {
        this.dataInfos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSRequestToplistUpdate dataInfos.
     * @member {Array.<ISSRankDataInfo>}dataInfos
     * @memberof SSRequestToplistUpdate
     * @instance
     */
    SSRequestToplistUpdate.prototype.dataInfos = $util.emptyArray;

    /**
     * Creates a new SSRequestToplistUpdate instance using the specified properties.
     * @function create
     * @memberof SSRequestToplistUpdate
     * @static
     * @param {ISSRequestToplistUpdate=} [properties] Properties to set
     * @returns {SSRequestToplistUpdate} SSRequestToplistUpdate instance
     */
    SSRequestToplistUpdate.create = function create(properties) {
        return new SSRequestToplistUpdate(properties);
    };

    /**
     * Encodes the specified SSRequestToplistUpdate message. Does not implicitly {@link SSRequestToplistUpdate.verify|verify} messages.
     * @function encode
     * @memberof SSRequestToplistUpdate
     * @static
     * @param {ISSRequestToplistUpdate} message SSRequestToplistUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestToplistUpdate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.dataInfos != null && message.dataInfos.length)
            for (var i = 0; i < message.dataInfos.length; ++i)
                $root.SSRankDataInfo.encode(message.dataInfos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSRequestToplistUpdate message, length delimited. Does not implicitly {@link SSRequestToplistUpdate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSRequestToplistUpdate
     * @static
     * @param {ISSRequestToplistUpdate} message SSRequestToplistUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestToplistUpdate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSRequestToplistUpdate message from the specified reader or buffer.
     * @function decode
     * @memberof SSRequestToplistUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSRequestToplistUpdate} SSRequestToplistUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestToplistUpdate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSRequestToplistUpdate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.dataInfos && message.dataInfos.length))
                    message.dataInfos = [];
                message.dataInfos.push($root.SSRankDataInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSRequestToplistUpdate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSRequestToplistUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSRequestToplistUpdate} SSRequestToplistUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestToplistUpdate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSRequestToplistUpdate message.
     * @function verify
     * @memberof SSRequestToplistUpdate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSRequestToplistUpdate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.dataInfos != null && message.hasOwnProperty("dataInfos")) {
            if (!Array.isArray(message.dataInfos))
                return "dataInfos: array expected";
            for (var i = 0; i < message.dataInfos.length; ++i) {
                var error = $root.SSRankDataInfo.verify(message.dataInfos[i]);
                if (error)
                    return "dataInfos." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SSRequestToplistUpdate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSRequestToplistUpdate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSRequestToplistUpdate} SSRequestToplistUpdate
     */
    SSRequestToplistUpdate.fromObject = function fromObject(object) {
        if (object instanceof $root.SSRequestToplistUpdate)
            return object;
        var message = new $root.SSRequestToplistUpdate();
        if (object.dataInfos) {
            if (!Array.isArray(object.dataInfos))
                throw TypeError(".SSRequestToplistUpdate.dataInfos: array expected");
            message.dataInfos = [];
            for (var i = 0; i < object.dataInfos.length; ++i) {
                if (typeof object.dataInfos[i] !== "object")
                    throw TypeError(".SSRequestToplistUpdate.dataInfos: object expected");
                message.dataInfos[i] = $root.SSRankDataInfo.fromObject(object.dataInfos[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SSRequestToplistUpdate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSRequestToplistUpdate
     * @static
     * @param {SSRequestToplistUpdate} message SSRequestToplistUpdate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSRequestToplistUpdate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.dataInfos = [];
        if (message.dataInfos && message.dataInfos.length) {
            object.dataInfos = [];
            for (var j = 0; j < message.dataInfos.length; ++j)
                object.dataInfos[j] = $root.SSRankDataInfo.toObject(message.dataInfos[j], options);
        }
        return object;
    };

    /**
     * Converts this SSRequestToplistUpdate to JSON.
     * @function toJSON
     * @memberof SSRequestToplistUpdate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSRequestToplistUpdate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSRequestToplistUpdate;
})();

$root.SSResponseToplistUpdate = (function() {

    /**
     * Properties of a SSResponseToplistUpdate.
     * @exports ISSResponseToplistUpdate
     * @interface ISSResponseToplistUpdate
     * @property {ENMessageError} [result] SSResponseToplistUpdate result
     */

    /**
     * Constructs a new SSResponseToplistUpdate.
     * @exports SSResponseToplistUpdate
     * @classdesc Represents a SSResponseToplistUpdate.
     * @constructor
     * @param {ISSResponseToplistUpdate=} [properties] Properties to set
     */
    function SSResponseToplistUpdate(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSResponseToplistUpdate result.
     * @member {ENMessageError}result
     * @memberof SSResponseToplistUpdate
     * @instance
     */
    SSResponseToplistUpdate.prototype.result = 0;

    /**
     * Creates a new SSResponseToplistUpdate instance using the specified properties.
     * @function create
     * @memberof SSResponseToplistUpdate
     * @static
     * @param {ISSResponseToplistUpdate=} [properties] Properties to set
     * @returns {SSResponseToplistUpdate} SSResponseToplistUpdate instance
     */
    SSResponseToplistUpdate.create = function create(properties) {
        return new SSResponseToplistUpdate(properties);
    };

    /**
     * Encodes the specified SSResponseToplistUpdate message. Does not implicitly {@link SSResponseToplistUpdate.verify|verify} messages.
     * @function encode
     * @memberof SSResponseToplistUpdate
     * @static
     * @param {ISSResponseToplistUpdate} message SSResponseToplistUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseToplistUpdate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified SSResponseToplistUpdate message, length delimited. Does not implicitly {@link SSResponseToplistUpdate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSResponseToplistUpdate
     * @static
     * @param {ISSResponseToplistUpdate} message SSResponseToplistUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseToplistUpdate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSResponseToplistUpdate message from the specified reader or buffer.
     * @function decode
     * @memberof SSResponseToplistUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSResponseToplistUpdate} SSResponseToplistUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseToplistUpdate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSResponseToplistUpdate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSResponseToplistUpdate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSResponseToplistUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSResponseToplistUpdate} SSResponseToplistUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseToplistUpdate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSResponseToplistUpdate message.
     * @function verify
     * @memberof SSResponseToplistUpdate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSResponseToplistUpdate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        return null;
    };

    /**
     * Creates a SSResponseToplistUpdate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSResponseToplistUpdate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSResponseToplistUpdate} SSResponseToplistUpdate
     */
    SSResponseToplistUpdate.fromObject = function fromObject(object) {
        if (object instanceof $root.SSResponseToplistUpdate)
            return object;
        var message = new $root.SSResponseToplistUpdate();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a SSResponseToplistUpdate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSResponseToplistUpdate
     * @static
     * @param {SSResponseToplistUpdate} message SSResponseToplistUpdate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSResponseToplistUpdate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        return object;
    };

    /**
     * Converts this SSResponseToplistUpdate to JSON.
     * @function toJSON
     * @memberof SSResponseToplistUpdate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSResponseToplistUpdate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSResponseToplistUpdate;
})();

$root.SSRequestToplistGetSingle = (function() {

    /**
     * Properties of a SSRequestToplistGetSingle.
     * @exports ISSRequestToplistGetSingle
     * @interface ISSRequestToplistGetSingle
     * @property {number|Long} [rankId] SSRequestToplistGetSingle rankId
     * @property {number|Long} [rankKey] SSRequestToplistGetSingle rankKey
     */

    /**
     * Constructs a new SSRequestToplistGetSingle.
     * @exports SSRequestToplistGetSingle
     * @classdesc Represents a SSRequestToplistGetSingle.
     * @constructor
     * @param {ISSRequestToplistGetSingle=} [properties] Properties to set
     */
    function SSRequestToplistGetSingle(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSRequestToplistGetSingle rankId.
     * @member {number|Long}rankId
     * @memberof SSRequestToplistGetSingle
     * @instance
     */
    SSRequestToplistGetSingle.prototype.rankId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSRequestToplistGetSingle rankKey.
     * @member {number|Long}rankKey
     * @memberof SSRequestToplistGetSingle
     * @instance
     */
    SSRequestToplistGetSingle.prototype.rankKey = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new SSRequestToplistGetSingle instance using the specified properties.
     * @function create
     * @memberof SSRequestToplistGetSingle
     * @static
     * @param {ISSRequestToplistGetSingle=} [properties] Properties to set
     * @returns {SSRequestToplistGetSingle} SSRequestToplistGetSingle instance
     */
    SSRequestToplistGetSingle.create = function create(properties) {
        return new SSRequestToplistGetSingle(properties);
    };

    /**
     * Encodes the specified SSRequestToplistGetSingle message. Does not implicitly {@link SSRequestToplistGetSingle.verify|verify} messages.
     * @function encode
     * @memberof SSRequestToplistGetSingle
     * @static
     * @param {ISSRequestToplistGetSingle} message SSRequestToplistGetSingle message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestToplistGetSingle.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.rankId);
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.rankKey);
        return writer;
    };

    /**
     * Encodes the specified SSRequestToplistGetSingle message, length delimited. Does not implicitly {@link SSRequestToplistGetSingle.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSRequestToplistGetSingle
     * @static
     * @param {ISSRequestToplistGetSingle} message SSRequestToplistGetSingle message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestToplistGetSingle.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSRequestToplistGetSingle message from the specified reader or buffer.
     * @function decode
     * @memberof SSRequestToplistGetSingle
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSRequestToplistGetSingle} SSRequestToplistGetSingle
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestToplistGetSingle.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSRequestToplistGetSingle();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.rankId = reader.uint64();
                break;
            case 3:
                message.rankKey = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSRequestToplistGetSingle message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSRequestToplistGetSingle
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSRequestToplistGetSingle} SSRequestToplistGetSingle
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestToplistGetSingle.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSRequestToplistGetSingle message.
     * @function verify
     * @memberof SSRequestToplistGetSingle
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSRequestToplistGetSingle.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            if (!$util.isInteger(message.rankId) && !(message.rankId && $util.isInteger(message.rankId.low) && $util.isInteger(message.rankId.high)))
                return "rankId: integer|Long expected";
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (!$util.isInteger(message.rankKey) && !(message.rankKey && $util.isInteger(message.rankKey.low) && $util.isInteger(message.rankKey.high)))
                return "rankKey: integer|Long expected";
        return null;
    };

    /**
     * Creates a SSRequestToplistGetSingle message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSRequestToplistGetSingle
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSRequestToplistGetSingle} SSRequestToplistGetSingle
     */
    SSRequestToplistGetSingle.fromObject = function fromObject(object) {
        if (object instanceof $root.SSRequestToplistGetSingle)
            return object;
        var message = new $root.SSRequestToplistGetSingle();
        if (object.rankId != null)
            if ($util.Long)
                (message.rankId = $util.Long.fromValue(object.rankId)).unsigned = true;
            else if (typeof object.rankId === "string")
                message.rankId = parseInt(object.rankId, 10);
            else if (typeof object.rankId === "number")
                message.rankId = object.rankId;
            else if (typeof object.rankId === "object")
                message.rankId = new $util.LongBits(object.rankId.low >>> 0, object.rankId.high >>> 0).toNumber(true);
        if (object.rankKey != null)
            if ($util.Long)
                (message.rankKey = $util.Long.fromValue(object.rankKey)).unsigned = true;
            else if (typeof object.rankKey === "string")
                message.rankKey = parseInt(object.rankKey, 10);
            else if (typeof object.rankKey === "number")
                message.rankKey = object.rankKey;
            else if (typeof object.rankKey === "object")
                message.rankKey = new $util.LongBits(object.rankKey.low >>> 0, object.rankKey.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a SSRequestToplistGetSingle message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSRequestToplistGetSingle
     * @static
     * @param {SSRequestToplistGetSingle} message SSRequestToplistGetSingle
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSRequestToplistGetSingle.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankId = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankKey = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankKey = options.longs === String ? "0" : 0;
        }
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            if (typeof message.rankId === "number")
                object.rankId = options.longs === String ? String(message.rankId) : message.rankId;
            else
                object.rankId = options.longs === String ? $util.Long.prototype.toString.call(message.rankId) : options.longs === Number ? new $util.LongBits(message.rankId.low >>> 0, message.rankId.high >>> 0).toNumber(true) : message.rankId;
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (typeof message.rankKey === "number")
                object.rankKey = options.longs === String ? String(message.rankKey) : message.rankKey;
            else
                object.rankKey = options.longs === String ? $util.Long.prototype.toString.call(message.rankKey) : options.longs === Number ? new $util.LongBits(message.rankKey.low >>> 0, message.rankKey.high >>> 0).toNumber(true) : message.rankKey;
        return object;
    };

    /**
     * Converts this SSRequestToplistGetSingle to JSON.
     * @function toJSON
     * @memberof SSRequestToplistGetSingle
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSRequestToplistGetSingle.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSRequestToplistGetSingle;
})();

$root.SSResponseToplistGetSingle = (function() {

    /**
     * Properties of a SSResponseToplistGetSingle.
     * @exports ISSResponseToplistGetSingle
     * @interface ISSResponseToplistGetSingle
     * @property {ENMessageError} [result] SSResponseToplistGetSingle result
     * @property {number|Long} [rankId] SSResponseToplistGetSingle rankId
     * @property {ISSRankData} [data] SSResponseToplistGetSingle data
     */

    /**
     * Constructs a new SSResponseToplistGetSingle.
     * @exports SSResponseToplistGetSingle
     * @classdesc Represents a SSResponseToplistGetSingle.
     * @constructor
     * @param {ISSResponseToplistGetSingle=} [properties] Properties to set
     */
    function SSResponseToplistGetSingle(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSResponseToplistGetSingle result.
     * @member {ENMessageError}result
     * @memberof SSResponseToplistGetSingle
     * @instance
     */
    SSResponseToplistGetSingle.prototype.result = 0;

    /**
     * SSResponseToplistGetSingle rankId.
     * @member {number|Long}rankId
     * @memberof SSResponseToplistGetSingle
     * @instance
     */
    SSResponseToplistGetSingle.prototype.rankId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSResponseToplistGetSingle data.
     * @member {(ISSRankData|null|undefined)}data
     * @memberof SSResponseToplistGetSingle
     * @instance
     */
    SSResponseToplistGetSingle.prototype.data = null;

    /**
     * Creates a new SSResponseToplistGetSingle instance using the specified properties.
     * @function create
     * @memberof SSResponseToplistGetSingle
     * @static
     * @param {ISSResponseToplistGetSingle=} [properties] Properties to set
     * @returns {SSResponseToplistGetSingle} SSResponseToplistGetSingle instance
     */
    SSResponseToplistGetSingle.create = function create(properties) {
        return new SSResponseToplistGetSingle(properties);
    };

    /**
     * Encodes the specified SSResponseToplistGetSingle message. Does not implicitly {@link SSResponseToplistGetSingle.verify|verify} messages.
     * @function encode
     * @memberof SSResponseToplistGetSingle
     * @static
     * @param {ISSResponseToplistGetSingle} message SSResponseToplistGetSingle message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseToplistGetSingle.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.rankId);
        if (message.data != null && message.hasOwnProperty("data"))
            $root.SSRankData.encode(message.data, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSResponseToplistGetSingle message, length delimited. Does not implicitly {@link SSResponseToplistGetSingle.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSResponseToplistGetSingle
     * @static
     * @param {ISSResponseToplistGetSingle} message SSResponseToplistGetSingle message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseToplistGetSingle.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSResponseToplistGetSingle message from the specified reader or buffer.
     * @function decode
     * @memberof SSResponseToplistGetSingle
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSResponseToplistGetSingle} SSResponseToplistGetSingle
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseToplistGetSingle.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSResponseToplistGetSingle();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.rankId = reader.uint64();
                break;
            case 4:
                message.data = $root.SSRankData.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSResponseToplistGetSingle message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSResponseToplistGetSingle
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSResponseToplistGetSingle} SSResponseToplistGetSingle
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseToplistGetSingle.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSResponseToplistGetSingle message.
     * @function verify
     * @memberof SSResponseToplistGetSingle
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSResponseToplistGetSingle.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            if (!$util.isInteger(message.rankId) && !(message.rankId && $util.isInteger(message.rankId.low) && $util.isInteger(message.rankId.high)))
                return "rankId: integer|Long expected";
        if (message.data != null && message.hasOwnProperty("data")) {
            var error = $root.SSRankData.verify(message.data);
            if (error)
                return "data." + error;
        }
        return null;
    };

    /**
     * Creates a SSResponseToplistGetSingle message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSResponseToplistGetSingle
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSResponseToplistGetSingle} SSResponseToplistGetSingle
     */
    SSResponseToplistGetSingle.fromObject = function fromObject(object) {
        if (object instanceof $root.SSResponseToplistGetSingle)
            return object;
        var message = new $root.SSResponseToplistGetSingle();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.rankId != null)
            if ($util.Long)
                (message.rankId = $util.Long.fromValue(object.rankId)).unsigned = true;
            else if (typeof object.rankId === "string")
                message.rankId = parseInt(object.rankId, 10);
            else if (typeof object.rankId === "number")
                message.rankId = object.rankId;
            else if (typeof object.rankId === "object")
                message.rankId = new $util.LongBits(object.rankId.low >>> 0, object.rankId.high >>> 0).toNumber(true);
        if (object.data != null) {
            if (typeof object.data !== "object")
                throw TypeError(".SSResponseToplistGetSingle.data: object expected");
            message.data = $root.SSRankData.fromObject(object.data);
        }
        return message;
    };

    /**
     * Creates a plain object from a SSResponseToplistGetSingle message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSResponseToplistGetSingle
     * @static
     * @param {SSResponseToplistGetSingle} message SSResponseToplistGetSingle
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSResponseToplistGetSingle.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankId = options.longs === String ? "0" : 0;
            object.data = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            if (typeof message.rankId === "number")
                object.rankId = options.longs === String ? String(message.rankId) : message.rankId;
            else
                object.rankId = options.longs === String ? $util.Long.prototype.toString.call(message.rankId) : options.longs === Number ? new $util.LongBits(message.rankId.low >>> 0, message.rankId.high >>> 0).toNumber(true) : message.rankId;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = $root.SSRankData.toObject(message.data, options);
        return object;
    };

    /**
     * Converts this SSResponseToplistGetSingle to JSON.
     * @function toJSON
     * @memberof SSResponseToplistGetSingle
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSResponseToplistGetSingle.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSResponseToplistGetSingle;
})();

$root.SSRequestToplistGetRange = (function() {

    /**
     * Properties of a SSRequestToplistGetRange.
     * @exports ISSRequestToplistGetRange
     * @interface ISSRequestToplistGetRange
     * @property {number|Long} [rankId] SSRequestToplistGetRange rankId
     * @property {number} [begin] SSRequestToplistGetRange begin
     * @property {number} [count] SSRequestToplistGetRange count
     */

    /**
     * Constructs a new SSRequestToplistGetRange.
     * @exports SSRequestToplistGetRange
     * @classdesc Represents a SSRequestToplistGetRange.
     * @constructor
     * @param {ISSRequestToplistGetRange=} [properties] Properties to set
     */
    function SSRequestToplistGetRange(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSRequestToplistGetRange rankId.
     * @member {number|Long}rankId
     * @memberof SSRequestToplistGetRange
     * @instance
     */
    SSRequestToplistGetRange.prototype.rankId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSRequestToplistGetRange begin.
     * @member {number}begin
     * @memberof SSRequestToplistGetRange
     * @instance
     */
    SSRequestToplistGetRange.prototype.begin = 0;

    /**
     * SSRequestToplistGetRange count.
     * @member {number}count
     * @memberof SSRequestToplistGetRange
     * @instance
     */
    SSRequestToplistGetRange.prototype.count = 0;

    /**
     * Creates a new SSRequestToplistGetRange instance using the specified properties.
     * @function create
     * @memberof SSRequestToplistGetRange
     * @static
     * @param {ISSRequestToplistGetRange=} [properties] Properties to set
     * @returns {SSRequestToplistGetRange} SSRequestToplistGetRange instance
     */
    SSRequestToplistGetRange.create = function create(properties) {
        return new SSRequestToplistGetRange(properties);
    };

    /**
     * Encodes the specified SSRequestToplistGetRange message. Does not implicitly {@link SSRequestToplistGetRange.verify|verify} messages.
     * @function encode
     * @memberof SSRequestToplistGetRange
     * @static
     * @param {ISSRequestToplistGetRange} message SSRequestToplistGetRange message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestToplistGetRange.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.rankId);
        if (message.begin != null && message.hasOwnProperty("begin"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.begin);
        if (message.count != null && message.hasOwnProperty("count"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.count);
        return writer;
    };

    /**
     * Encodes the specified SSRequestToplistGetRange message, length delimited. Does not implicitly {@link SSRequestToplistGetRange.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSRequestToplistGetRange
     * @static
     * @param {ISSRequestToplistGetRange} message SSRequestToplistGetRange message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSRequestToplistGetRange.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSRequestToplistGetRange message from the specified reader or buffer.
     * @function decode
     * @memberof SSRequestToplistGetRange
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSRequestToplistGetRange} SSRequestToplistGetRange
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestToplistGetRange.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSRequestToplistGetRange();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.rankId = reader.uint64();
                break;
            case 3:
                message.begin = reader.uint32();
                break;
            case 4:
                message.count = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSRequestToplistGetRange message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSRequestToplistGetRange
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSRequestToplistGetRange} SSRequestToplistGetRange
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSRequestToplistGetRange.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSRequestToplistGetRange message.
     * @function verify
     * @memberof SSRequestToplistGetRange
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSRequestToplistGetRange.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            if (!$util.isInteger(message.rankId) && !(message.rankId && $util.isInteger(message.rankId.low) && $util.isInteger(message.rankId.high)))
                return "rankId: integer|Long expected";
        if (message.begin != null && message.hasOwnProperty("begin"))
            if (!$util.isInteger(message.begin))
                return "begin: integer expected";
        if (message.count != null && message.hasOwnProperty("count"))
            if (!$util.isInteger(message.count))
                return "count: integer expected";
        return null;
    };

    /**
     * Creates a SSRequestToplistGetRange message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSRequestToplistGetRange
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSRequestToplistGetRange} SSRequestToplistGetRange
     */
    SSRequestToplistGetRange.fromObject = function fromObject(object) {
        if (object instanceof $root.SSRequestToplistGetRange)
            return object;
        var message = new $root.SSRequestToplistGetRange();
        if (object.rankId != null)
            if ($util.Long)
                (message.rankId = $util.Long.fromValue(object.rankId)).unsigned = true;
            else if (typeof object.rankId === "string")
                message.rankId = parseInt(object.rankId, 10);
            else if (typeof object.rankId === "number")
                message.rankId = object.rankId;
            else if (typeof object.rankId === "object")
                message.rankId = new $util.LongBits(object.rankId.low >>> 0, object.rankId.high >>> 0).toNumber(true);
        if (object.begin != null)
            message.begin = object.begin >>> 0;
        if (object.count != null)
            message.count = object.count >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SSRequestToplistGetRange message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSRequestToplistGetRange
     * @static
     * @param {SSRequestToplistGetRange} message SSRequestToplistGetRange
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSRequestToplistGetRange.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankId = options.longs === String ? "0" : 0;
            object.begin = 0;
            object.count = 0;
        }
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            if (typeof message.rankId === "number")
                object.rankId = options.longs === String ? String(message.rankId) : message.rankId;
            else
                object.rankId = options.longs === String ? $util.Long.prototype.toString.call(message.rankId) : options.longs === Number ? new $util.LongBits(message.rankId.low >>> 0, message.rankId.high >>> 0).toNumber(true) : message.rankId;
        if (message.begin != null && message.hasOwnProperty("begin"))
            object.begin = message.begin;
        if (message.count != null && message.hasOwnProperty("count"))
            object.count = message.count;
        return object;
    };

    /**
     * Converts this SSRequestToplistGetRange to JSON.
     * @function toJSON
     * @memberof SSRequestToplistGetRange
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSRequestToplistGetRange.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSRequestToplistGetRange;
})();

$root.SSResponseToplistGetRange = (function() {

    /**
     * Properties of a SSResponseToplistGetRange.
     * @exports ISSResponseToplistGetRange
     * @interface ISSResponseToplistGetRange
     * @property {ENMessageError} [result] SSResponseToplistGetRange result
     * @property {number|Long} [rankId] SSResponseToplistGetRange rankId
     * @property {Array.<ISSRankData>} [datas] SSResponseToplistGetRange datas
     */

    /**
     * Constructs a new SSResponseToplistGetRange.
     * @exports SSResponseToplistGetRange
     * @classdesc Represents a SSResponseToplistGetRange.
     * @constructor
     * @param {ISSResponseToplistGetRange=} [properties] Properties to set
     */
    function SSResponseToplistGetRange(properties) {
        this.datas = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSResponseToplistGetRange result.
     * @member {ENMessageError}result
     * @memberof SSResponseToplistGetRange
     * @instance
     */
    SSResponseToplistGetRange.prototype.result = 0;

    /**
     * SSResponseToplistGetRange rankId.
     * @member {number|Long}rankId
     * @memberof SSResponseToplistGetRange
     * @instance
     */
    SSResponseToplistGetRange.prototype.rankId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SSResponseToplistGetRange datas.
     * @member {Array.<ISSRankData>}datas
     * @memberof SSResponseToplistGetRange
     * @instance
     */
    SSResponseToplistGetRange.prototype.datas = $util.emptyArray;

    /**
     * Creates a new SSResponseToplistGetRange instance using the specified properties.
     * @function create
     * @memberof SSResponseToplistGetRange
     * @static
     * @param {ISSResponseToplistGetRange=} [properties] Properties to set
     * @returns {SSResponseToplistGetRange} SSResponseToplistGetRange instance
     */
    SSResponseToplistGetRange.create = function create(properties) {
        return new SSResponseToplistGetRange(properties);
    };

    /**
     * Encodes the specified SSResponseToplistGetRange message. Does not implicitly {@link SSResponseToplistGetRange.verify|verify} messages.
     * @function encode
     * @memberof SSResponseToplistGetRange
     * @static
     * @param {ISSResponseToplistGetRange} message SSResponseToplistGetRange message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseToplistGetRange.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.rankId);
        if (message.datas != null && message.datas.length)
            for (var i = 0; i < message.datas.length; ++i)
                $root.SSRankData.encode(message.datas[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSResponseToplistGetRange message, length delimited. Does not implicitly {@link SSResponseToplistGetRange.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSResponseToplistGetRange
     * @static
     * @param {ISSResponseToplistGetRange} message SSResponseToplistGetRange message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSResponseToplistGetRange.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSResponseToplistGetRange message from the specified reader or buffer.
     * @function decode
     * @memberof SSResponseToplistGetRange
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSResponseToplistGetRange} SSResponseToplistGetRange
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseToplistGetRange.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSResponseToplistGetRange();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.rankId = reader.uint64();
                break;
            case 4:
                if (!(message.datas && message.datas.length))
                    message.datas = [];
                message.datas.push($root.SSRankData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSResponseToplistGetRange message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSResponseToplistGetRange
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSResponseToplistGetRange} SSResponseToplistGetRange
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSResponseToplistGetRange.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSResponseToplistGetRange message.
     * @function verify
     * @memberof SSResponseToplistGetRange
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSResponseToplistGetRange.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            if (!$util.isInteger(message.rankId) && !(message.rankId && $util.isInteger(message.rankId.low) && $util.isInteger(message.rankId.high)))
                return "rankId: integer|Long expected";
        if (message.datas != null && message.hasOwnProperty("datas")) {
            if (!Array.isArray(message.datas))
                return "datas: array expected";
            for (var i = 0; i < message.datas.length; ++i) {
                var error = $root.SSRankData.verify(message.datas[i]);
                if (error)
                    return "datas." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SSResponseToplistGetRange message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSResponseToplistGetRange
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSResponseToplistGetRange} SSResponseToplistGetRange
     */
    SSResponseToplistGetRange.fromObject = function fromObject(object) {
        if (object instanceof $root.SSResponseToplistGetRange)
            return object;
        var message = new $root.SSResponseToplistGetRange();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.rankId != null)
            if ($util.Long)
                (message.rankId = $util.Long.fromValue(object.rankId)).unsigned = true;
            else if (typeof object.rankId === "string")
                message.rankId = parseInt(object.rankId, 10);
            else if (typeof object.rankId === "number")
                message.rankId = object.rankId;
            else if (typeof object.rankId === "object")
                message.rankId = new $util.LongBits(object.rankId.low >>> 0, object.rankId.high >>> 0).toNumber(true);
        if (object.datas) {
            if (!Array.isArray(object.datas))
                throw TypeError(".SSResponseToplistGetRange.datas: array expected");
            message.datas = [];
            for (var i = 0; i < object.datas.length; ++i) {
                if (typeof object.datas[i] !== "object")
                    throw TypeError(".SSResponseToplistGetRange.datas: object expected");
                message.datas[i] = $root.SSRankData.fromObject(object.datas[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SSResponseToplistGetRange message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSResponseToplistGetRange
     * @static
     * @param {SSResponseToplistGetRange} message SSResponseToplistGetRange
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSResponseToplistGetRange.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.datas = [];
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankId = options.longs === String ? "0" : 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.rankId != null && message.hasOwnProperty("rankId"))
            if (typeof message.rankId === "number")
                object.rankId = options.longs === String ? String(message.rankId) : message.rankId;
            else
                object.rankId = options.longs === String ? $util.Long.prototype.toString.call(message.rankId) : options.longs === Number ? new $util.LongBits(message.rankId.low >>> 0, message.rankId.high >>> 0).toNumber(true) : message.rankId;
        if (message.datas && message.datas.length) {
            object.datas = [];
            for (var j = 0; j < message.datas.length; ++j)
                object.datas[j] = $root.SSRankData.toObject(message.datas[j], options);
        }
        return object;
    };

    /**
     * Converts this SSResponseToplistGetRange to JSON.
     * @function toJSON
     * @memberof SSResponseToplistGetRange
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSResponseToplistGetRange.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSResponseToplistGetRange;
})();

$root.SSNotifyGameUploadTables = (function() {

    /**
     * Properties of a SSNotifyGameUploadTables.
     * @exports ISSNotifyGameUploadTables
     * @interface ISSNotifyGameUploadTables
     */

    /**
     * Constructs a new SSNotifyGameUploadTables.
     * @exports SSNotifyGameUploadTables
     * @classdesc Represents a SSNotifyGameUploadTables.
     * @constructor
     * @param {ISSNotifyGameUploadTables=} [properties] Properties to set
     */
    function SSNotifyGameUploadTables(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new SSNotifyGameUploadTables instance using the specified properties.
     * @function create
     * @memberof SSNotifyGameUploadTables
     * @static
     * @param {ISSNotifyGameUploadTables=} [properties] Properties to set
     * @returns {SSNotifyGameUploadTables} SSNotifyGameUploadTables instance
     */
    SSNotifyGameUploadTables.create = function create(properties) {
        return new SSNotifyGameUploadTables(properties);
    };

    /**
     * Encodes the specified SSNotifyGameUploadTables message. Does not implicitly {@link SSNotifyGameUploadTables.verify|verify} messages.
     * @function encode
     * @memberof SSNotifyGameUploadTables
     * @static
     * @param {ISSNotifyGameUploadTables} message SSNotifyGameUploadTables message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyGameUploadTables.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified SSNotifyGameUploadTables message, length delimited. Does not implicitly {@link SSNotifyGameUploadTables.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSNotifyGameUploadTables
     * @static
     * @param {ISSNotifyGameUploadTables} message SSNotifyGameUploadTables message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyGameUploadTables.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSNotifyGameUploadTables message from the specified reader or buffer.
     * @function decode
     * @memberof SSNotifyGameUploadTables
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSNotifyGameUploadTables} SSNotifyGameUploadTables
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyGameUploadTables.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSNotifyGameUploadTables();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSNotifyGameUploadTables message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSNotifyGameUploadTables
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSNotifyGameUploadTables} SSNotifyGameUploadTables
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyGameUploadTables.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSNotifyGameUploadTables message.
     * @function verify
     * @memberof SSNotifyGameUploadTables
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSNotifyGameUploadTables.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a SSNotifyGameUploadTables message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSNotifyGameUploadTables
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSNotifyGameUploadTables} SSNotifyGameUploadTables
     */
    SSNotifyGameUploadTables.fromObject = function fromObject(object) {
        if (object instanceof $root.SSNotifyGameUploadTables)
            return object;
        return new $root.SSNotifyGameUploadTables();
    };

    /**
     * Creates a plain object from a SSNotifyGameUploadTables message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSNotifyGameUploadTables
     * @static
     * @param {SSNotifyGameUploadTables} message SSNotifyGameUploadTables
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSNotifyGameUploadTables.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this SSNotifyGameUploadTables to JSON.
     * @function toJSON
     * @memberof SSNotifyGameUploadTables
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSNotifyGameUploadTables.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSNotifyGameUploadTables;
})();

$root.SSNotifyClearTables = (function() {

    /**
     * Properties of a SSNotifyClearTables.
     * @exports ISSNotifyClearTables
     * @interface ISSNotifyClearTables
     * @property {number} [gameSvrId] SSNotifyClearTables gameSvrId
     */

    /**
     * Constructs a new SSNotifyClearTables.
     * @exports SSNotifyClearTables
     * @classdesc Represents a SSNotifyClearTables.
     * @constructor
     * @param {ISSNotifyClearTables=} [properties] Properties to set
     */
    function SSNotifyClearTables(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSNotifyClearTables gameSvrId.
     * @member {number}gameSvrId
     * @memberof SSNotifyClearTables
     * @instance
     */
    SSNotifyClearTables.prototype.gameSvrId = 0;

    /**
     * Creates a new SSNotifyClearTables instance using the specified properties.
     * @function create
     * @memberof SSNotifyClearTables
     * @static
     * @param {ISSNotifyClearTables=} [properties] Properties to set
     * @returns {SSNotifyClearTables} SSNotifyClearTables instance
     */
    SSNotifyClearTables.create = function create(properties) {
        return new SSNotifyClearTables(properties);
    };

    /**
     * Encodes the specified SSNotifyClearTables message. Does not implicitly {@link SSNotifyClearTables.verify|verify} messages.
     * @function encode
     * @memberof SSNotifyClearTables
     * @static
     * @param {ISSNotifyClearTables} message SSNotifyClearTables message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyClearTables.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameSvrId);
        return writer;
    };

    /**
     * Encodes the specified SSNotifyClearTables message, length delimited. Does not implicitly {@link SSNotifyClearTables.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSNotifyClearTables
     * @static
     * @param {ISSNotifyClearTables} message SSNotifyClearTables message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyClearTables.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSNotifyClearTables message from the specified reader or buffer.
     * @function decode
     * @memberof SSNotifyClearTables
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSNotifyClearTables} SSNotifyClearTables
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyClearTables.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSNotifyClearTables();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gameSvrId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSNotifyClearTables message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSNotifyClearTables
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSNotifyClearTables} SSNotifyClearTables
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyClearTables.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSNotifyClearTables message.
     * @function verify
     * @memberof SSNotifyClearTables
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSNotifyClearTables.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            if (!$util.isInteger(message.gameSvrId))
                return "gameSvrId: integer expected";
        return null;
    };

    /**
     * Creates a SSNotifyClearTables message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSNotifyClearTables
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSNotifyClearTables} SSNotifyClearTables
     */
    SSNotifyClearTables.fromObject = function fromObject(object) {
        if (object instanceof $root.SSNotifyClearTables)
            return object;
        var message = new $root.SSNotifyClearTables();
        if (object.gameSvrId != null)
            message.gameSvrId = object.gameSvrId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SSNotifyClearTables message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSNotifyClearTables
     * @static
     * @param {SSNotifyClearTables} message SSNotifyClearTables
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSNotifyClearTables.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.gameSvrId = 0;
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            object.gameSvrId = message.gameSvrId;
        return object;
    };

    /**
     * Converts this SSNotifyClearTables to JSON.
     * @function toJSON
     * @memberof SSNotifyClearTables
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSNotifyClearTables.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSNotifyClearTables;
})();

$root.SSNotifyRoomUploadTables = (function() {

    /**
     * Properties of a SSNotifyRoomUploadTables.
     * @exports ISSNotifyRoomUploadTables
     * @interface ISSNotifyRoomUploadTables
     * @property {number} [gameSvrId] SSNotifyRoomUploadTables gameSvrId
     * @property {Array.<ICSTableInfo>} [tables] SSNotifyRoomUploadTables tables
     */

    /**
     * Constructs a new SSNotifyRoomUploadTables.
     * @exports SSNotifyRoomUploadTables
     * @classdesc Represents a SSNotifyRoomUploadTables.
     * @constructor
     * @param {ISSNotifyRoomUploadTables=} [properties] Properties to set
     */
    function SSNotifyRoomUploadTables(properties) {
        this.tables = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSNotifyRoomUploadTables gameSvrId.
     * @member {number}gameSvrId
     * @memberof SSNotifyRoomUploadTables
     * @instance
     */
    SSNotifyRoomUploadTables.prototype.gameSvrId = 0;

    /**
     * SSNotifyRoomUploadTables tables.
     * @member {Array.<ICSTableInfo>}tables
     * @memberof SSNotifyRoomUploadTables
     * @instance
     */
    SSNotifyRoomUploadTables.prototype.tables = $util.emptyArray;

    /**
     * Creates a new SSNotifyRoomUploadTables instance using the specified properties.
     * @function create
     * @memberof SSNotifyRoomUploadTables
     * @static
     * @param {ISSNotifyRoomUploadTables=} [properties] Properties to set
     * @returns {SSNotifyRoomUploadTables} SSNotifyRoomUploadTables instance
     */
    SSNotifyRoomUploadTables.create = function create(properties) {
        return new SSNotifyRoomUploadTables(properties);
    };

    /**
     * Encodes the specified SSNotifyRoomUploadTables message. Does not implicitly {@link SSNotifyRoomUploadTables.verify|verify} messages.
     * @function encode
     * @memberof SSNotifyRoomUploadTables
     * @static
     * @param {ISSNotifyRoomUploadTables} message SSNotifyRoomUploadTables message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyRoomUploadTables.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameSvrId);
        if (message.tables != null && message.tables.length)
            for (var i = 0; i < message.tables.length; ++i)
                $root.CSTableInfo.encode(message.tables[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSNotifyRoomUploadTables message, length delimited. Does not implicitly {@link SSNotifyRoomUploadTables.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSNotifyRoomUploadTables
     * @static
     * @param {ISSNotifyRoomUploadTables} message SSNotifyRoomUploadTables message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyRoomUploadTables.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSNotifyRoomUploadTables message from the specified reader or buffer.
     * @function decode
     * @memberof SSNotifyRoomUploadTables
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSNotifyRoomUploadTables} SSNotifyRoomUploadTables
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyRoomUploadTables.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSNotifyRoomUploadTables();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gameSvrId = reader.uint32();
                break;
            case 2:
                if (!(message.tables && message.tables.length))
                    message.tables = [];
                message.tables.push($root.CSTableInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSNotifyRoomUploadTables message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSNotifyRoomUploadTables
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSNotifyRoomUploadTables} SSNotifyRoomUploadTables
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyRoomUploadTables.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSNotifyRoomUploadTables message.
     * @function verify
     * @memberof SSNotifyRoomUploadTables
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSNotifyRoomUploadTables.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            if (!$util.isInteger(message.gameSvrId))
                return "gameSvrId: integer expected";
        if (message.tables != null && message.hasOwnProperty("tables")) {
            if (!Array.isArray(message.tables))
                return "tables: array expected";
            for (var i = 0; i < message.tables.length; ++i) {
                var error = $root.CSTableInfo.verify(message.tables[i]);
                if (error)
                    return "tables." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SSNotifyRoomUploadTables message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSNotifyRoomUploadTables
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSNotifyRoomUploadTables} SSNotifyRoomUploadTables
     */
    SSNotifyRoomUploadTables.fromObject = function fromObject(object) {
        if (object instanceof $root.SSNotifyRoomUploadTables)
            return object;
        var message = new $root.SSNotifyRoomUploadTables();
        if (object.gameSvrId != null)
            message.gameSvrId = object.gameSvrId >>> 0;
        if (object.tables) {
            if (!Array.isArray(object.tables))
                throw TypeError(".SSNotifyRoomUploadTables.tables: array expected");
            message.tables = [];
            for (var i = 0; i < object.tables.length; ++i) {
                if (typeof object.tables[i] !== "object")
                    throw TypeError(".SSNotifyRoomUploadTables.tables: object expected");
                message.tables[i] = $root.CSTableInfo.fromObject(object.tables[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SSNotifyRoomUploadTables message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSNotifyRoomUploadTables
     * @static
     * @param {SSNotifyRoomUploadTables} message SSNotifyRoomUploadTables
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSNotifyRoomUploadTables.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.tables = [];
        if (options.defaults)
            object.gameSvrId = 0;
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            object.gameSvrId = message.gameSvrId;
        if (message.tables && message.tables.length) {
            object.tables = [];
            for (var j = 0; j < message.tables.length; ++j)
                object.tables[j] = $root.CSTableInfo.toObject(message.tables[j], options);
        }
        return object;
    };

    /**
     * Converts this SSNotifyRoomUploadTables to JSON.
     * @function toJSON
     * @memberof SSNotifyRoomUploadTables
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSNotifyRoomUploadTables.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSNotifyRoomUploadTables;
})();

$root.SSNotifyUpdateTable = (function() {

    /**
     * Properties of a SSNotifyUpdateTable.
     * @exports ISSNotifyUpdateTable
     * @interface ISSNotifyUpdateTable
     * @property {number} [gameSvrId] SSNotifyUpdateTable gameSvrId
     * @property {ICSTableInfo} [table] SSNotifyUpdateTable table
     */

    /**
     * Constructs a new SSNotifyUpdateTable.
     * @exports SSNotifyUpdateTable
     * @classdesc Represents a SSNotifyUpdateTable.
     * @constructor
     * @param {ISSNotifyUpdateTable=} [properties] Properties to set
     */
    function SSNotifyUpdateTable(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSNotifyUpdateTable gameSvrId.
     * @member {number}gameSvrId
     * @memberof SSNotifyUpdateTable
     * @instance
     */
    SSNotifyUpdateTable.prototype.gameSvrId = 0;

    /**
     * SSNotifyUpdateTable table.
     * @member {(ICSTableInfo|null|undefined)}table
     * @memberof SSNotifyUpdateTable
     * @instance
     */
    SSNotifyUpdateTable.prototype.table = null;

    /**
     * Creates a new SSNotifyUpdateTable instance using the specified properties.
     * @function create
     * @memberof SSNotifyUpdateTable
     * @static
     * @param {ISSNotifyUpdateTable=} [properties] Properties to set
     * @returns {SSNotifyUpdateTable} SSNotifyUpdateTable instance
     */
    SSNotifyUpdateTable.create = function create(properties) {
        return new SSNotifyUpdateTable(properties);
    };

    /**
     * Encodes the specified SSNotifyUpdateTable message. Does not implicitly {@link SSNotifyUpdateTable.verify|verify} messages.
     * @function encode
     * @memberof SSNotifyUpdateTable
     * @static
     * @param {ISSNotifyUpdateTable} message SSNotifyUpdateTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyUpdateTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameSvrId);
        if (message.table != null && message.hasOwnProperty("table"))
            $root.CSTableInfo.encode(message.table, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SSNotifyUpdateTable message, length delimited. Does not implicitly {@link SSNotifyUpdateTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSNotifyUpdateTable
     * @static
     * @param {ISSNotifyUpdateTable} message SSNotifyUpdateTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyUpdateTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSNotifyUpdateTable message from the specified reader or buffer.
     * @function decode
     * @memberof SSNotifyUpdateTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSNotifyUpdateTable} SSNotifyUpdateTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyUpdateTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSNotifyUpdateTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gameSvrId = reader.uint32();
                break;
            case 2:
                message.table = $root.CSTableInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSNotifyUpdateTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSNotifyUpdateTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSNotifyUpdateTable} SSNotifyUpdateTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyUpdateTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSNotifyUpdateTable message.
     * @function verify
     * @memberof SSNotifyUpdateTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSNotifyUpdateTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            if (!$util.isInteger(message.gameSvrId))
                return "gameSvrId: integer expected";
        if (message.table != null && message.hasOwnProperty("table")) {
            var error = $root.CSTableInfo.verify(message.table);
            if (error)
                return "table." + error;
        }
        return null;
    };

    /**
     * Creates a SSNotifyUpdateTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSNotifyUpdateTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSNotifyUpdateTable} SSNotifyUpdateTable
     */
    SSNotifyUpdateTable.fromObject = function fromObject(object) {
        if (object instanceof $root.SSNotifyUpdateTable)
            return object;
        var message = new $root.SSNotifyUpdateTable();
        if (object.gameSvrId != null)
            message.gameSvrId = object.gameSvrId >>> 0;
        if (object.table != null) {
            if (typeof object.table !== "object")
                throw TypeError(".SSNotifyUpdateTable.table: object expected");
            message.table = $root.CSTableInfo.fromObject(object.table);
        }
        return message;
    };

    /**
     * Creates a plain object from a SSNotifyUpdateTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSNotifyUpdateTable
     * @static
     * @param {SSNotifyUpdateTable} message SSNotifyUpdateTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSNotifyUpdateTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.gameSvrId = 0;
            object.table = null;
        }
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            object.gameSvrId = message.gameSvrId;
        if (message.table != null && message.hasOwnProperty("table"))
            object.table = $root.CSTableInfo.toObject(message.table, options);
        return object;
    };

    /**
     * Converts this SSNotifyUpdateTable to JSON.
     * @function toJSON
     * @memberof SSNotifyUpdateTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSNotifyUpdateTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSNotifyUpdateTable;
})();

$root.SSNotifyDeleteTable = (function() {

    /**
     * Properties of a SSNotifyDeleteTable.
     * @exports ISSNotifyDeleteTable
     * @interface ISSNotifyDeleteTable
     * @property {number} [gameSvrId] SSNotifyDeleteTable gameSvrId
     * @property {number} [tableId] SSNotifyDeleteTable tableId
     */

    /**
     * Constructs a new SSNotifyDeleteTable.
     * @exports SSNotifyDeleteTable
     * @classdesc Represents a SSNotifyDeleteTable.
     * @constructor
     * @param {ISSNotifyDeleteTable=} [properties] Properties to set
     */
    function SSNotifyDeleteTable(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSNotifyDeleteTable gameSvrId.
     * @member {number}gameSvrId
     * @memberof SSNotifyDeleteTable
     * @instance
     */
    SSNotifyDeleteTable.prototype.gameSvrId = 0;

    /**
     * SSNotifyDeleteTable tableId.
     * @member {number}tableId
     * @memberof SSNotifyDeleteTable
     * @instance
     */
    SSNotifyDeleteTable.prototype.tableId = 0;

    /**
     * Creates a new SSNotifyDeleteTable instance using the specified properties.
     * @function create
     * @memberof SSNotifyDeleteTable
     * @static
     * @param {ISSNotifyDeleteTable=} [properties] Properties to set
     * @returns {SSNotifyDeleteTable} SSNotifyDeleteTable instance
     */
    SSNotifyDeleteTable.create = function create(properties) {
        return new SSNotifyDeleteTable(properties);
    };

    /**
     * Encodes the specified SSNotifyDeleteTable message. Does not implicitly {@link SSNotifyDeleteTable.verify|verify} messages.
     * @function encode
     * @memberof SSNotifyDeleteTable
     * @static
     * @param {ISSNotifyDeleteTable} message SSNotifyDeleteTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyDeleteTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameSvrId);
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tableId);
        return writer;
    };

    /**
     * Encodes the specified SSNotifyDeleteTable message, length delimited. Does not implicitly {@link SSNotifyDeleteTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSNotifyDeleteTable
     * @static
     * @param {ISSNotifyDeleteTable} message SSNotifyDeleteTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyDeleteTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSNotifyDeleteTable message from the specified reader or buffer.
     * @function decode
     * @memberof SSNotifyDeleteTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSNotifyDeleteTable} SSNotifyDeleteTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyDeleteTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSNotifyDeleteTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gameSvrId = reader.uint32();
                break;
            case 2:
                message.tableId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSNotifyDeleteTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSNotifyDeleteTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSNotifyDeleteTable} SSNotifyDeleteTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyDeleteTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSNotifyDeleteTable message.
     * @function verify
     * @memberof SSNotifyDeleteTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSNotifyDeleteTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            if (!$util.isInteger(message.gameSvrId))
                return "gameSvrId: integer expected";
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        return null;
    };

    /**
     * Creates a SSNotifyDeleteTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSNotifyDeleteTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSNotifyDeleteTable} SSNotifyDeleteTable
     */
    SSNotifyDeleteTable.fromObject = function fromObject(object) {
        if (object instanceof $root.SSNotifyDeleteTable)
            return object;
        var message = new $root.SSNotifyDeleteTable();
        if (object.gameSvrId != null)
            message.gameSvrId = object.gameSvrId >>> 0;
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SSNotifyDeleteTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSNotifyDeleteTable
     * @static
     * @param {SSNotifyDeleteTable} message SSNotifyDeleteTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSNotifyDeleteTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.gameSvrId = 0;
            object.tableId = 0;
        }
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            object.gameSvrId = message.gameSvrId;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        return object;
    };

    /**
     * Converts this SSNotifyDeleteTable to JSON.
     * @function toJSON
     * @memberof SSNotifyDeleteTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSNotifyDeleteTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSNotifyDeleteTable;
})();

$root.SSGameToRoomHeartBeat = (function() {

    /**
     * Properties of a SSGameToRoomHeartBeat.
     * @exports ISSGameToRoomHeartBeat
     * @interface ISSGameToRoomHeartBeat
     * @property {number} [gameSvrId] SSGameToRoomHeartBeat gameSvrId
     */

    /**
     * Constructs a new SSGameToRoomHeartBeat.
     * @exports SSGameToRoomHeartBeat
     * @classdesc Represents a SSGameToRoomHeartBeat.
     * @constructor
     * @param {ISSGameToRoomHeartBeat=} [properties] Properties to set
     */
    function SSGameToRoomHeartBeat(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSGameToRoomHeartBeat gameSvrId.
     * @member {number}gameSvrId
     * @memberof SSGameToRoomHeartBeat
     * @instance
     */
    SSGameToRoomHeartBeat.prototype.gameSvrId = 0;

    /**
     * Creates a new SSGameToRoomHeartBeat instance using the specified properties.
     * @function create
     * @memberof SSGameToRoomHeartBeat
     * @static
     * @param {ISSGameToRoomHeartBeat=} [properties] Properties to set
     * @returns {SSGameToRoomHeartBeat} SSGameToRoomHeartBeat instance
     */
    SSGameToRoomHeartBeat.create = function create(properties) {
        return new SSGameToRoomHeartBeat(properties);
    };

    /**
     * Encodes the specified SSGameToRoomHeartBeat message. Does not implicitly {@link SSGameToRoomHeartBeat.verify|verify} messages.
     * @function encode
     * @memberof SSGameToRoomHeartBeat
     * @static
     * @param {ISSGameToRoomHeartBeat} message SSGameToRoomHeartBeat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSGameToRoomHeartBeat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameSvrId);
        return writer;
    };

    /**
     * Encodes the specified SSGameToRoomHeartBeat message, length delimited. Does not implicitly {@link SSGameToRoomHeartBeat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSGameToRoomHeartBeat
     * @static
     * @param {ISSGameToRoomHeartBeat} message SSGameToRoomHeartBeat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSGameToRoomHeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSGameToRoomHeartBeat message from the specified reader or buffer.
     * @function decode
     * @memberof SSGameToRoomHeartBeat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSGameToRoomHeartBeat} SSGameToRoomHeartBeat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSGameToRoomHeartBeat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSGameToRoomHeartBeat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gameSvrId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSGameToRoomHeartBeat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSGameToRoomHeartBeat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSGameToRoomHeartBeat} SSGameToRoomHeartBeat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSGameToRoomHeartBeat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSGameToRoomHeartBeat message.
     * @function verify
     * @memberof SSGameToRoomHeartBeat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSGameToRoomHeartBeat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            if (!$util.isInteger(message.gameSvrId))
                return "gameSvrId: integer expected";
        return null;
    };

    /**
     * Creates a SSGameToRoomHeartBeat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSGameToRoomHeartBeat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSGameToRoomHeartBeat} SSGameToRoomHeartBeat
     */
    SSGameToRoomHeartBeat.fromObject = function fromObject(object) {
        if (object instanceof $root.SSGameToRoomHeartBeat)
            return object;
        var message = new $root.SSGameToRoomHeartBeat();
        if (object.gameSvrId != null)
            message.gameSvrId = object.gameSvrId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SSGameToRoomHeartBeat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSGameToRoomHeartBeat
     * @static
     * @param {SSGameToRoomHeartBeat} message SSGameToRoomHeartBeat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSGameToRoomHeartBeat.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.gameSvrId = 0;
        if (message.gameSvrId != null && message.hasOwnProperty("gameSvrId"))
            object.gameSvrId = message.gameSvrId;
        return object;
    };

    /**
     * Converts this SSGameToRoomHeartBeat to JSON.
     * @function toJSON
     * @memberof SSGameToRoomHeartBeat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSGameToRoomHeartBeat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSGameToRoomHeartBeat;
})();

$root.SSNotifyCheckCore = (function() {

    /**
     * Properties of a SSNotifyCheckCore.
     * @exports ISSNotifyCheckCore
     * @interface ISSNotifyCheckCore
     * @property {number|Long} [uid] SSNotifyCheckCore uid
     */

    /**
     * Constructs a new SSNotifyCheckCore.
     * @exports SSNotifyCheckCore
     * @classdesc Represents a SSNotifyCheckCore.
     * @constructor
     * @param {ISSNotifyCheckCore=} [properties] Properties to set
     */
    function SSNotifyCheckCore(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SSNotifyCheckCore uid.
     * @member {number|Long}uid
     * @memberof SSNotifyCheckCore
     * @instance
     */
    SSNotifyCheckCore.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new SSNotifyCheckCore instance using the specified properties.
     * @function create
     * @memberof SSNotifyCheckCore
     * @static
     * @param {ISSNotifyCheckCore=} [properties] Properties to set
     * @returns {SSNotifyCheckCore} SSNotifyCheckCore instance
     */
    SSNotifyCheckCore.create = function create(properties) {
        return new SSNotifyCheckCore(properties);
    };

    /**
     * Encodes the specified SSNotifyCheckCore message. Does not implicitly {@link SSNotifyCheckCore.verify|verify} messages.
     * @function encode
     * @memberof SSNotifyCheckCore
     * @static
     * @param {ISSNotifyCheckCore} message SSNotifyCheckCore message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyCheckCore.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        return writer;
    };

    /**
     * Encodes the specified SSNotifyCheckCore message, length delimited. Does not implicitly {@link SSNotifyCheckCore.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SSNotifyCheckCore
     * @static
     * @param {ISSNotifyCheckCore} message SSNotifyCheckCore message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SSNotifyCheckCore.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SSNotifyCheckCore message from the specified reader or buffer.
     * @function decode
     * @memberof SSNotifyCheckCore
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SSNotifyCheckCore} SSNotifyCheckCore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyCheckCore.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SSNotifyCheckCore();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SSNotifyCheckCore message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SSNotifyCheckCore
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SSNotifyCheckCore} SSNotifyCheckCore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SSNotifyCheckCore.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SSNotifyCheckCore message.
     * @function verify
     * @memberof SSNotifyCheckCore
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SSNotifyCheckCore.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        return null;
    };

    /**
     * Creates a SSNotifyCheckCore message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SSNotifyCheckCore
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SSNotifyCheckCore} SSNotifyCheckCore
     */
    SSNotifyCheckCore.fromObject = function fromObject(object) {
        if (object instanceof $root.SSNotifyCheckCore)
            return object;
        var message = new $root.SSNotifyCheckCore();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a SSNotifyCheckCore message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SSNotifyCheckCore
     * @static
     * @param {SSNotifyCheckCore} message SSNotifyCheckCore
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SSNotifyCheckCore.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        return object;
    };

    /**
     * Converts this SSNotifyCheckCore to JSON.
     * @function toJSON
     * @memberof SSNotifyCheckCore
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SSNotifyCheckCore.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SSNotifyCheckCore;
})();

/**
 * PBUpdateType enum.
 * @exports PBUpdateType
 * @enum {string}
 * @property {number} EN_UPDATE_CHIP=1 EN_UPDATE_CHIP value
 * @property {number} EN_UPDATE_DIAMOND=2 EN_UPDATE_DIAMOND value
 */
$root.PBUpdateType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "EN_UPDATE_CHIP"] = 1;
    values[valuesById[2] = "EN_UPDATE_DIAMOND"] = 2;
    return values;
})();

$root.PBUpdate = (function() {

    /**
     * Properties of a PBUpdate.
     * @exports IPBUpdate
     * @interface IPBUpdate
     * @property {PBUpdateType} [type] PBUpdate type
     * @property {number} [id] PBUpdate id
     * @property {number|Long} [num] PBUpdate num
     * @property {boolean} [sign] PBUpdate sign
     * @property {number} [reason] PBUpdate reason
     */

    /**
     * Constructs a new PBUpdate.
     * @exports PBUpdate
     * @classdesc Represents a PBUpdate.
     * @constructor
     * @param {IPBUpdate=} [properties] Properties to set
     */
    function PBUpdate(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBUpdate type.
     * @member {PBUpdateType}type
     * @memberof PBUpdate
     * @instance
     */
    PBUpdate.prototype.type = 1;

    /**
     * PBUpdate id.
     * @member {number}id
     * @memberof PBUpdate
     * @instance
     */
    PBUpdate.prototype.id = 0;

    /**
     * PBUpdate num.
     * @member {number|Long}num
     * @memberof PBUpdate
     * @instance
     */
    PBUpdate.prototype.num = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBUpdate sign.
     * @member {boolean}sign
     * @memberof PBUpdate
     * @instance
     */
    PBUpdate.prototype.sign = false;

    /**
     * PBUpdate reason.
     * @member {number}reason
     * @memberof PBUpdate
     * @instance
     */
    PBUpdate.prototype.reason = 0;

    /**
     * Creates a new PBUpdate instance using the specified properties.
     * @function create
     * @memberof PBUpdate
     * @static
     * @param {IPBUpdate=} [properties] Properties to set
     * @returns {PBUpdate} PBUpdate instance
     */
    PBUpdate.create = function create(properties) {
        return new PBUpdate(properties);
    };

    /**
     * Encodes the specified PBUpdate message. Does not implicitly {@link PBUpdate.verify|verify} messages.
     * @function encode
     * @memberof PBUpdate
     * @static
     * @param {IPBUpdate} message PBUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBUpdate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);
        if (message.num != null && message.hasOwnProperty("num"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.num);
        if (message.sign != null && message.hasOwnProperty("sign"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.sign);
        if (message.reason != null && message.hasOwnProperty("reason"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.reason);
        return writer;
    };

    /**
     * Encodes the specified PBUpdate message, length delimited. Does not implicitly {@link PBUpdate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBUpdate
     * @static
     * @param {IPBUpdate} message PBUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBUpdate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBUpdate message from the specified reader or buffer.
     * @function decode
     * @memberof PBUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBUpdate} PBUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBUpdate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBUpdate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            case 2:
                message.id = reader.uint32();
                break;
            case 3:
                message.num = reader.uint64();
                break;
            case 4:
                message.sign = reader.bool();
                break;
            case 5:
                message.reason = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBUpdate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBUpdate} PBUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBUpdate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBUpdate message.
     * @function verify
     * @memberof PBUpdate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBUpdate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
            case 2:
                break;
            }
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.num != null && message.hasOwnProperty("num"))
            if (!$util.isInteger(message.num) && !(message.num && $util.isInteger(message.num.low) && $util.isInteger(message.num.high)))
                return "num: integer|Long expected";
        if (message.sign != null && message.hasOwnProperty("sign"))
            if (typeof message.sign !== "boolean")
                return "sign: boolean expected";
        if (message.reason != null && message.hasOwnProperty("reason"))
            if (!$util.isInteger(message.reason))
                return "reason: integer expected";
        return null;
    };

    /**
     * Creates a PBUpdate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBUpdate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBUpdate} PBUpdate
     */
    PBUpdate.fromObject = function fromObject(object) {
        if (object instanceof $root.PBUpdate)
            return object;
        var message = new $root.PBUpdate();
        switch (object.type) {
        case "EN_UPDATE_CHIP":
        case 1:
            message.type = 1;
            break;
        case "EN_UPDATE_DIAMOND":
        case 2:
            message.type = 2;
            break;
        }
        if (object.id != null)
            message.id = object.id >>> 0;
        if (object.num != null)
            if ($util.Long)
                (message.num = $util.Long.fromValue(object.num)).unsigned = true;
            else if (typeof object.num === "string")
                message.num = parseInt(object.num, 10);
            else if (typeof object.num === "number")
                message.num = object.num;
            else if (typeof object.num === "object")
                message.num = new $util.LongBits(object.num.low >>> 0, object.num.high >>> 0).toNumber(true);
        if (object.sign != null)
            message.sign = Boolean(object.sign);
        if (object.reason != null)
            message.reason = object.reason >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a PBUpdate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBUpdate
     * @static
     * @param {PBUpdate} message PBUpdate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBUpdate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.type = options.enums === String ? "EN_UPDATE_CHIP" : 1;
            object.id = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.num = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.num = options.longs === String ? "0" : 0;
            object.sign = false;
            object.reason = 0;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.PBUpdateType[message.type] : message.type;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.num != null && message.hasOwnProperty("num"))
            if (typeof message.num === "number")
                object.num = options.longs === String ? String(message.num) : message.num;
            else
                object.num = options.longs === String ? $util.Long.prototype.toString.call(message.num) : options.longs === Number ? new $util.LongBits(message.num.low >>> 0, message.num.high >>> 0).toNumber(true) : message.num;
        if (message.sign != null && message.hasOwnProperty("sign"))
            object.sign = message.sign;
        if (message.reason != null && message.hasOwnProperty("reason"))
            object.reason = message.reason;
        return object;
    };

    /**
     * Converts this PBUpdate to JSON.
     * @function toJSON
     * @memberof PBUpdate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBUpdate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBUpdate;
})();

$root.GMUpdateInfo = (function() {

    /**
     * Properties of a GMUpdateInfo.
     * @exports IGMUpdateInfo
     * @interface IGMUpdateInfo
     * @property {number|Long} [uid] GMUpdateInfo uid
     * @property {Array.<IPBUpdate>} [updates] GMUpdateInfo updates
     */

    /**
     * Constructs a new GMUpdateInfo.
     * @exports GMUpdateInfo
     * @classdesc Represents a GMUpdateInfo.
     * @constructor
     * @param {IGMUpdateInfo=} [properties] Properties to set
     */
    function GMUpdateInfo(properties) {
        this.updates = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * GMUpdateInfo uid.
     * @member {number|Long}uid
     * @memberof GMUpdateInfo
     * @instance
     */
    GMUpdateInfo.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * GMUpdateInfo updates.
     * @member {Array.<IPBUpdate>}updates
     * @memberof GMUpdateInfo
     * @instance
     */
    GMUpdateInfo.prototype.updates = $util.emptyArray;

    /**
     * Creates a new GMUpdateInfo instance using the specified properties.
     * @function create
     * @memberof GMUpdateInfo
     * @static
     * @param {IGMUpdateInfo=} [properties] Properties to set
     * @returns {GMUpdateInfo} GMUpdateInfo instance
     */
    GMUpdateInfo.create = function create(properties) {
        return new GMUpdateInfo(properties);
    };

    /**
     * Encodes the specified GMUpdateInfo message. Does not implicitly {@link GMUpdateInfo.verify|verify} messages.
     * @function encode
     * @memberof GMUpdateInfo
     * @static
     * @param {IGMUpdateInfo} message GMUpdateInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMUpdateInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        if (message.updates != null && message.updates.length)
            for (var i = 0; i < message.updates.length; ++i)
                $root.PBUpdate.encode(message.updates[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified GMUpdateInfo message, length delimited. Does not implicitly {@link GMUpdateInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GMUpdateInfo
     * @static
     * @param {IGMUpdateInfo} message GMUpdateInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMUpdateInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a GMUpdateInfo message from the specified reader or buffer.
     * @function decode
     * @memberof GMUpdateInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GMUpdateInfo} GMUpdateInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMUpdateInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMUpdateInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            case 2:
                if (!(message.updates && message.updates.length))
                    message.updates = [];
                message.updates.push($root.PBUpdate.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a GMUpdateInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GMUpdateInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GMUpdateInfo} GMUpdateInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMUpdateInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a GMUpdateInfo message.
     * @function verify
     * @memberof GMUpdateInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    GMUpdateInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.updates != null && message.hasOwnProperty("updates")) {
            if (!Array.isArray(message.updates))
                return "updates: array expected";
            for (var i = 0; i < message.updates.length; ++i) {
                var error = $root.PBUpdate.verify(message.updates[i]);
                if (error)
                    return "updates." + error;
            }
        }
        return null;
    };

    /**
     * Creates a GMUpdateInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GMUpdateInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GMUpdateInfo} GMUpdateInfo
     */
    GMUpdateInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.GMUpdateInfo)
            return object;
        var message = new $root.GMUpdateInfo();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.updates) {
            if (!Array.isArray(object.updates))
                throw TypeError(".GMUpdateInfo.updates: array expected");
            message.updates = [];
            for (var i = 0; i < object.updates.length; ++i) {
                if (typeof object.updates[i] !== "object")
                    throw TypeError(".GMUpdateInfo.updates: object expected");
                message.updates[i] = $root.PBUpdate.fromObject(object.updates[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a GMUpdateInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GMUpdateInfo
     * @static
     * @param {GMUpdateInfo} message GMUpdateInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    GMUpdateInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.updates = [];
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.updates && message.updates.length) {
            object.updates = [];
            for (var j = 0; j < message.updates.length; ++j)
                object.updates[j] = $root.PBUpdate.toObject(message.updates[j], options);
        }
        return object;
    };

    /**
     * Converts this GMUpdateInfo to JSON.
     * @function toJSON
     * @memberof GMUpdateInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    GMUpdateInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GMUpdateInfo;
})();

$root.GMRequestUpdate = (function() {

    /**
     * Properties of a GMRequestUpdate.
     * @exports IGMRequestUpdate
     * @interface IGMRequestUpdate
     * @property {Array.<IGMUpdateInfo>} [infos] GMRequestUpdate infos
     */

    /**
     * Constructs a new GMRequestUpdate.
     * @exports GMRequestUpdate
     * @classdesc Represents a GMRequestUpdate.
     * @constructor
     * @param {IGMRequestUpdate=} [properties] Properties to set
     */
    function GMRequestUpdate(properties) {
        this.infos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * GMRequestUpdate infos.
     * @member {Array.<IGMUpdateInfo>}infos
     * @memberof GMRequestUpdate
     * @instance
     */
    GMRequestUpdate.prototype.infos = $util.emptyArray;

    /**
     * Creates a new GMRequestUpdate instance using the specified properties.
     * @function create
     * @memberof GMRequestUpdate
     * @static
     * @param {IGMRequestUpdate=} [properties] Properties to set
     * @returns {GMRequestUpdate} GMRequestUpdate instance
     */
    GMRequestUpdate.create = function create(properties) {
        return new GMRequestUpdate(properties);
    };

    /**
     * Encodes the specified GMRequestUpdate message. Does not implicitly {@link GMRequestUpdate.verify|verify} messages.
     * @function encode
     * @memberof GMRequestUpdate
     * @static
     * @param {IGMRequestUpdate} message GMRequestUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMRequestUpdate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.infos != null && message.infos.length)
            for (var i = 0; i < message.infos.length; ++i)
                $root.GMUpdateInfo.encode(message.infos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified GMRequestUpdate message, length delimited. Does not implicitly {@link GMRequestUpdate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GMRequestUpdate
     * @static
     * @param {IGMRequestUpdate} message GMRequestUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMRequestUpdate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a GMRequestUpdate message from the specified reader or buffer.
     * @function decode
     * @memberof GMRequestUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GMRequestUpdate} GMRequestUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMRequestUpdate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMRequestUpdate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.infos && message.infos.length))
                    message.infos = [];
                message.infos.push($root.GMUpdateInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a GMRequestUpdate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GMRequestUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GMRequestUpdate} GMRequestUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMRequestUpdate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a GMRequestUpdate message.
     * @function verify
     * @memberof GMRequestUpdate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    GMRequestUpdate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.infos != null && message.hasOwnProperty("infos")) {
            if (!Array.isArray(message.infos))
                return "infos: array expected";
            for (var i = 0; i < message.infos.length; ++i) {
                var error = $root.GMUpdateInfo.verify(message.infos[i]);
                if (error)
                    return "infos." + error;
            }
        }
        return null;
    };

    /**
     * Creates a GMRequestUpdate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GMRequestUpdate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GMRequestUpdate} GMRequestUpdate
     */
    GMRequestUpdate.fromObject = function fromObject(object) {
        if (object instanceof $root.GMRequestUpdate)
            return object;
        var message = new $root.GMRequestUpdate();
        if (object.infos) {
            if (!Array.isArray(object.infos))
                throw TypeError(".GMRequestUpdate.infos: array expected");
            message.infos = [];
            for (var i = 0; i < object.infos.length; ++i) {
                if (typeof object.infos[i] !== "object")
                    throw TypeError(".GMRequestUpdate.infos: object expected");
                message.infos[i] = $root.GMUpdateInfo.fromObject(object.infos[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a GMRequestUpdate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GMRequestUpdate
     * @static
     * @param {GMRequestUpdate} message GMRequestUpdate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    GMRequestUpdate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.infos = [];
        if (message.infos && message.infos.length) {
            object.infos = [];
            for (var j = 0; j < message.infos.length; ++j)
                object.infos[j] = $root.GMUpdateInfo.toObject(message.infos[j], options);
        }
        return object;
    };

    /**
     * Converts this GMRequestUpdate to JSON.
     * @function toJSON
     * @memberof GMRequestUpdate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    GMRequestUpdate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GMRequestUpdate;
})();

$root.GMResponseUpdate = (function() {

    /**
     * Properties of a GMResponseUpdate.
     * @exports IGMResponseUpdate
     * @interface IGMResponseUpdate
     * @property {number} [result] GMResponseUpdate result
     * @property {Array.<number|Long>} [failedUids] GMResponseUpdate failedUids
     */

    /**
     * Constructs a new GMResponseUpdate.
     * @exports GMResponseUpdate
     * @classdesc Represents a GMResponseUpdate.
     * @constructor
     * @param {IGMResponseUpdate=} [properties] Properties to set
     */
    function GMResponseUpdate(properties) {
        this.failedUids = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * GMResponseUpdate result.
     * @member {number}result
     * @memberof GMResponseUpdate
     * @instance
     */
    GMResponseUpdate.prototype.result = 0;

    /**
     * GMResponseUpdate failedUids.
     * @member {Array.<number|Long>}failedUids
     * @memberof GMResponseUpdate
     * @instance
     */
    GMResponseUpdate.prototype.failedUids = $util.emptyArray;

    /**
     * Creates a new GMResponseUpdate instance using the specified properties.
     * @function create
     * @memberof GMResponseUpdate
     * @static
     * @param {IGMResponseUpdate=} [properties] Properties to set
     * @returns {GMResponseUpdate} GMResponseUpdate instance
     */
    GMResponseUpdate.create = function create(properties) {
        return new GMResponseUpdate(properties);
    };

    /**
     * Encodes the specified GMResponseUpdate message. Does not implicitly {@link GMResponseUpdate.verify|verify} messages.
     * @function encode
     * @memberof GMResponseUpdate
     * @static
     * @param {IGMResponseUpdate} message GMResponseUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMResponseUpdate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.failedUids != null && message.failedUids.length)
            for (var i = 0; i < message.failedUids.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.failedUids[i]);
        return writer;
    };

    /**
     * Encodes the specified GMResponseUpdate message, length delimited. Does not implicitly {@link GMResponseUpdate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GMResponseUpdate
     * @static
     * @param {IGMResponseUpdate} message GMResponseUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMResponseUpdate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a GMResponseUpdate message from the specified reader or buffer.
     * @function decode
     * @memberof GMResponseUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GMResponseUpdate} GMResponseUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMResponseUpdate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMResponseUpdate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                if (!(message.failedUids && message.failedUids.length))
                    message.failedUids = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.failedUids.push(reader.uint64());
                } else
                    message.failedUids.push(reader.uint64());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a GMResponseUpdate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GMResponseUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GMResponseUpdate} GMResponseUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMResponseUpdate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a GMResponseUpdate message.
     * @function verify
     * @memberof GMResponseUpdate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    GMResponseUpdate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            if (!$util.isInteger(message.result))
                return "result: integer expected";
        if (message.failedUids != null && message.hasOwnProperty("failedUids")) {
            if (!Array.isArray(message.failedUids))
                return "failedUids: array expected";
            for (var i = 0; i < message.failedUids.length; ++i)
                if (!$util.isInteger(message.failedUids[i]) && !(message.failedUids[i] && $util.isInteger(message.failedUids[i].low) && $util.isInteger(message.failedUids[i].high)))
                    return "failedUids: integer|Long[] expected";
        }
        return null;
    };

    /**
     * Creates a GMResponseUpdate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GMResponseUpdate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GMResponseUpdate} GMResponseUpdate
     */
    GMResponseUpdate.fromObject = function fromObject(object) {
        if (object instanceof $root.GMResponseUpdate)
            return object;
        var message = new $root.GMResponseUpdate();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.failedUids) {
            if (!Array.isArray(object.failedUids))
                throw TypeError(".GMResponseUpdate.failedUids: array expected");
            message.failedUids = [];
            for (var i = 0; i < object.failedUids.length; ++i)
                if ($util.Long)
                    (message.failedUids[i] = $util.Long.fromValue(object.failedUids[i])).unsigned = true;
                else if (typeof object.failedUids[i] === "string")
                    message.failedUids[i] = parseInt(object.failedUids[i], 10);
                else if (typeof object.failedUids[i] === "number")
                    message.failedUids[i] = object.failedUids[i];
                else if (typeof object.failedUids[i] === "object")
                    message.failedUids[i] = new $util.LongBits(object.failedUids[i].low >>> 0, object.failedUids[i].high >>> 0).toNumber(true);
        }
        return message;
    };

    /**
     * Creates a plain object from a GMResponseUpdate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GMResponseUpdate
     * @static
     * @param {GMResponseUpdate} message GMResponseUpdate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    GMResponseUpdate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.failedUids = [];
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.failedUids && message.failedUids.length) {
            object.failedUids = [];
            for (var j = 0; j < message.failedUids.length; ++j)
                if (typeof message.failedUids[j] === "number")
                    object.failedUids[j] = options.longs === String ? String(message.failedUids[j]) : message.failedUids[j];
                else
                    object.failedUids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.failedUids[j]) : options.longs === Number ? new $util.LongBits(message.failedUids[j].low >>> 0, message.failedUids[j].high >>> 0).toNumber(true) : message.failedUids[j];
        }
        return object;
    };

    /**
     * Converts this GMResponseUpdate to JSON.
     * @function toJSON
     * @memberof GMResponseUpdate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    GMResponseUpdate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GMResponseUpdate;
})();

$root.GMPlayerInfo = (function() {

    /**
     * Properties of a GMPlayerInfo.
     * @exports IGMPlayerInfo
     * @interface IGMPlayerInfo
     * @property {number|Long} [uid] GMPlayerInfo uid
     * @property {number|Long} [diamond] GMPlayerInfo diamond
     */

    /**
     * Constructs a new GMPlayerInfo.
     * @exports GMPlayerInfo
     * @classdesc Represents a GMPlayerInfo.
     * @constructor
     * @param {IGMPlayerInfo=} [properties] Properties to set
     */
    function GMPlayerInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * GMPlayerInfo uid.
     * @member {number|Long}uid
     * @memberof GMPlayerInfo
     * @instance
     */
    GMPlayerInfo.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * GMPlayerInfo diamond.
     * @member {number|Long}diamond
     * @memberof GMPlayerInfo
     * @instance
     */
    GMPlayerInfo.prototype.diamond = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new GMPlayerInfo instance using the specified properties.
     * @function create
     * @memberof GMPlayerInfo
     * @static
     * @param {IGMPlayerInfo=} [properties] Properties to set
     * @returns {GMPlayerInfo} GMPlayerInfo instance
     */
    GMPlayerInfo.create = function create(properties) {
        return new GMPlayerInfo(properties);
    };

    /**
     * Encodes the specified GMPlayerInfo message. Does not implicitly {@link GMPlayerInfo.verify|verify} messages.
     * @function encode
     * @memberof GMPlayerInfo
     * @static
     * @param {IGMPlayerInfo} message GMPlayerInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMPlayerInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.diamond);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.uid);
        return writer;
    };

    /**
     * Encodes the specified GMPlayerInfo message, length delimited. Does not implicitly {@link GMPlayerInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GMPlayerInfo
     * @static
     * @param {IGMPlayerInfo} message GMPlayerInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMPlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a GMPlayerInfo message from the specified reader or buffer.
     * @function decode
     * @memberof GMPlayerInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GMPlayerInfo} GMPlayerInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMPlayerInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMPlayerInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.uid = reader.uint64();
                break;
            case 1:
                message.diamond = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a GMPlayerInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GMPlayerInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GMPlayerInfo} GMPlayerInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMPlayerInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a GMPlayerInfo message.
     * @function verify
     * @memberof GMPlayerInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    GMPlayerInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            if (!$util.isInteger(message.diamond) && !(message.diamond && $util.isInteger(message.diamond.low) && $util.isInteger(message.diamond.high)))
                return "diamond: integer|Long expected";
        return null;
    };

    /**
     * Creates a GMPlayerInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GMPlayerInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GMPlayerInfo} GMPlayerInfo
     */
    GMPlayerInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.GMPlayerInfo)
            return object;
        var message = new $root.GMPlayerInfo();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.diamond != null)
            if ($util.Long)
                (message.diamond = $util.Long.fromValue(object.diamond)).unsigned = true;
            else if (typeof object.diamond === "string")
                message.diamond = parseInt(object.diamond, 10);
            else if (typeof object.diamond === "number")
                message.diamond = object.diamond;
            else if (typeof object.diamond === "object")
                message.diamond = new $util.LongBits(object.diamond.low >>> 0, object.diamond.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a GMPlayerInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GMPlayerInfo
     * @static
     * @param {GMPlayerInfo} message GMPlayerInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    GMPlayerInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.diamond = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.diamond = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        }
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            if (typeof message.diamond === "number")
                object.diamond = options.longs === String ? String(message.diamond) : message.diamond;
            else
                object.diamond = options.longs === String ? $util.Long.prototype.toString.call(message.diamond) : options.longs === Number ? new $util.LongBits(message.diamond.low >>> 0, message.diamond.high >>> 0).toNumber(true) : message.diamond;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        return object;
    };

    /**
     * Converts this GMPlayerInfo to JSON.
     * @function toJSON
     * @memberof GMPlayerInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    GMPlayerInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GMPlayerInfo;
})();

$root.GMRequestPlayerInfo = (function() {

    /**
     * Properties of a GMRequestPlayerInfo.
     * @exports IGMRequestPlayerInfo
     * @interface IGMRequestPlayerInfo
     * @property {number|Long} [uid] GMRequestPlayerInfo uid
     */

    /**
     * Constructs a new GMRequestPlayerInfo.
     * @exports GMRequestPlayerInfo
     * @classdesc Represents a GMRequestPlayerInfo.
     * @constructor
     * @param {IGMRequestPlayerInfo=} [properties] Properties to set
     */
    function GMRequestPlayerInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * GMRequestPlayerInfo uid.
     * @member {number|Long}uid
     * @memberof GMRequestPlayerInfo
     * @instance
     */
    GMRequestPlayerInfo.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new GMRequestPlayerInfo instance using the specified properties.
     * @function create
     * @memberof GMRequestPlayerInfo
     * @static
     * @param {IGMRequestPlayerInfo=} [properties] Properties to set
     * @returns {GMRequestPlayerInfo} GMRequestPlayerInfo instance
     */
    GMRequestPlayerInfo.create = function create(properties) {
        return new GMRequestPlayerInfo(properties);
    };

    /**
     * Encodes the specified GMRequestPlayerInfo message. Does not implicitly {@link GMRequestPlayerInfo.verify|verify} messages.
     * @function encode
     * @memberof GMRequestPlayerInfo
     * @static
     * @param {IGMRequestPlayerInfo} message GMRequestPlayerInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMRequestPlayerInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        return writer;
    };

    /**
     * Encodes the specified GMRequestPlayerInfo message, length delimited. Does not implicitly {@link GMRequestPlayerInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GMRequestPlayerInfo
     * @static
     * @param {IGMRequestPlayerInfo} message GMRequestPlayerInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMRequestPlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a GMRequestPlayerInfo message from the specified reader or buffer.
     * @function decode
     * @memberof GMRequestPlayerInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GMRequestPlayerInfo} GMRequestPlayerInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMRequestPlayerInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMRequestPlayerInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a GMRequestPlayerInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GMRequestPlayerInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GMRequestPlayerInfo} GMRequestPlayerInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMRequestPlayerInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a GMRequestPlayerInfo message.
     * @function verify
     * @memberof GMRequestPlayerInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    GMRequestPlayerInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        return null;
    };

    /**
     * Creates a GMRequestPlayerInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GMRequestPlayerInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GMRequestPlayerInfo} GMRequestPlayerInfo
     */
    GMRequestPlayerInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.GMRequestPlayerInfo)
            return object;
        var message = new $root.GMRequestPlayerInfo();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a GMRequestPlayerInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GMRequestPlayerInfo
     * @static
     * @param {GMRequestPlayerInfo} message GMRequestPlayerInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    GMRequestPlayerInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        return object;
    };

    /**
     * Converts this GMRequestPlayerInfo to JSON.
     * @function toJSON
     * @memberof GMRequestPlayerInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    GMRequestPlayerInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GMRequestPlayerInfo;
})();

$root.GMResponsePlayerInfo = (function() {

    /**
     * Properties of a GMResponsePlayerInfo.
     * @exports IGMResponsePlayerInfo
     * @interface IGMResponsePlayerInfo
     * @property {IGMPlayerInfo} [info] GMResponsePlayerInfo info
     */

    /**
     * Constructs a new GMResponsePlayerInfo.
     * @exports GMResponsePlayerInfo
     * @classdesc Represents a GMResponsePlayerInfo.
     * @constructor
     * @param {IGMResponsePlayerInfo=} [properties] Properties to set
     */
    function GMResponsePlayerInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * GMResponsePlayerInfo info.
     * @member {(IGMPlayerInfo|null|undefined)}info
     * @memberof GMResponsePlayerInfo
     * @instance
     */
    GMResponsePlayerInfo.prototype.info = null;

    /**
     * Creates a new GMResponsePlayerInfo instance using the specified properties.
     * @function create
     * @memberof GMResponsePlayerInfo
     * @static
     * @param {IGMResponsePlayerInfo=} [properties] Properties to set
     * @returns {GMResponsePlayerInfo} GMResponsePlayerInfo instance
     */
    GMResponsePlayerInfo.create = function create(properties) {
        return new GMResponsePlayerInfo(properties);
    };

    /**
     * Encodes the specified GMResponsePlayerInfo message. Does not implicitly {@link GMResponsePlayerInfo.verify|verify} messages.
     * @function encode
     * @memberof GMResponsePlayerInfo
     * @static
     * @param {IGMResponsePlayerInfo} message GMResponsePlayerInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMResponsePlayerInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.info != null && message.hasOwnProperty("info"))
            $root.GMPlayerInfo.encode(message.info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified GMResponsePlayerInfo message, length delimited. Does not implicitly {@link GMResponsePlayerInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GMResponsePlayerInfo
     * @static
     * @param {IGMResponsePlayerInfo} message GMResponsePlayerInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMResponsePlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a GMResponsePlayerInfo message from the specified reader or buffer.
     * @function decode
     * @memberof GMResponsePlayerInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GMResponsePlayerInfo} GMResponsePlayerInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMResponsePlayerInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMResponsePlayerInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.info = $root.GMPlayerInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a GMResponsePlayerInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GMResponsePlayerInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GMResponsePlayerInfo} GMResponsePlayerInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMResponsePlayerInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a GMResponsePlayerInfo message.
     * @function verify
     * @memberof GMResponsePlayerInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    GMResponsePlayerInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.info != null && message.hasOwnProperty("info")) {
            var error = $root.GMPlayerInfo.verify(message.info);
            if (error)
                return "info." + error;
        }
        return null;
    };

    /**
     * Creates a GMResponsePlayerInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GMResponsePlayerInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GMResponsePlayerInfo} GMResponsePlayerInfo
     */
    GMResponsePlayerInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.GMResponsePlayerInfo)
            return object;
        var message = new $root.GMResponsePlayerInfo();
        if (object.info != null) {
            if (typeof object.info !== "object")
                throw TypeError(".GMResponsePlayerInfo.info: object expected");
            message.info = $root.GMPlayerInfo.fromObject(object.info);
        }
        return message;
    };

    /**
     * Creates a plain object from a GMResponsePlayerInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GMResponsePlayerInfo
     * @static
     * @param {GMResponsePlayerInfo} message GMResponsePlayerInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    GMResponsePlayerInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.info = null;
        if (message.info != null && message.hasOwnProperty("info"))
            object.info = $root.GMPlayerInfo.toObject(message.info, options);
        return object;
    };

    /**
     * Converts this GMResponsePlayerInfo to JSON.
     * @function toJSON
     * @memberof GMResponsePlayerInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    GMResponsePlayerInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GMResponsePlayerInfo;
})();

$root.GMNotifyClient = (function() {

    /**
     * Properties of a GMNotifyClient.
     * @exports IGMNotifyClient
     * @interface IGMNotifyClient
     * @property {number|Long} [uid] GMNotifyClient uid
     * @property {string} [content] GMNotifyClient content
     */

    /**
     * Constructs a new GMNotifyClient.
     * @exports GMNotifyClient
     * @classdesc Represents a GMNotifyClient.
     * @constructor
     * @param {IGMNotifyClient=} [properties] Properties to set
     */
    function GMNotifyClient(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * GMNotifyClient uid.
     * @member {number|Long}uid
     * @memberof GMNotifyClient
     * @instance
     */
    GMNotifyClient.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * GMNotifyClient content.
     * @member {string}content
     * @memberof GMNotifyClient
     * @instance
     */
    GMNotifyClient.prototype.content = "";

    /**
     * Creates a new GMNotifyClient instance using the specified properties.
     * @function create
     * @memberof GMNotifyClient
     * @static
     * @param {IGMNotifyClient=} [properties] Properties to set
     * @returns {GMNotifyClient} GMNotifyClient instance
     */
    GMNotifyClient.create = function create(properties) {
        return new GMNotifyClient(properties);
    };

    /**
     * Encodes the specified GMNotifyClient message. Does not implicitly {@link GMNotifyClient.verify|verify} messages.
     * @function encode
     * @memberof GMNotifyClient
     * @static
     * @param {IGMNotifyClient} message GMNotifyClient message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMNotifyClient.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        if (message.content != null && message.hasOwnProperty("content"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
        return writer;
    };

    /**
     * Encodes the specified GMNotifyClient message, length delimited. Does not implicitly {@link GMNotifyClient.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GMNotifyClient
     * @static
     * @param {IGMNotifyClient} message GMNotifyClient message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GMNotifyClient.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a GMNotifyClient message from the specified reader or buffer.
     * @function decode
     * @memberof GMNotifyClient
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GMNotifyClient} GMNotifyClient
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMNotifyClient.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMNotifyClient();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            case 2:
                message.content = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a GMNotifyClient message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GMNotifyClient
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GMNotifyClient} GMNotifyClient
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GMNotifyClient.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a GMNotifyClient message.
     * @function verify
     * @memberof GMNotifyClient
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    GMNotifyClient.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.content != null && message.hasOwnProperty("content"))
            if (!$util.isString(message.content))
                return "content: string expected";
        return null;
    };

    /**
     * Creates a GMNotifyClient message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GMNotifyClient
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GMNotifyClient} GMNotifyClient
     */
    GMNotifyClient.fromObject = function fromObject(object) {
        if (object instanceof $root.GMNotifyClient)
            return object;
        var message = new $root.GMNotifyClient();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.content != null)
            message.content = String(object.content);
        return message;
    };

    /**
     * Creates a plain object from a GMNotifyClient message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GMNotifyClient
     * @static
     * @param {GMNotifyClient} message GMNotifyClient
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    GMNotifyClient.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
            object.content = "";
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.content != null && message.hasOwnProperty("content"))
            object.content = message.content;
        return object;
    };

    /**
     * Converts this GMNotifyClient to JSON.
     * @function toJSON
     * @memberof GMNotifyClient
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    GMNotifyClient.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GMNotifyClient;
})();

$root.PBSSMsg = (function() {

    /**
     * Properties of a PBSSMsg.
     * @exports IPBSSMsg
     * @interface IPBSSMsg
     * @property {ICSRequestCreateTable} [csRequestCreateTable] PBSSMsg csRequestCreateTable
     * @property {ICSResponseCreateTable} [csResponseCreateTable] PBSSMsg csResponseCreateTable
     * @property {ICSRequestTableList} [csRequestTableList] PBSSMsg csRequestTableList
     * @property {ICSResponseTableList} [csResponseTableList] PBSSMsg csResponseTableList
     * @property {ICSRequestTableInfo} [csRequestTableInfo] PBSSMsg csRequestTableInfo
     * @property {ICSResponseTableInfo} [csRepsonseTableInfo] PBSSMsg csRepsonseTableInfo
     * @property {ICSRequestSngSignUp} [csRequestSngSignUp] PBSSMsg csRequestSngSignUp
     * @property {ICSResponseSngSignUp} [csResponseSngSignUp] PBSSMsg csResponseSngSignUp
     * @property {ICSRequestTableListBySubType} [csRequestTableListBySubtype] PBSSMsg csRequestTableListBySubtype
     * @property {ICSResponseTableListBySubType} [csResponseTableListBySubtype] PBSSMsg csResponseTableListBySubtype
     * @property {ICSRequestTableListByStatus} [csRequestTableListByStatus] PBSSMsg csRequestTableListByStatus
     * @property {ICSResponseTableListByStatus} [csResponseTableListByStatus] PBSSMsg csResponseTableListByStatus
     * @property {ICSRequestTrainingSignUp} [csRequestTrainingSignUp] PBSSMsg csRequestTrainingSignUp
     * @property {ICSResponseTrainingSignUp} [csResponseTrainingSignUp] PBSSMsg csResponseTrainingSignUp
     * @property {ISSRequestQueryData} [ssRequestQueryData] PBSSMsg ssRequestQueryData
     * @property {ISSResponseQueryData} [ssResponseQueryData] PBSSMsg ssResponseQueryData
     * @property {ISSRequestSaveData} [ssRequestSaveData] PBSSMsg ssRequestSaveData
     * @property {ISSResponseSaveData} [ssResponseSaveData] PBSSMsg ssResponseSaveData
     * @property {ISSRequestDelData} [ssRequestDelData] PBSSMsg ssRequestDelData
     * @property {ISSResponseDelData} [ssResponseDelData] PBSSMsg ssResponseDelData
     * @property {ISSRequestToplistUpdate} [ssRequestToplistUpdate] PBSSMsg ssRequestToplistUpdate
     * @property {ISSResponseToplistUpdate} [ssResponseToplistUpdate] PBSSMsg ssResponseToplistUpdate
     * @property {ISSRequestToplistGetSingle} [ssRequestToplistGetSingle] PBSSMsg ssRequestToplistGetSingle
     * @property {ISSResponseToplistGetSingle} [ssResponseToplistGetSingle] PBSSMsg ssResponseToplistGetSingle
     * @property {ISSRequestToplistGetRange} [ssRequestToplistGetRange] PBSSMsg ssRequestToplistGetRange
     * @property {ISSResponseToplistGetRange} [ssResponseToplistGetRange] PBSSMsg ssResponseToplistGetRange
     * @property {ISSNotifyGameUploadTables} [ssNotifyGameUploadTables] PBSSMsg ssNotifyGameUploadTables
     * @property {ISSNotifyClearTables} [ssNotifyClearTables] PBSSMsg ssNotifyClearTables
     * @property {ISSNotifyRoomUploadTables} [ssNotifyRoomUploadTables] PBSSMsg ssNotifyRoomUploadTables
     * @property {ISSNotifyUpdateTable} [ssNotifyUpdateTable] PBSSMsg ssNotifyUpdateTable
     * @property {ISSNotifyDeleteTable} [ssNotifyDeleteTable] PBSSMsg ssNotifyDeleteTable
     * @property {ISSGameToRoomHeartBeat} [ssGameToRoomHeartBeat] PBSSMsg ssGameToRoomHeartBeat
     * @property {ISSNotifyCheckCore} [ssNotifyCheckCore] PBSSMsg ssNotifyCheckCore
     * @property {IGMRequestUpdate} [gmRequestUpdate] PBSSMsg gmRequestUpdate
     * @property {IGMResponseUpdate} [gmResponseUpdate] PBSSMsg gmResponseUpdate
     * @property {IGMNotifyClient} [gmNotifyClient] PBSSMsg gmNotifyClient
     * @property {IGMRequestPlayerInfo} [gmRequestPlayerInfo] PBSSMsg gmRequestPlayerInfo
     * @property {IGMResponsePlayerInfo} [gmResponsePlayerInfo] PBSSMsg gmResponsePlayerInfo
     */

    /**
     * Constructs a new PBSSMsg.
     * @exports PBSSMsg
     * @classdesc Represents a PBSSMsg.
     * @constructor
     * @param {IPBSSMsg=} [properties] Properties to set
     */
    function PBSSMsg(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBSSMsg csRequestCreateTable.
     * @member {(ICSRequestCreateTable|null|undefined)}csRequestCreateTable
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csRequestCreateTable = null;

    /**
     * PBSSMsg csResponseCreateTable.
     * @member {(ICSResponseCreateTable|null|undefined)}csResponseCreateTable
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csResponseCreateTable = null;

    /**
     * PBSSMsg csRequestTableList.
     * @member {(ICSRequestTableList|null|undefined)}csRequestTableList
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csRequestTableList = null;

    /**
     * PBSSMsg csResponseTableList.
     * @member {(ICSResponseTableList|null|undefined)}csResponseTableList
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csResponseTableList = null;

    /**
     * PBSSMsg csRequestTableInfo.
     * @member {(ICSRequestTableInfo|null|undefined)}csRequestTableInfo
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csRequestTableInfo = null;

    /**
     * PBSSMsg csRepsonseTableInfo.
     * @member {(ICSResponseTableInfo|null|undefined)}csRepsonseTableInfo
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csRepsonseTableInfo = null;

    /**
     * PBSSMsg csRequestSngSignUp.
     * @member {(ICSRequestSngSignUp|null|undefined)}csRequestSngSignUp
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csRequestSngSignUp = null;

    /**
     * PBSSMsg csResponseSngSignUp.
     * @member {(ICSResponseSngSignUp|null|undefined)}csResponseSngSignUp
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csResponseSngSignUp = null;

    /**
     * PBSSMsg csRequestTableListBySubtype.
     * @member {(ICSRequestTableListBySubType|null|undefined)}csRequestTableListBySubtype
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csRequestTableListBySubtype = null;

    /**
     * PBSSMsg csResponseTableListBySubtype.
     * @member {(ICSResponseTableListBySubType|null|undefined)}csResponseTableListBySubtype
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csResponseTableListBySubtype = null;

    /**
     * PBSSMsg csRequestTableListByStatus.
     * @member {(ICSRequestTableListByStatus|null|undefined)}csRequestTableListByStatus
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csRequestTableListByStatus = null;

    /**
     * PBSSMsg csResponseTableListByStatus.
     * @member {(ICSResponseTableListByStatus|null|undefined)}csResponseTableListByStatus
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csResponseTableListByStatus = null;

    /**
     * PBSSMsg csRequestTrainingSignUp.
     * @member {(ICSRequestTrainingSignUp|null|undefined)}csRequestTrainingSignUp
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csRequestTrainingSignUp = null;

    /**
     * PBSSMsg csResponseTrainingSignUp.
     * @member {(ICSResponseTrainingSignUp|null|undefined)}csResponseTrainingSignUp
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.csResponseTrainingSignUp = null;

    /**
     * PBSSMsg ssRequestQueryData.
     * @member {(ISSRequestQueryData|null|undefined)}ssRequestQueryData
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssRequestQueryData = null;

    /**
     * PBSSMsg ssResponseQueryData.
     * @member {(ISSResponseQueryData|null|undefined)}ssResponseQueryData
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssResponseQueryData = null;

    /**
     * PBSSMsg ssRequestSaveData.
     * @member {(ISSRequestSaveData|null|undefined)}ssRequestSaveData
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssRequestSaveData = null;

    /**
     * PBSSMsg ssResponseSaveData.
     * @member {(ISSResponseSaveData|null|undefined)}ssResponseSaveData
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssResponseSaveData = null;

    /**
     * PBSSMsg ssRequestDelData.
     * @member {(ISSRequestDelData|null|undefined)}ssRequestDelData
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssRequestDelData = null;

    /**
     * PBSSMsg ssResponseDelData.
     * @member {(ISSResponseDelData|null|undefined)}ssResponseDelData
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssResponseDelData = null;

    /**
     * PBSSMsg ssRequestToplistUpdate.
     * @member {(ISSRequestToplistUpdate|null|undefined)}ssRequestToplistUpdate
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssRequestToplistUpdate = null;

    /**
     * PBSSMsg ssResponseToplistUpdate.
     * @member {(ISSResponseToplistUpdate|null|undefined)}ssResponseToplistUpdate
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssResponseToplistUpdate = null;

    /**
     * PBSSMsg ssRequestToplistGetSingle.
     * @member {(ISSRequestToplistGetSingle|null|undefined)}ssRequestToplistGetSingle
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssRequestToplistGetSingle = null;

    /**
     * PBSSMsg ssResponseToplistGetSingle.
     * @member {(ISSResponseToplistGetSingle|null|undefined)}ssResponseToplistGetSingle
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssResponseToplistGetSingle = null;

    /**
     * PBSSMsg ssRequestToplistGetRange.
     * @member {(ISSRequestToplistGetRange|null|undefined)}ssRequestToplistGetRange
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssRequestToplistGetRange = null;

    /**
     * PBSSMsg ssResponseToplistGetRange.
     * @member {(ISSResponseToplistGetRange|null|undefined)}ssResponseToplistGetRange
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssResponseToplistGetRange = null;

    /**
     * PBSSMsg ssNotifyGameUploadTables.
     * @member {(ISSNotifyGameUploadTables|null|undefined)}ssNotifyGameUploadTables
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssNotifyGameUploadTables = null;

    /**
     * PBSSMsg ssNotifyClearTables.
     * @member {(ISSNotifyClearTables|null|undefined)}ssNotifyClearTables
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssNotifyClearTables = null;

    /**
     * PBSSMsg ssNotifyRoomUploadTables.
     * @member {(ISSNotifyRoomUploadTables|null|undefined)}ssNotifyRoomUploadTables
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssNotifyRoomUploadTables = null;

    /**
     * PBSSMsg ssNotifyUpdateTable.
     * @member {(ISSNotifyUpdateTable|null|undefined)}ssNotifyUpdateTable
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssNotifyUpdateTable = null;

    /**
     * PBSSMsg ssNotifyDeleteTable.
     * @member {(ISSNotifyDeleteTable|null|undefined)}ssNotifyDeleteTable
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssNotifyDeleteTable = null;

    /**
     * PBSSMsg ssGameToRoomHeartBeat.
     * @member {(ISSGameToRoomHeartBeat|null|undefined)}ssGameToRoomHeartBeat
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssGameToRoomHeartBeat = null;

    /**
     * PBSSMsg ssNotifyCheckCore.
     * @member {(ISSNotifyCheckCore|null|undefined)}ssNotifyCheckCore
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.ssNotifyCheckCore = null;

    /**
     * PBSSMsg gmRequestUpdate.
     * @member {(IGMRequestUpdate|null|undefined)}gmRequestUpdate
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.gmRequestUpdate = null;

    /**
     * PBSSMsg gmResponseUpdate.
     * @member {(IGMResponseUpdate|null|undefined)}gmResponseUpdate
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.gmResponseUpdate = null;

    /**
     * PBSSMsg gmNotifyClient.
     * @member {(IGMNotifyClient|null|undefined)}gmNotifyClient
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.gmNotifyClient = null;

    /**
     * PBSSMsg gmRequestPlayerInfo.
     * @member {(IGMRequestPlayerInfo|null|undefined)}gmRequestPlayerInfo
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.gmRequestPlayerInfo = null;

    /**
     * PBSSMsg gmResponsePlayerInfo.
     * @member {(IGMResponsePlayerInfo|null|undefined)}gmResponsePlayerInfo
     * @memberof PBSSMsg
     * @instance
     */
    PBSSMsg.prototype.gmResponsePlayerInfo = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PBSSMsg msgUnion.
     * @member {string|undefined} msgUnion
     * @memberof PBSSMsg
     * @instance
     */
    Object.defineProperty(PBSSMsg.prototype, "msgUnion", {
        get: $util.oneOfGetter($oneOfFields = ["csRequestCreateTable", "csResponseCreateTable", "csRequestTableList", "csResponseTableList", "csRequestTableInfo", "csRepsonseTableInfo", "csRequestSngSignUp", "csResponseSngSignUp", "csRequestTableListBySubtype", "csResponseTableListBySubtype", "csRequestTableListByStatus", "csResponseTableListByStatus", "csRequestTrainingSignUp", "csResponseTrainingSignUp", "ssRequestQueryData", "ssResponseQueryData", "ssRequestSaveData", "ssResponseSaveData", "ssRequestDelData", "ssResponseDelData", "ssRequestToplistUpdate", "ssResponseToplistUpdate", "ssRequestToplistGetSingle", "ssResponseToplistGetSingle", "ssRequestToplistGetRange", "ssResponseToplistGetRange", "ssNotifyGameUploadTables", "ssNotifyClearTables", "ssNotifyRoomUploadTables", "ssNotifyUpdateTable", "ssNotifyDeleteTable", "ssGameToRoomHeartBeat", "ssNotifyCheckCore", "gmRequestUpdate", "gmResponseUpdate", "gmNotifyClient", "gmRequestPlayerInfo", "gmResponsePlayerInfo"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PBSSMsg instance using the specified properties.
     * @function create
     * @memberof PBSSMsg
     * @static
     * @param {IPBSSMsg=} [properties] Properties to set
     * @returns {PBSSMsg} PBSSMsg instance
     */
    PBSSMsg.create = function create(properties) {
        return new PBSSMsg(properties);
    };

    /**
     * Encodes the specified PBSSMsg message. Does not implicitly {@link PBSSMsg.verify|verify} messages.
     * @function encode
     * @memberof PBSSMsg
     * @static
     * @param {IPBSSMsg} message PBSSMsg message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBSSMsg.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.csRequestCreateTable != null && message.hasOwnProperty("csRequestCreateTable"))
            $root.CSRequestCreateTable.encode(message.csRequestCreateTable, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
        if (message.csResponseCreateTable != null && message.hasOwnProperty("csResponseCreateTable"))
            $root.CSResponseCreateTable.encode(message.csResponseCreateTable, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
        if (message.csRequestTableList != null && message.hasOwnProperty("csRequestTableList"))
            $root.CSRequestTableList.encode(message.csRequestTableList, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
        if (message.csResponseTableList != null && message.hasOwnProperty("csResponseTableList"))
            $root.CSResponseTableList.encode(message.csResponseTableList, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
        if (message.csRequestTableInfo != null && message.hasOwnProperty("csRequestTableInfo"))
            $root.CSRequestTableInfo.encode(message.csRequestTableInfo, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
        if (message.csRepsonseTableInfo != null && message.hasOwnProperty("csRepsonseTableInfo"))
            $root.CSResponseTableInfo.encode(message.csRepsonseTableInfo, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
        if (message.csRequestSngSignUp != null && message.hasOwnProperty("csRequestSngSignUp"))
            $root.CSRequestSngSignUp.encode(message.csRequestSngSignUp, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
        if (message.csResponseSngSignUp != null && message.hasOwnProperty("csResponseSngSignUp"))
            $root.CSResponseSngSignUp.encode(message.csResponseSngSignUp, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
        if (message.csRequestTableListBySubtype != null && message.hasOwnProperty("csRequestTableListBySubtype"))
            $root.CSRequestTableListBySubType.encode(message.csRequestTableListBySubtype, writer.uint32(/* id 43, wireType 2 =*/346).fork()).ldelim();
        if (message.csResponseTableListBySubtype != null && message.hasOwnProperty("csResponseTableListBySubtype"))
            $root.CSResponseTableListBySubType.encode(message.csResponseTableListBySubtype, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
        if (message.csRequestTableListByStatus != null && message.hasOwnProperty("csRequestTableListByStatus"))
            $root.CSRequestTableListByStatus.encode(message.csRequestTableListByStatus, writer.uint32(/* id 45, wireType 2 =*/362).fork()).ldelim();
        if (message.csResponseTableListByStatus != null && message.hasOwnProperty("csResponseTableListByStatus"))
            $root.CSResponseTableListByStatus.encode(message.csResponseTableListByStatus, writer.uint32(/* id 46, wireType 2 =*/370).fork()).ldelim();
        if (message.csRequestTrainingSignUp != null && message.hasOwnProperty("csRequestTrainingSignUp"))
            $root.CSRequestTrainingSignUp.encode(message.csRequestTrainingSignUp, writer.uint32(/* id 47, wireType 2 =*/378).fork()).ldelim();
        if (message.csResponseTrainingSignUp != null && message.hasOwnProperty("csResponseTrainingSignUp"))
            $root.CSResponseTrainingSignUp.encode(message.csResponseTrainingSignUp, writer.uint32(/* id 48, wireType 2 =*/386).fork()).ldelim();
        if (message.ssNotifyClearTables != null && message.hasOwnProperty("ssNotifyClearTables"))
            $root.SSNotifyClearTables.encode(message.ssNotifyClearTables, writer.uint32(/* id 1600, wireType 2 =*/12802).fork()).ldelim();
        if (message.ssNotifyGameUploadTables != null && message.hasOwnProperty("ssNotifyGameUploadTables"))
            $root.SSNotifyGameUploadTables.encode(message.ssNotifyGameUploadTables, writer.uint32(/* id 1601, wireType 2 =*/12810).fork()).ldelim();
        if (message.ssNotifyRoomUploadTables != null && message.hasOwnProperty("ssNotifyRoomUploadTables"))
            $root.SSNotifyRoomUploadTables.encode(message.ssNotifyRoomUploadTables, writer.uint32(/* id 1602, wireType 2 =*/12818).fork()).ldelim();
        if (message.ssNotifyUpdateTable != null && message.hasOwnProperty("ssNotifyUpdateTable"))
            $root.SSNotifyUpdateTable.encode(message.ssNotifyUpdateTable, writer.uint32(/* id 1603, wireType 2 =*/12826).fork()).ldelim();
        if (message.ssNotifyDeleteTable != null && message.hasOwnProperty("ssNotifyDeleteTable"))
            $root.SSNotifyDeleteTable.encode(message.ssNotifyDeleteTable, writer.uint32(/* id 1604, wireType 2 =*/12834).fork()).ldelim();
        if (message.ssGameToRoomHeartBeat != null && message.hasOwnProperty("ssGameToRoomHeartBeat"))
            $root.SSGameToRoomHeartBeat.encode(message.ssGameToRoomHeartBeat, writer.uint32(/* id 1605, wireType 2 =*/12842).fork()).ldelim();
        if (message.ssNotifyCheckCore != null && message.hasOwnProperty("ssNotifyCheckCore"))
            $root.SSNotifyCheckCore.encode(message.ssNotifyCheckCore, writer.uint32(/* id 1606, wireType 2 =*/12850).fork()).ldelim();
        if (message.gmRequestUpdate != null && message.hasOwnProperty("gmRequestUpdate"))
            $root.GMRequestUpdate.encode(message.gmRequestUpdate, writer.uint32(/* id 1700, wireType 2 =*/13602).fork()).ldelim();
        if (message.gmResponseUpdate != null && message.hasOwnProperty("gmResponseUpdate"))
            $root.GMResponseUpdate.encode(message.gmResponseUpdate, writer.uint32(/* id 1701, wireType 2 =*/13610).fork()).ldelim();
        if (message.gmNotifyClient != null && message.hasOwnProperty("gmNotifyClient"))
            $root.GMNotifyClient.encode(message.gmNotifyClient, writer.uint32(/* id 1702, wireType 2 =*/13618).fork()).ldelim();
        if (message.gmRequestPlayerInfo != null && message.hasOwnProperty("gmRequestPlayerInfo"))
            $root.GMRequestPlayerInfo.encode(message.gmRequestPlayerInfo, writer.uint32(/* id 1703, wireType 2 =*/13626).fork()).ldelim();
        if (message.gmResponsePlayerInfo != null && message.hasOwnProperty("gmResponsePlayerInfo"))
            $root.GMResponsePlayerInfo.encode(message.gmResponsePlayerInfo, writer.uint32(/* id 1704, wireType 2 =*/13634).fork()).ldelim();
        if (message.ssRequestQueryData != null && message.hasOwnProperty("ssRequestQueryData"))
            $root.SSRequestQueryData.encode(message.ssRequestQueryData, writer.uint32(/* id 1804, wireType 2 =*/14434).fork()).ldelim();
        if (message.ssResponseQueryData != null && message.hasOwnProperty("ssResponseQueryData"))
            $root.SSResponseQueryData.encode(message.ssResponseQueryData, writer.uint32(/* id 1805, wireType 2 =*/14442).fork()).ldelim();
        if (message.ssRequestSaveData != null && message.hasOwnProperty("ssRequestSaveData"))
            $root.SSRequestSaveData.encode(message.ssRequestSaveData, writer.uint32(/* id 1806, wireType 2 =*/14450).fork()).ldelim();
        if (message.ssResponseSaveData != null && message.hasOwnProperty("ssResponseSaveData"))
            $root.SSResponseSaveData.encode(message.ssResponseSaveData, writer.uint32(/* id 1807, wireType 2 =*/14458).fork()).ldelim();
        if (message.ssRequestDelData != null && message.hasOwnProperty("ssRequestDelData"))
            $root.SSRequestDelData.encode(message.ssRequestDelData, writer.uint32(/* id 1808, wireType 2 =*/14466).fork()).ldelim();
        if (message.ssResponseDelData != null && message.hasOwnProperty("ssResponseDelData"))
            $root.SSResponseDelData.encode(message.ssResponseDelData, writer.uint32(/* id 1809, wireType 2 =*/14474).fork()).ldelim();
        if (message.ssRequestToplistUpdate != null && message.hasOwnProperty("ssRequestToplistUpdate"))
            $root.SSRequestToplistUpdate.encode(message.ssRequestToplistUpdate, writer.uint32(/* id 1810, wireType 2 =*/14482).fork()).ldelim();
        if (message.ssResponseToplistUpdate != null && message.hasOwnProperty("ssResponseToplistUpdate"))
            $root.SSResponseToplistUpdate.encode(message.ssResponseToplistUpdate, writer.uint32(/* id 1811, wireType 2 =*/14490).fork()).ldelim();
        if (message.ssRequestToplistGetSingle != null && message.hasOwnProperty("ssRequestToplistGetSingle"))
            $root.SSRequestToplistGetSingle.encode(message.ssRequestToplistGetSingle, writer.uint32(/* id 1812, wireType 2 =*/14498).fork()).ldelim();
        if (message.ssResponseToplistGetSingle != null && message.hasOwnProperty("ssResponseToplistGetSingle"))
            $root.SSResponseToplistGetSingle.encode(message.ssResponseToplistGetSingle, writer.uint32(/* id 1813, wireType 2 =*/14506).fork()).ldelim();
        if (message.ssRequestToplistGetRange != null && message.hasOwnProperty("ssRequestToplistGetRange"))
            $root.SSRequestToplistGetRange.encode(message.ssRequestToplistGetRange, writer.uint32(/* id 1814, wireType 2 =*/14514).fork()).ldelim();
        if (message.ssResponseToplistGetRange != null && message.hasOwnProperty("ssResponseToplistGetRange"))
            $root.SSResponseToplistGetRange.encode(message.ssResponseToplistGetRange, writer.uint32(/* id 1815, wireType 2 =*/14522).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PBSSMsg message, length delimited. Does not implicitly {@link PBSSMsg.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBSSMsg
     * @static
     * @param {IPBSSMsg} message PBSSMsg message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBSSMsg.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBSSMsg message from the specified reader or buffer.
     * @function decode
     * @memberof PBSSMsg
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBSSMsg} PBSSMsg
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBSSMsg.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBSSMsg();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 31:
                message.csRequestCreateTable = $root.CSRequestCreateTable.decode(reader, reader.uint32());
                break;
            case 32:
                message.csResponseCreateTable = $root.CSResponseCreateTable.decode(reader, reader.uint32());
                break;
            case 33:
                message.csRequestTableList = $root.CSRequestTableList.decode(reader, reader.uint32());
                break;
            case 34:
                message.csResponseTableList = $root.CSResponseTableList.decode(reader, reader.uint32());
                break;
            case 35:
                message.csRequestTableInfo = $root.CSRequestTableInfo.decode(reader, reader.uint32());
                break;
            case 36:
                message.csRepsonseTableInfo = $root.CSResponseTableInfo.decode(reader, reader.uint32());
                break;
            case 37:
                message.csRequestSngSignUp = $root.CSRequestSngSignUp.decode(reader, reader.uint32());
                break;
            case 38:
                message.csResponseSngSignUp = $root.CSResponseSngSignUp.decode(reader, reader.uint32());
                break;
            case 43:
                message.csRequestTableListBySubtype = $root.CSRequestTableListBySubType.decode(reader, reader.uint32());
                break;
            case 44:
                message.csResponseTableListBySubtype = $root.CSResponseTableListBySubType.decode(reader, reader.uint32());
                break;
            case 45:
                message.csRequestTableListByStatus = $root.CSRequestTableListByStatus.decode(reader, reader.uint32());
                break;
            case 46:
                message.csResponseTableListByStatus = $root.CSResponseTableListByStatus.decode(reader, reader.uint32());
                break;
            case 47:
                message.csRequestTrainingSignUp = $root.CSRequestTrainingSignUp.decode(reader, reader.uint32());
                break;
            case 48:
                message.csResponseTrainingSignUp = $root.CSResponseTrainingSignUp.decode(reader, reader.uint32());
                break;
            case 1804:
                message.ssRequestQueryData = $root.SSRequestQueryData.decode(reader, reader.uint32());
                break;
            case 1805:
                message.ssResponseQueryData = $root.SSResponseQueryData.decode(reader, reader.uint32());
                break;
            case 1806:
                message.ssRequestSaveData = $root.SSRequestSaveData.decode(reader, reader.uint32());
                break;
            case 1807:
                message.ssResponseSaveData = $root.SSResponseSaveData.decode(reader, reader.uint32());
                break;
            case 1808:
                message.ssRequestDelData = $root.SSRequestDelData.decode(reader, reader.uint32());
                break;
            case 1809:
                message.ssResponseDelData = $root.SSResponseDelData.decode(reader, reader.uint32());
                break;
            case 1810:
                message.ssRequestToplistUpdate = $root.SSRequestToplistUpdate.decode(reader, reader.uint32());
                break;
            case 1811:
                message.ssResponseToplistUpdate = $root.SSResponseToplistUpdate.decode(reader, reader.uint32());
                break;
            case 1812:
                message.ssRequestToplistGetSingle = $root.SSRequestToplistGetSingle.decode(reader, reader.uint32());
                break;
            case 1813:
                message.ssResponseToplistGetSingle = $root.SSResponseToplistGetSingle.decode(reader, reader.uint32());
                break;
            case 1814:
                message.ssRequestToplistGetRange = $root.SSRequestToplistGetRange.decode(reader, reader.uint32());
                break;
            case 1815:
                message.ssResponseToplistGetRange = $root.SSResponseToplistGetRange.decode(reader, reader.uint32());
                break;
            case 1601:
                message.ssNotifyGameUploadTables = $root.SSNotifyGameUploadTables.decode(reader, reader.uint32());
                break;
            case 1600:
                message.ssNotifyClearTables = $root.SSNotifyClearTables.decode(reader, reader.uint32());
                break;
            case 1602:
                message.ssNotifyRoomUploadTables = $root.SSNotifyRoomUploadTables.decode(reader, reader.uint32());
                break;
            case 1603:
                message.ssNotifyUpdateTable = $root.SSNotifyUpdateTable.decode(reader, reader.uint32());
                break;
            case 1604:
                message.ssNotifyDeleteTable = $root.SSNotifyDeleteTable.decode(reader, reader.uint32());
                break;
            case 1605:
                message.ssGameToRoomHeartBeat = $root.SSGameToRoomHeartBeat.decode(reader, reader.uint32());
                break;
            case 1606:
                message.ssNotifyCheckCore = $root.SSNotifyCheckCore.decode(reader, reader.uint32());
                break;
            case 1700:
                message.gmRequestUpdate = $root.GMRequestUpdate.decode(reader, reader.uint32());
                break;
            case 1701:
                message.gmResponseUpdate = $root.GMResponseUpdate.decode(reader, reader.uint32());
                break;
            case 1702:
                message.gmNotifyClient = $root.GMNotifyClient.decode(reader, reader.uint32());
                break;
            case 1703:
                message.gmRequestPlayerInfo = $root.GMRequestPlayerInfo.decode(reader, reader.uint32());
                break;
            case 1704:
                message.gmResponsePlayerInfo = $root.GMResponsePlayerInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBSSMsg message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBSSMsg
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBSSMsg} PBSSMsg
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBSSMsg.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBSSMsg message.
     * @function verify
     * @memberof PBSSMsg
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBSSMsg.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.csRequestCreateTable != null && message.hasOwnProperty("csRequestCreateTable")) {
            properties.msgUnion = 1;
            var error = $root.CSRequestCreateTable.verify(message.csRequestCreateTable);
            if (error)
                return "csRequestCreateTable." + error;
        }
        if (message.csResponseCreateTable != null && message.hasOwnProperty("csResponseCreateTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseCreateTable.verify(message.csResponseCreateTable);
            if (error)
                return "csResponseCreateTable." + error;
        }
        if (message.csRequestTableList != null && message.hasOwnProperty("csRequestTableList")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTableList.verify(message.csRequestTableList);
            if (error)
                return "csRequestTableList." + error;
        }
        if (message.csResponseTableList != null && message.hasOwnProperty("csResponseTableList")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTableList.verify(message.csResponseTableList);
            if (error)
                return "csResponseTableList." + error;
        }
        if (message.csRequestTableInfo != null && message.hasOwnProperty("csRequestTableInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTableInfo.verify(message.csRequestTableInfo);
            if (error)
                return "csRequestTableInfo." + error;
        }
        if (message.csRepsonseTableInfo != null && message.hasOwnProperty("csRepsonseTableInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTableInfo.verify(message.csRepsonseTableInfo);
            if (error)
                return "csRepsonseTableInfo." + error;
        }
        if (message.csRequestSngSignUp != null && message.hasOwnProperty("csRequestSngSignUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestSngSignUp.verify(message.csRequestSngSignUp);
            if (error)
                return "csRequestSngSignUp." + error;
        }
        if (message.csResponseSngSignUp != null && message.hasOwnProperty("csResponseSngSignUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseSngSignUp.verify(message.csResponseSngSignUp);
            if (error)
                return "csResponseSngSignUp." + error;
        }
        if (message.csRequestTableListBySubtype != null && message.hasOwnProperty("csRequestTableListBySubtype")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTableListBySubType.verify(message.csRequestTableListBySubtype);
            if (error)
                return "csRequestTableListBySubtype." + error;
        }
        if (message.csResponseTableListBySubtype != null && message.hasOwnProperty("csResponseTableListBySubtype")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTableListBySubType.verify(message.csResponseTableListBySubtype);
            if (error)
                return "csResponseTableListBySubtype." + error;
        }
        if (message.csRequestTableListByStatus != null && message.hasOwnProperty("csRequestTableListByStatus")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTableListByStatus.verify(message.csRequestTableListByStatus);
            if (error)
                return "csRequestTableListByStatus." + error;
        }
        if (message.csResponseTableListByStatus != null && message.hasOwnProperty("csResponseTableListByStatus")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTableListByStatus.verify(message.csResponseTableListByStatus);
            if (error)
                return "csResponseTableListByStatus." + error;
        }
        if (message.csRequestTrainingSignUp != null && message.hasOwnProperty("csRequestTrainingSignUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTrainingSignUp.verify(message.csRequestTrainingSignUp);
            if (error)
                return "csRequestTrainingSignUp." + error;
        }
        if (message.csResponseTrainingSignUp != null && message.hasOwnProperty("csResponseTrainingSignUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTrainingSignUp.verify(message.csResponseTrainingSignUp);
            if (error)
                return "csResponseTrainingSignUp." + error;
        }
        if (message.ssRequestQueryData != null && message.hasOwnProperty("ssRequestQueryData")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSRequestQueryData.verify(message.ssRequestQueryData);
            if (error)
                return "ssRequestQueryData." + error;
        }
        if (message.ssResponseQueryData != null && message.hasOwnProperty("ssResponseQueryData")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSResponseQueryData.verify(message.ssResponseQueryData);
            if (error)
                return "ssResponseQueryData." + error;
        }
        if (message.ssRequestSaveData != null && message.hasOwnProperty("ssRequestSaveData")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSRequestSaveData.verify(message.ssRequestSaveData);
            if (error)
                return "ssRequestSaveData." + error;
        }
        if (message.ssResponseSaveData != null && message.hasOwnProperty("ssResponseSaveData")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSResponseSaveData.verify(message.ssResponseSaveData);
            if (error)
                return "ssResponseSaveData." + error;
        }
        if (message.ssRequestDelData != null && message.hasOwnProperty("ssRequestDelData")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSRequestDelData.verify(message.ssRequestDelData);
            if (error)
                return "ssRequestDelData." + error;
        }
        if (message.ssResponseDelData != null && message.hasOwnProperty("ssResponseDelData")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSResponseDelData.verify(message.ssResponseDelData);
            if (error)
                return "ssResponseDelData." + error;
        }
        if (message.ssRequestToplistUpdate != null && message.hasOwnProperty("ssRequestToplistUpdate")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSRequestToplistUpdate.verify(message.ssRequestToplistUpdate);
            if (error)
                return "ssRequestToplistUpdate." + error;
        }
        if (message.ssResponseToplistUpdate != null && message.hasOwnProperty("ssResponseToplistUpdate")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSResponseToplistUpdate.verify(message.ssResponseToplistUpdate);
            if (error)
                return "ssResponseToplistUpdate." + error;
        }
        if (message.ssRequestToplistGetSingle != null && message.hasOwnProperty("ssRequestToplistGetSingle")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSRequestToplistGetSingle.verify(message.ssRequestToplistGetSingle);
            if (error)
                return "ssRequestToplistGetSingle." + error;
        }
        if (message.ssResponseToplistGetSingle != null && message.hasOwnProperty("ssResponseToplistGetSingle")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSResponseToplistGetSingle.verify(message.ssResponseToplistGetSingle);
            if (error)
                return "ssResponseToplistGetSingle." + error;
        }
        if (message.ssRequestToplistGetRange != null && message.hasOwnProperty("ssRequestToplistGetRange")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSRequestToplistGetRange.verify(message.ssRequestToplistGetRange);
            if (error)
                return "ssRequestToplistGetRange." + error;
        }
        if (message.ssResponseToplistGetRange != null && message.hasOwnProperty("ssResponseToplistGetRange")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSResponseToplistGetRange.verify(message.ssResponseToplistGetRange);
            if (error)
                return "ssResponseToplistGetRange." + error;
        }
        if (message.ssNotifyGameUploadTables != null && message.hasOwnProperty("ssNotifyGameUploadTables")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSNotifyGameUploadTables.verify(message.ssNotifyGameUploadTables);
            if (error)
                return "ssNotifyGameUploadTables." + error;
        }
        if (message.ssNotifyClearTables != null && message.hasOwnProperty("ssNotifyClearTables")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSNotifyClearTables.verify(message.ssNotifyClearTables);
            if (error)
                return "ssNotifyClearTables." + error;
        }
        if (message.ssNotifyRoomUploadTables != null && message.hasOwnProperty("ssNotifyRoomUploadTables")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSNotifyRoomUploadTables.verify(message.ssNotifyRoomUploadTables);
            if (error)
                return "ssNotifyRoomUploadTables." + error;
        }
        if (message.ssNotifyUpdateTable != null && message.hasOwnProperty("ssNotifyUpdateTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSNotifyUpdateTable.verify(message.ssNotifyUpdateTable);
            if (error)
                return "ssNotifyUpdateTable." + error;
        }
        if (message.ssNotifyDeleteTable != null && message.hasOwnProperty("ssNotifyDeleteTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSNotifyDeleteTable.verify(message.ssNotifyDeleteTable);
            if (error)
                return "ssNotifyDeleteTable." + error;
        }
        if (message.ssGameToRoomHeartBeat != null && message.hasOwnProperty("ssGameToRoomHeartBeat")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSGameToRoomHeartBeat.verify(message.ssGameToRoomHeartBeat);
            if (error)
                return "ssGameToRoomHeartBeat." + error;
        }
        if (message.ssNotifyCheckCore != null && message.hasOwnProperty("ssNotifyCheckCore")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.SSNotifyCheckCore.verify(message.ssNotifyCheckCore);
            if (error)
                return "ssNotifyCheckCore." + error;
        }
        if (message.gmRequestUpdate != null && message.hasOwnProperty("gmRequestUpdate")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.GMRequestUpdate.verify(message.gmRequestUpdate);
            if (error)
                return "gmRequestUpdate." + error;
        }
        if (message.gmResponseUpdate != null && message.hasOwnProperty("gmResponseUpdate")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.GMResponseUpdate.verify(message.gmResponseUpdate);
            if (error)
                return "gmResponseUpdate." + error;
        }
        if (message.gmNotifyClient != null && message.hasOwnProperty("gmNotifyClient")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.GMNotifyClient.verify(message.gmNotifyClient);
            if (error)
                return "gmNotifyClient." + error;
        }
        if (message.gmRequestPlayerInfo != null && message.hasOwnProperty("gmRequestPlayerInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.GMRequestPlayerInfo.verify(message.gmRequestPlayerInfo);
            if (error)
                return "gmRequestPlayerInfo." + error;
        }
        if (message.gmResponsePlayerInfo != null && message.hasOwnProperty("gmResponsePlayerInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.GMResponsePlayerInfo.verify(message.gmResponsePlayerInfo);
            if (error)
                return "gmResponsePlayerInfo." + error;
        }
        return null;
    };

    /**
     * Creates a PBSSMsg message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBSSMsg
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBSSMsg} PBSSMsg
     */
    PBSSMsg.fromObject = function fromObject(object) {
        if (object instanceof $root.PBSSMsg)
            return object;
        var message = new $root.PBSSMsg();
        if (object.csRequestCreateTable != null) {
            if (typeof object.csRequestCreateTable !== "object")
                throw TypeError(".PBSSMsg.csRequestCreateTable: object expected");
            message.csRequestCreateTable = $root.CSRequestCreateTable.fromObject(object.csRequestCreateTable);
        }
        if (object.csResponseCreateTable != null) {
            if (typeof object.csResponseCreateTable !== "object")
                throw TypeError(".PBSSMsg.csResponseCreateTable: object expected");
            message.csResponseCreateTable = $root.CSResponseCreateTable.fromObject(object.csResponseCreateTable);
        }
        if (object.csRequestTableList != null) {
            if (typeof object.csRequestTableList !== "object")
                throw TypeError(".PBSSMsg.csRequestTableList: object expected");
            message.csRequestTableList = $root.CSRequestTableList.fromObject(object.csRequestTableList);
        }
        if (object.csResponseTableList != null) {
            if (typeof object.csResponseTableList !== "object")
                throw TypeError(".PBSSMsg.csResponseTableList: object expected");
            message.csResponseTableList = $root.CSResponseTableList.fromObject(object.csResponseTableList);
        }
        if (object.csRequestTableInfo != null) {
            if (typeof object.csRequestTableInfo !== "object")
                throw TypeError(".PBSSMsg.csRequestTableInfo: object expected");
            message.csRequestTableInfo = $root.CSRequestTableInfo.fromObject(object.csRequestTableInfo);
        }
        if (object.csRepsonseTableInfo != null) {
            if (typeof object.csRepsonseTableInfo !== "object")
                throw TypeError(".PBSSMsg.csRepsonseTableInfo: object expected");
            message.csRepsonseTableInfo = $root.CSResponseTableInfo.fromObject(object.csRepsonseTableInfo);
        }
        if (object.csRequestSngSignUp != null) {
            if (typeof object.csRequestSngSignUp !== "object")
                throw TypeError(".PBSSMsg.csRequestSngSignUp: object expected");
            message.csRequestSngSignUp = $root.CSRequestSngSignUp.fromObject(object.csRequestSngSignUp);
        }
        if (object.csResponseSngSignUp != null) {
            if (typeof object.csResponseSngSignUp !== "object")
                throw TypeError(".PBSSMsg.csResponseSngSignUp: object expected");
            message.csResponseSngSignUp = $root.CSResponseSngSignUp.fromObject(object.csResponseSngSignUp);
        }
        if (object.csRequestTableListBySubtype != null) {
            if (typeof object.csRequestTableListBySubtype !== "object")
                throw TypeError(".PBSSMsg.csRequestTableListBySubtype: object expected");
            message.csRequestTableListBySubtype = $root.CSRequestTableListBySubType.fromObject(object.csRequestTableListBySubtype);
        }
        if (object.csResponseTableListBySubtype != null) {
            if (typeof object.csResponseTableListBySubtype !== "object")
                throw TypeError(".PBSSMsg.csResponseTableListBySubtype: object expected");
            message.csResponseTableListBySubtype = $root.CSResponseTableListBySubType.fromObject(object.csResponseTableListBySubtype);
        }
        if (object.csRequestTableListByStatus != null) {
            if (typeof object.csRequestTableListByStatus !== "object")
                throw TypeError(".PBSSMsg.csRequestTableListByStatus: object expected");
            message.csRequestTableListByStatus = $root.CSRequestTableListByStatus.fromObject(object.csRequestTableListByStatus);
        }
        if (object.csResponseTableListByStatus != null) {
            if (typeof object.csResponseTableListByStatus !== "object")
                throw TypeError(".PBSSMsg.csResponseTableListByStatus: object expected");
            message.csResponseTableListByStatus = $root.CSResponseTableListByStatus.fromObject(object.csResponseTableListByStatus);
        }
        if (object.csRequestTrainingSignUp != null) {
            if (typeof object.csRequestTrainingSignUp !== "object")
                throw TypeError(".PBSSMsg.csRequestTrainingSignUp: object expected");
            message.csRequestTrainingSignUp = $root.CSRequestTrainingSignUp.fromObject(object.csRequestTrainingSignUp);
        }
        if (object.csResponseTrainingSignUp != null) {
            if (typeof object.csResponseTrainingSignUp !== "object")
                throw TypeError(".PBSSMsg.csResponseTrainingSignUp: object expected");
            message.csResponseTrainingSignUp = $root.CSResponseTrainingSignUp.fromObject(object.csResponseTrainingSignUp);
        }
        if (object.ssRequestQueryData != null) {
            if (typeof object.ssRequestQueryData !== "object")
                throw TypeError(".PBSSMsg.ssRequestQueryData: object expected");
            message.ssRequestQueryData = $root.SSRequestQueryData.fromObject(object.ssRequestQueryData);
        }
        if (object.ssResponseQueryData != null) {
            if (typeof object.ssResponseQueryData !== "object")
                throw TypeError(".PBSSMsg.ssResponseQueryData: object expected");
            message.ssResponseQueryData = $root.SSResponseQueryData.fromObject(object.ssResponseQueryData);
        }
        if (object.ssRequestSaveData != null) {
            if (typeof object.ssRequestSaveData !== "object")
                throw TypeError(".PBSSMsg.ssRequestSaveData: object expected");
            message.ssRequestSaveData = $root.SSRequestSaveData.fromObject(object.ssRequestSaveData);
        }
        if (object.ssResponseSaveData != null) {
            if (typeof object.ssResponseSaveData !== "object")
                throw TypeError(".PBSSMsg.ssResponseSaveData: object expected");
            message.ssResponseSaveData = $root.SSResponseSaveData.fromObject(object.ssResponseSaveData);
        }
        if (object.ssRequestDelData != null) {
            if (typeof object.ssRequestDelData !== "object")
                throw TypeError(".PBSSMsg.ssRequestDelData: object expected");
            message.ssRequestDelData = $root.SSRequestDelData.fromObject(object.ssRequestDelData);
        }
        if (object.ssResponseDelData != null) {
            if (typeof object.ssResponseDelData !== "object")
                throw TypeError(".PBSSMsg.ssResponseDelData: object expected");
            message.ssResponseDelData = $root.SSResponseDelData.fromObject(object.ssResponseDelData);
        }
        if (object.ssRequestToplistUpdate != null) {
            if (typeof object.ssRequestToplistUpdate !== "object")
                throw TypeError(".PBSSMsg.ssRequestToplistUpdate: object expected");
            message.ssRequestToplistUpdate = $root.SSRequestToplistUpdate.fromObject(object.ssRequestToplistUpdate);
        }
        if (object.ssResponseToplistUpdate != null) {
            if (typeof object.ssResponseToplistUpdate !== "object")
                throw TypeError(".PBSSMsg.ssResponseToplistUpdate: object expected");
            message.ssResponseToplistUpdate = $root.SSResponseToplistUpdate.fromObject(object.ssResponseToplistUpdate);
        }
        if (object.ssRequestToplistGetSingle != null) {
            if (typeof object.ssRequestToplistGetSingle !== "object")
                throw TypeError(".PBSSMsg.ssRequestToplistGetSingle: object expected");
            message.ssRequestToplistGetSingle = $root.SSRequestToplistGetSingle.fromObject(object.ssRequestToplistGetSingle);
        }
        if (object.ssResponseToplistGetSingle != null) {
            if (typeof object.ssResponseToplistGetSingle !== "object")
                throw TypeError(".PBSSMsg.ssResponseToplistGetSingle: object expected");
            message.ssResponseToplistGetSingle = $root.SSResponseToplistGetSingle.fromObject(object.ssResponseToplistGetSingle);
        }
        if (object.ssRequestToplistGetRange != null) {
            if (typeof object.ssRequestToplistGetRange !== "object")
                throw TypeError(".PBSSMsg.ssRequestToplistGetRange: object expected");
            message.ssRequestToplistGetRange = $root.SSRequestToplistGetRange.fromObject(object.ssRequestToplistGetRange);
        }
        if (object.ssResponseToplistGetRange != null) {
            if (typeof object.ssResponseToplistGetRange !== "object")
                throw TypeError(".PBSSMsg.ssResponseToplistGetRange: object expected");
            message.ssResponseToplistGetRange = $root.SSResponseToplistGetRange.fromObject(object.ssResponseToplistGetRange);
        }
        if (object.ssNotifyGameUploadTables != null) {
            if (typeof object.ssNotifyGameUploadTables !== "object")
                throw TypeError(".PBSSMsg.ssNotifyGameUploadTables: object expected");
            message.ssNotifyGameUploadTables = $root.SSNotifyGameUploadTables.fromObject(object.ssNotifyGameUploadTables);
        }
        if (object.ssNotifyClearTables != null) {
            if (typeof object.ssNotifyClearTables !== "object")
                throw TypeError(".PBSSMsg.ssNotifyClearTables: object expected");
            message.ssNotifyClearTables = $root.SSNotifyClearTables.fromObject(object.ssNotifyClearTables);
        }
        if (object.ssNotifyRoomUploadTables != null) {
            if (typeof object.ssNotifyRoomUploadTables !== "object")
                throw TypeError(".PBSSMsg.ssNotifyRoomUploadTables: object expected");
            message.ssNotifyRoomUploadTables = $root.SSNotifyRoomUploadTables.fromObject(object.ssNotifyRoomUploadTables);
        }
        if (object.ssNotifyUpdateTable != null) {
            if (typeof object.ssNotifyUpdateTable !== "object")
                throw TypeError(".PBSSMsg.ssNotifyUpdateTable: object expected");
            message.ssNotifyUpdateTable = $root.SSNotifyUpdateTable.fromObject(object.ssNotifyUpdateTable);
        }
        if (object.ssNotifyDeleteTable != null) {
            if (typeof object.ssNotifyDeleteTable !== "object")
                throw TypeError(".PBSSMsg.ssNotifyDeleteTable: object expected");
            message.ssNotifyDeleteTable = $root.SSNotifyDeleteTable.fromObject(object.ssNotifyDeleteTable);
        }
        if (object.ssGameToRoomHeartBeat != null) {
            if (typeof object.ssGameToRoomHeartBeat !== "object")
                throw TypeError(".PBSSMsg.ssGameToRoomHeartBeat: object expected");
            message.ssGameToRoomHeartBeat = $root.SSGameToRoomHeartBeat.fromObject(object.ssGameToRoomHeartBeat);
        }
        if (object.ssNotifyCheckCore != null) {
            if (typeof object.ssNotifyCheckCore !== "object")
                throw TypeError(".PBSSMsg.ssNotifyCheckCore: object expected");
            message.ssNotifyCheckCore = $root.SSNotifyCheckCore.fromObject(object.ssNotifyCheckCore);
        }
        if (object.gmRequestUpdate != null) {
            if (typeof object.gmRequestUpdate !== "object")
                throw TypeError(".PBSSMsg.gmRequestUpdate: object expected");
            message.gmRequestUpdate = $root.GMRequestUpdate.fromObject(object.gmRequestUpdate);
        }
        if (object.gmResponseUpdate != null) {
            if (typeof object.gmResponseUpdate !== "object")
                throw TypeError(".PBSSMsg.gmResponseUpdate: object expected");
            message.gmResponseUpdate = $root.GMResponseUpdate.fromObject(object.gmResponseUpdate);
        }
        if (object.gmNotifyClient != null) {
            if (typeof object.gmNotifyClient !== "object")
                throw TypeError(".PBSSMsg.gmNotifyClient: object expected");
            message.gmNotifyClient = $root.GMNotifyClient.fromObject(object.gmNotifyClient);
        }
        if (object.gmRequestPlayerInfo != null) {
            if (typeof object.gmRequestPlayerInfo !== "object")
                throw TypeError(".PBSSMsg.gmRequestPlayerInfo: object expected");
            message.gmRequestPlayerInfo = $root.GMRequestPlayerInfo.fromObject(object.gmRequestPlayerInfo);
        }
        if (object.gmResponsePlayerInfo != null) {
            if (typeof object.gmResponsePlayerInfo !== "object")
                throw TypeError(".PBSSMsg.gmResponsePlayerInfo: object expected");
            message.gmResponsePlayerInfo = $root.GMResponsePlayerInfo.fromObject(object.gmResponsePlayerInfo);
        }
        return message;
    };

    /**
     * Creates a plain object from a PBSSMsg message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBSSMsg
     * @static
     * @param {PBSSMsg} message PBSSMsg
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBSSMsg.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.csRequestCreateTable != null && message.hasOwnProperty("csRequestCreateTable")) {
            object.csRequestCreateTable = $root.CSRequestCreateTable.toObject(message.csRequestCreateTable, options);
            if (options.oneofs)
                object.msgUnion = "csRequestCreateTable";
        }
        if (message.csResponseCreateTable != null && message.hasOwnProperty("csResponseCreateTable")) {
            object.csResponseCreateTable = $root.CSResponseCreateTable.toObject(message.csResponseCreateTable, options);
            if (options.oneofs)
                object.msgUnion = "csResponseCreateTable";
        }
        if (message.csRequestTableList != null && message.hasOwnProperty("csRequestTableList")) {
            object.csRequestTableList = $root.CSRequestTableList.toObject(message.csRequestTableList, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTableList";
        }
        if (message.csResponseTableList != null && message.hasOwnProperty("csResponseTableList")) {
            object.csResponseTableList = $root.CSResponseTableList.toObject(message.csResponseTableList, options);
            if (options.oneofs)
                object.msgUnion = "csResponseTableList";
        }
        if (message.csRequestTableInfo != null && message.hasOwnProperty("csRequestTableInfo")) {
            object.csRequestTableInfo = $root.CSRequestTableInfo.toObject(message.csRequestTableInfo, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTableInfo";
        }
        if (message.csRepsonseTableInfo != null && message.hasOwnProperty("csRepsonseTableInfo")) {
            object.csRepsonseTableInfo = $root.CSResponseTableInfo.toObject(message.csRepsonseTableInfo, options);
            if (options.oneofs)
                object.msgUnion = "csRepsonseTableInfo";
        }
        if (message.csRequestSngSignUp != null && message.hasOwnProperty("csRequestSngSignUp")) {
            object.csRequestSngSignUp = $root.CSRequestSngSignUp.toObject(message.csRequestSngSignUp, options);
            if (options.oneofs)
                object.msgUnion = "csRequestSngSignUp";
        }
        if (message.csResponseSngSignUp != null && message.hasOwnProperty("csResponseSngSignUp")) {
            object.csResponseSngSignUp = $root.CSResponseSngSignUp.toObject(message.csResponseSngSignUp, options);
            if (options.oneofs)
                object.msgUnion = "csResponseSngSignUp";
        }
        if (message.csRequestTableListBySubtype != null && message.hasOwnProperty("csRequestTableListBySubtype")) {
            object.csRequestTableListBySubtype = $root.CSRequestTableListBySubType.toObject(message.csRequestTableListBySubtype, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTableListBySubtype";
        }
        if (message.csResponseTableListBySubtype != null && message.hasOwnProperty("csResponseTableListBySubtype")) {
            object.csResponseTableListBySubtype = $root.CSResponseTableListBySubType.toObject(message.csResponseTableListBySubtype, options);
            if (options.oneofs)
                object.msgUnion = "csResponseTableListBySubtype";
        }
        if (message.csRequestTableListByStatus != null && message.hasOwnProperty("csRequestTableListByStatus")) {
            object.csRequestTableListByStatus = $root.CSRequestTableListByStatus.toObject(message.csRequestTableListByStatus, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTableListByStatus";
        }
        if (message.csResponseTableListByStatus != null && message.hasOwnProperty("csResponseTableListByStatus")) {
            object.csResponseTableListByStatus = $root.CSResponseTableListByStatus.toObject(message.csResponseTableListByStatus, options);
            if (options.oneofs)
                object.msgUnion = "csResponseTableListByStatus";
        }
        if (message.csRequestTrainingSignUp != null && message.hasOwnProperty("csRequestTrainingSignUp")) {
            object.csRequestTrainingSignUp = $root.CSRequestTrainingSignUp.toObject(message.csRequestTrainingSignUp, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTrainingSignUp";
        }
        if (message.csResponseTrainingSignUp != null && message.hasOwnProperty("csResponseTrainingSignUp")) {
            object.csResponseTrainingSignUp = $root.CSResponseTrainingSignUp.toObject(message.csResponseTrainingSignUp, options);
            if (options.oneofs)
                object.msgUnion = "csResponseTrainingSignUp";
        }
        if (message.ssNotifyClearTables != null && message.hasOwnProperty("ssNotifyClearTables")) {
            object.ssNotifyClearTables = $root.SSNotifyClearTables.toObject(message.ssNotifyClearTables, options);
            if (options.oneofs)
                object.msgUnion = "ssNotifyClearTables";
        }
        if (message.ssNotifyGameUploadTables != null && message.hasOwnProperty("ssNotifyGameUploadTables")) {
            object.ssNotifyGameUploadTables = $root.SSNotifyGameUploadTables.toObject(message.ssNotifyGameUploadTables, options);
            if (options.oneofs)
                object.msgUnion = "ssNotifyGameUploadTables";
        }
        if (message.ssNotifyRoomUploadTables != null && message.hasOwnProperty("ssNotifyRoomUploadTables")) {
            object.ssNotifyRoomUploadTables = $root.SSNotifyRoomUploadTables.toObject(message.ssNotifyRoomUploadTables, options);
            if (options.oneofs)
                object.msgUnion = "ssNotifyRoomUploadTables";
        }
        if (message.ssNotifyUpdateTable != null && message.hasOwnProperty("ssNotifyUpdateTable")) {
            object.ssNotifyUpdateTable = $root.SSNotifyUpdateTable.toObject(message.ssNotifyUpdateTable, options);
            if (options.oneofs)
                object.msgUnion = "ssNotifyUpdateTable";
        }
        if (message.ssNotifyDeleteTable != null && message.hasOwnProperty("ssNotifyDeleteTable")) {
            object.ssNotifyDeleteTable = $root.SSNotifyDeleteTable.toObject(message.ssNotifyDeleteTable, options);
            if (options.oneofs)
                object.msgUnion = "ssNotifyDeleteTable";
        }
        if (message.ssGameToRoomHeartBeat != null && message.hasOwnProperty("ssGameToRoomHeartBeat")) {
            object.ssGameToRoomHeartBeat = $root.SSGameToRoomHeartBeat.toObject(message.ssGameToRoomHeartBeat, options);
            if (options.oneofs)
                object.msgUnion = "ssGameToRoomHeartBeat";
        }
        if (message.ssNotifyCheckCore != null && message.hasOwnProperty("ssNotifyCheckCore")) {
            object.ssNotifyCheckCore = $root.SSNotifyCheckCore.toObject(message.ssNotifyCheckCore, options);
            if (options.oneofs)
                object.msgUnion = "ssNotifyCheckCore";
        }
        if (message.gmRequestUpdate != null && message.hasOwnProperty("gmRequestUpdate")) {
            object.gmRequestUpdate = $root.GMRequestUpdate.toObject(message.gmRequestUpdate, options);
            if (options.oneofs)
                object.msgUnion = "gmRequestUpdate";
        }
        if (message.gmResponseUpdate != null && message.hasOwnProperty("gmResponseUpdate")) {
            object.gmResponseUpdate = $root.GMResponseUpdate.toObject(message.gmResponseUpdate, options);
            if (options.oneofs)
                object.msgUnion = "gmResponseUpdate";
        }
        if (message.gmNotifyClient != null && message.hasOwnProperty("gmNotifyClient")) {
            object.gmNotifyClient = $root.GMNotifyClient.toObject(message.gmNotifyClient, options);
            if (options.oneofs)
                object.msgUnion = "gmNotifyClient";
        }
        if (message.gmRequestPlayerInfo != null && message.hasOwnProperty("gmRequestPlayerInfo")) {
            object.gmRequestPlayerInfo = $root.GMRequestPlayerInfo.toObject(message.gmRequestPlayerInfo, options);
            if (options.oneofs)
                object.msgUnion = "gmRequestPlayerInfo";
        }
        if (message.gmResponsePlayerInfo != null && message.hasOwnProperty("gmResponsePlayerInfo")) {
            object.gmResponsePlayerInfo = $root.GMResponsePlayerInfo.toObject(message.gmResponsePlayerInfo, options);
            if (options.oneofs)
                object.msgUnion = "gmResponsePlayerInfo";
        }
        if (message.ssRequestQueryData != null && message.hasOwnProperty("ssRequestQueryData")) {
            object.ssRequestQueryData = $root.SSRequestQueryData.toObject(message.ssRequestQueryData, options);
            if (options.oneofs)
                object.msgUnion = "ssRequestQueryData";
        }
        if (message.ssResponseQueryData != null && message.hasOwnProperty("ssResponseQueryData")) {
            object.ssResponseQueryData = $root.SSResponseQueryData.toObject(message.ssResponseQueryData, options);
            if (options.oneofs)
                object.msgUnion = "ssResponseQueryData";
        }
        if (message.ssRequestSaveData != null && message.hasOwnProperty("ssRequestSaveData")) {
            object.ssRequestSaveData = $root.SSRequestSaveData.toObject(message.ssRequestSaveData, options);
            if (options.oneofs)
                object.msgUnion = "ssRequestSaveData";
        }
        if (message.ssResponseSaveData != null && message.hasOwnProperty("ssResponseSaveData")) {
            object.ssResponseSaveData = $root.SSResponseSaveData.toObject(message.ssResponseSaveData, options);
            if (options.oneofs)
                object.msgUnion = "ssResponseSaveData";
        }
        if (message.ssRequestDelData != null && message.hasOwnProperty("ssRequestDelData")) {
            object.ssRequestDelData = $root.SSRequestDelData.toObject(message.ssRequestDelData, options);
            if (options.oneofs)
                object.msgUnion = "ssRequestDelData";
        }
        if (message.ssResponseDelData != null && message.hasOwnProperty("ssResponseDelData")) {
            object.ssResponseDelData = $root.SSResponseDelData.toObject(message.ssResponseDelData, options);
            if (options.oneofs)
                object.msgUnion = "ssResponseDelData";
        }
        if (message.ssRequestToplistUpdate != null && message.hasOwnProperty("ssRequestToplistUpdate")) {
            object.ssRequestToplistUpdate = $root.SSRequestToplistUpdate.toObject(message.ssRequestToplistUpdate, options);
            if (options.oneofs)
                object.msgUnion = "ssRequestToplistUpdate";
        }
        if (message.ssResponseToplistUpdate != null && message.hasOwnProperty("ssResponseToplistUpdate")) {
            object.ssResponseToplistUpdate = $root.SSResponseToplistUpdate.toObject(message.ssResponseToplistUpdate, options);
            if (options.oneofs)
                object.msgUnion = "ssResponseToplistUpdate";
        }
        if (message.ssRequestToplistGetSingle != null && message.hasOwnProperty("ssRequestToplistGetSingle")) {
            object.ssRequestToplistGetSingle = $root.SSRequestToplistGetSingle.toObject(message.ssRequestToplistGetSingle, options);
            if (options.oneofs)
                object.msgUnion = "ssRequestToplistGetSingle";
        }
        if (message.ssResponseToplistGetSingle != null && message.hasOwnProperty("ssResponseToplistGetSingle")) {
            object.ssResponseToplistGetSingle = $root.SSResponseToplistGetSingle.toObject(message.ssResponseToplistGetSingle, options);
            if (options.oneofs)
                object.msgUnion = "ssResponseToplistGetSingle";
        }
        if (message.ssRequestToplistGetRange != null && message.hasOwnProperty("ssRequestToplistGetRange")) {
            object.ssRequestToplistGetRange = $root.SSRequestToplistGetRange.toObject(message.ssRequestToplistGetRange, options);
            if (options.oneofs)
                object.msgUnion = "ssRequestToplistGetRange";
        }
        if (message.ssResponseToplistGetRange != null && message.hasOwnProperty("ssResponseToplistGetRange")) {
            object.ssResponseToplistGetRange = $root.SSResponseToplistGetRange.toObject(message.ssResponseToplistGetRange, options);
            if (options.oneofs)
                object.msgUnion = "ssResponseToplistGetRange";
        }
        return object;
    };

    /**
     * Converts this PBSSMsg to JSON.
     * @function toJSON
     * @memberof PBSSMsg
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBSSMsg.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBSSMsg;
})();

/**
 * ENCommon enum.
 * @exports ENCommon
 * @enum {string}
 * @property {number} EN_POKER_MAX_HANDLER_NUM=2000 EN_POKER_MAX_HANDLER_NUM value
 * @property {number} EN_POKER_MAX_DATATYPE_NUM=20 EN_POKER_MAX_DATATYPE_NUM value
 * @property {number} EN_POKER_APPID=103 EN_POKER_APPID value
 * @property {number} EN_POKER_BASE64_TYPE=62 EN_POKER_BASE64_TYPE value
 * @property {number} EN_POKER_MAX_NICK_NAME_LEN=64 EN_POKER_MAX_NICK_NAME_LEN value
 * @property {number} EN_POKER_MAX_3RD_ACC_NAME_LEN=64 EN_POKER_MAX_3RD_ACC_NAME_LEN value
 * @property {number} EN_POKER_SESSION_MAX_REDO=5 EN_POKER_SESSION_MAX_REDO value
 * @property {number} EN_POKER_MAX_KVDB_BUFFER_LEN=32768 EN_POKER_MAX_KVDB_BUFFER_LEN value
 * @property {number} EN_POKER_REDIS_SWAP_COUNT_PER_SEC=1 EN_POKER_REDIS_SWAP_COUNT_PER_SEC value
 * @property {number} EN_POKER_REDIS_KEEP_TIME=86400 EN_POKER_REDIS_KEEP_TIME value
 * @property {number} EN_POKER_TOPLIST_PROCESS_INTERVAL=3600 EN_POKER_TOPLIST_PROCESS_INTERVAL value
 * @property {number} EN_POKER_TOPLIST_CHECK_INTERVAl=60 EN_POKER_TOPLIST_CHECK_INTERVAl value
 * @property {number} EN_POKER_CHECK_SESSION_LEAK_INTERVAL=600 EN_POKER_CHECK_SESSION_LEAK_INTERVAL value
 * @property {number} EN_POKER_PRINT_SESSION_TIME_INTERVAL=600 EN_POKER_PRINT_SESSION_TIME_INTERVAL value
 * @property {number} EN_ROBOT_MIN_ACTION_DELAY=1000 EN_ROBOT_MIN_ACTION_DELAY value
 * @property {number} EN_ROBOT_MAX_ACTION_DELAY=4000 EN_ROBOT_MAX_ACTION_DELAY value
 * @property {number} EN_ROBOT_MIN_SITDOWN_DELAY=5000 EN_ROBOT_MIN_SITDOWN_DELAY value
 * @property {number} EN_ROBOT_MAX_SITDOWN_DELAY=60000 EN_ROBOT_MAX_SITDOWN_DELAY value
 * @property {number} EN_ROBOT_MIN_ONDUTY_TIME=18000 EN_ROBOT_MIN_ONDUTY_TIME value
 * @property {number} EN_ROBOT_MAX_ONDUTY_TIME=25200 EN_ROBOT_MAX_ONDUTY_TIME value
 * @property {number} EN_POKER_TUOGUAN_COUNT=2 EN_POKER_TUOGUAN_COUNT value
 * @property {number} EN_POKER_UNKNOW_CARD=100 EN_POKER_UNKNOW_CARD value
 * @property {number} EN_POKER_TABLE_STATE_KEEP_TIME=600 EN_POKER_TABLE_STATE_KEEP_TIME value
 * @property {number} EN_POKER_PLAYER_HEART_BEAT_CHECK_INTERVAL=60 EN_POKER_PLAYER_HEART_BEAT_CHECK_INTERVAL value
 * @property {number} EN_POKER_ROOMSVR_HEART_BEAT_INTERVAL=60 EN_POKER_ROOMSVR_HEART_BEAT_INTERVAL value
 * @property {number} EN_POKER_TIMER_CHECK_INTERVAL=200 EN_POKER_TIMER_CHECK_INTERVAL value
 * @property {number} EN_POKER_MATCH_TIMER_CHECK_INTERVAL=100 EN_POKER_MATCH_TIMER_CHECK_INTERVAL value
 * @property {number} EN_POKER_MAX_CHAT_LEN=160 EN_POKER_MAX_CHAT_LEN value
 * @property {number} EN_POKER_CHECK_LOCK_DATA_INTERVAL=1 EN_POKER_CHECK_LOCK_DATA_INTERVAL value
 * @property {number} EN_POKER_MAX_CHECK_LOCK_DATA_NUM=5 EN_POKER_MAX_CHECK_LOCK_DATA_NUM value
 * @property {number} EN_POKER_LOCK_LEVELDB_TIMEOUT=1800 EN_POKER_LOCK_LEVELDB_TIMEOUT value
 * @property {number} EN_POKER_GAME_TO_ROOM_HEART_BEAT_INTERVAL=60 EN_POKER_GAME_TO_ROOM_HEART_BEAT_INTERVAL value
 */
$root.ENCommon = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[2000] = "EN_POKER_MAX_HANDLER_NUM"] = 2000;
    values[valuesById[20] = "EN_POKER_MAX_DATATYPE_NUM"] = 20;
    values[valuesById[103] = "EN_POKER_APPID"] = 103;
    values[valuesById[62] = "EN_POKER_BASE64_TYPE"] = 62;
    values[valuesById[64] = "EN_POKER_MAX_NICK_NAME_LEN"] = 64;
    values["EN_POKER_MAX_3RD_ACC_NAME_LEN"] = 64;
    values[valuesById[5] = "EN_POKER_SESSION_MAX_REDO"] = 5;
    values[valuesById[32768] = "EN_POKER_MAX_KVDB_BUFFER_LEN"] = 32768;
    values[valuesById[1] = "EN_POKER_REDIS_SWAP_COUNT_PER_SEC"] = 1;
    values[valuesById[86400] = "EN_POKER_REDIS_KEEP_TIME"] = 86400;
    values[valuesById[3600] = "EN_POKER_TOPLIST_PROCESS_INTERVAL"] = 3600;
    values[valuesById[60] = "EN_POKER_TOPLIST_CHECK_INTERVAl"] = 60;
    values[valuesById[600] = "EN_POKER_CHECK_SESSION_LEAK_INTERVAL"] = 600;
    values["EN_POKER_PRINT_SESSION_TIME_INTERVAL"] = 600;
    values[valuesById[1000] = "EN_ROBOT_MIN_ACTION_DELAY"] = 1000;
    values[valuesById[4000] = "EN_ROBOT_MAX_ACTION_DELAY"] = 4000;
    values[valuesById[5000] = "EN_ROBOT_MIN_SITDOWN_DELAY"] = 5000;
    values[valuesById[60000] = "EN_ROBOT_MAX_SITDOWN_DELAY"] = 60000;
    values[valuesById[18000] = "EN_ROBOT_MIN_ONDUTY_TIME"] = 18000;
    values[valuesById[25200] = "EN_ROBOT_MAX_ONDUTY_TIME"] = 25200;
    values[valuesById[2] = "EN_POKER_TUOGUAN_COUNT"] = 2;
    values[valuesById[100] = "EN_POKER_UNKNOW_CARD"] = 100;
    values["EN_POKER_TABLE_STATE_KEEP_TIME"] = 600;
    values["EN_POKER_PLAYER_HEART_BEAT_CHECK_INTERVAL"] = 60;
    values["EN_POKER_ROOMSVR_HEART_BEAT_INTERVAL"] = 60;
    values[valuesById[200] = "EN_POKER_TIMER_CHECK_INTERVAL"] = 200;
    values["EN_POKER_MATCH_TIMER_CHECK_INTERVAL"] = 100;
    values[valuesById[160] = "EN_POKER_MAX_CHAT_LEN"] = 160;
    values["EN_POKER_CHECK_LOCK_DATA_INTERVAL"] = 1;
    values["EN_POKER_MAX_CHECK_LOCK_DATA_NUM"] = 5;
    values[valuesById[1800] = "EN_POKER_LOCK_LEVELDB_TIMEOUT"] = 1800;
    values["EN_POKER_GAME_TO_ROOM_HEART_BEAT_INTERVAL"] = 60;
    return values;
})();

/**
 * ENRedisDataType enum.
 * @exports ENRedisDataType
 * @enum {string}
 * @property {number} EN_REDIS_DATA_TYPE_USER=1 EN_REDIS_DATA_TYPE_USER value
 */
$root.ENRedisDataType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "EN_REDIS_DATA_TYPE_USER"] = 1;
    return values;
})();

/**
 * ENMessageError enum.
 * @exports ENMessageError
 * @enum {string}
 * @property {number} EN_MESSAGE_ERROR_OK=0 EN_MESSAGE_ERROR_OK value
 * @property {number} EN_MESSAGE_ERROR_RSA_FAILED=1 EN_MESSAGE_ERROR_RSA_FAILED value
 * @property {number} EN_MESSAGE_ERROR_PLAYER_FULL=2 EN_MESSAGE_ERROR_PLAYER_FULL value
 * @property {number} EN_MESSAGE_ERROR_LOAD_DATA_FAILED=3 EN_MESSAGE_ERROR_LOAD_DATA_FAILED value
 * @property {number} EN_MESSAGE_ERROR_INVALID_TABLE_ID=4 EN_MESSAGE_ERROR_INVALID_TABLE_ID value
 * @property {number} EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX=5 EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX value
 * @property {number} EN_MESSAGE_ERROR_ALREADY_SIT=6 EN_MESSAGE_ERROR_ALREADY_SIT value
 * @property {number} EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER=7 EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER value
 * @property {number} EN_MESSAGE_ERROR_INVALID_CHIPS_NUM=8 EN_MESSAGE_ERROR_INVALID_CHIPS_NUM value
 * @property {number} EN_MESSAGE_ERROR_WAIT_PLAYER_FULL=9 EN_MESSAGE_ERROR_WAIT_PLAYER_FULL value
 * @property {number} EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE=10 EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE value
 * @property {number} EN_MESSAGE_ERROR_NO_EMPTY_PLAYER=11 EN_MESSAGE_ERROR_NO_EMPTY_PLAYER value
 * @property {number} EN_MESSAGE_ERROR_NOT_ALLOW_ACTION=12 EN_MESSAGE_ERROR_NOT_ALLOW_ACTION value
 * @property {number} EN_MESSAGE_ERROR_UID_NOT_MATCH=13 EN_MESSAGE_ERROR_UID_NOT_MATCH value
 * @property {number} EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS=14 EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS value
 * @property {number} EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST=15 EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST value
 * @property {number} EN_MESSAGE_ERROR_INVALID_GOOD_ID=16 EN_MESSAGE_ERROR_INVALID_GOOD_ID value
 * @property {number} EN_MESSAGE_ERROR_BASE64_ENCODE=17 EN_MESSAGE_ERROR_BASE64_ENCODE value
 * @property {number} EN_MESSAGE_ERROR_INVALID_WORD=18 EN_MESSAGE_ERROR_INVALID_WORD value
 * @property {number} EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN=19 EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN value
 * @property {number} EN_MESSAGE_ERROR_PROP_FULL=20 EN_MESSAGE_ERROR_PROP_FULL value
 * @property {number} EN_MESSAGE_ERROR_INVALID_PROP_ID=21 EN_MESSAGE_ERROR_INVALID_PROP_ID value
 * @property {number} EN_MESSAGE_ERROR_INVALID_AWARD_TYPE=22 EN_MESSAGE_ERROR_INVALID_AWARD_TYPE value
 * @property {number} EN_MESSAGE_ERROR_SAME_ORDERID=23 EN_MESSAGE_ERROR_SAME_ORDERID value
 * @property {number} EN_MESSAGE_ERROR_INVALID_ORDERID=24 EN_MESSAGE_ERROR_INVALID_ORDERID value
 * @property {number} EN_MESSAGE_ERROR_INVALID_TABLE_STATE=25 EN_MESSAGE_ERROR_INVALID_TABLE_STATE value
 * @property {number} EN_MESSAGE_ERROR_INVALID_PLAYER_UID=26 EN_MESSAGE_ERROR_INVALID_PLAYER_UID value
 * @property {number} EN_MESSAGE_ERROR_GM_FAIL=27 EN_MESSAGE_ERROR_GM_FAIL value
 * @property {number} EN_MESSAGE_ERROR_INVALID_FCODEID=28 EN_MESSAGE_ERROR_INVALID_FCODEID value
 * @property {number} EN_MESSAGE_ERROR_EXPIRED_FCODEID=29 EN_MESSAGE_ERROR_EXPIRED_FCODEID value
 * @property {number} EN_MESSAGE_ERROR_INVALID_UID=30 EN_MESSAGE_ERROR_INVALID_UID value
 * @property {number} EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION=31 EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION value
 * @property {number} EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT=32 EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT value
 * @property {number} EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT=33 EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT value
 * @property {number} EN_MESSAGE_ERROR_SHOP_CLOSE=34 EN_MESSAGE_ERROR_SHOP_CLOSE value
 * @property {number} EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE=35 EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE value
 * @property {number} EN_MESSAGE_ERROR_INVALID_CONFIG=36 EN_MESSAGE_ERROR_INVALID_CONFIG value
 * @property {number} EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE=42 EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE value
 * @property {number} EN_MESSAGE_ERROR_NOT_IN_TABLE=66 EN_MESSAGE_ERROR_NOT_IN_TABLE value
 * @property {number} EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM=39 EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM value
 * @property {number} EN_MESSAGE_ERROR_CHAT_TOO_LONG=67 EN_MESSAGE_ERROR_CHAT_TOO_LONG value
 * @property {number} EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP=68 EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP value
 * @property {number} EN_MESSAGE_ERROR_WRONG_TABLE_TYPE=69 EN_MESSAGE_ERROR_WRONG_TABLE_TYPE value
 * @property {number} EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL=70 EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL value
 * @property {number} EN_MESSAGE_ERROR_SNG_NOT_SIGNUP=71 EN_MESSAGE_ERROR_SNG_NOT_SIGNUP value
 * @property {number} EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS=72 EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS value
 * @property {number} EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH=73 EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH value
 * @property {number} EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH=74 EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH value
 * @property {number} EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL=75 EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL value
 * @property {number} EN_MESSAGE_ERROR_NO_OPEN_SEAT=76 EN_MESSAGE_ERROR_NO_OPEN_SEAT value
 * @property {number} EN_MESSAGE_ERROR_OPEN_SEAT_FULL=77 EN_MESSAGE_ERROR_OPEN_SEAT_FULL value
 * @property {number} EN_MESSAGE_ERROR_NO_CONF=100 EN_MESSAGE_ERROR_NO_CONF value
 * @property {number} EN_MESSAGE_ERROR_TABLE_FULL=101 EN_MESSAGE_ERROR_TABLE_FULL value
 * @property {number} EN_MESSAGE_ERROR_INVALID_CREATE_TIME=102 EN_MESSAGE_ERROR_INVALID_CREATE_TIME value
 * @property {number} EN_MESSAGE_ERROR_CANT_BUY_IN_NOW=103 EN_MESSAGE_ERROR_CANT_BUY_IN_NOW value
 * @property {number} EN_MESSAGE_ERROR_CREATE_FULL=104 EN_MESSAGE_ERROR_CREATE_FULL value
 * @property {number} EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH=105 EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH value
 * @property {number} EN_MESSAGE_ERROR_SVR_TIMEOUT=10011 EN_MESSAGE_ERROR_SVR_TIMEOUT value
 * @property {number} EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR=10015 EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR value
 * @property {number} EN_MESSAGE_ERROR_TIMEOUT_GM_SVR=10016 EN_MESSAGE_ERROR_TIMEOUT_GM_SVR value
 * @property {number} EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT=10017 EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT value
 * @property {number} EN_MESSAGE_ERROR_KVDB_SELECT=10001 EN_MESSAGE_ERROR_KVDB_SELECT value
 * @property {number} EN_MESSAGE_ERROR_KVDB_UPDATE=10002 EN_MESSAGE_ERROR_KVDB_UPDATE value
 * @property {number} EN_MESSAGE_ERROR_KVDB_DELETE=10003 EN_MESSAGE_ERROR_KVDB_DELETE value
 * @property {number} EN_MESSAGE_ERROR_KVDB_INSERT=10004 EN_MESSAGE_ERROR_KVDB_INSERT value
 * @property {number} EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT=10005 EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT value
 * @property {number} EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE=10006 EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE value
 * @property {number} EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE=10007 EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE value
 * @property {number} EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT=10008 EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT value
 * @property {number} EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR=10012 EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR value
 * @property {number} EN_MESSAGE_ERROR_ROBOT_ACTION=10018 EN_MESSAGE_ERROR_ROBOT_ACTION value
 * @property {number} EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION=10019 EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION value
 * @property {number} EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED=10020 EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED value
 * @property {number} EN_MESSAGE_ERROR_MYSQLDB_SELECT=10021 EN_MESSAGE_ERROR_MYSQLDB_SELECT value
 * @property {number} EN_MESSAGE_ERROR_MYSQLDB_UPDATE=10022 EN_MESSAGE_ERROR_MYSQLDB_UPDATE value
 * @property {number} EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT=10023 EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT value
 * @property {number} EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE=10024 EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE value
 * @property {number} EN_MESSAGE_ERROR_GTPL_ERROR=10025 EN_MESSAGE_ERROR_GTPL_ERROR value
 * @property {number} EN_MESSAGE_ERROR_ROOMSVR_ERROR=10026 EN_MESSAGE_ERROR_ROOMSVR_ERROR value
 * @property {number} EN_MESSAGE_ERROR_GMSVR_ERROR=10027 EN_MESSAGE_ERROR_GMSVR_ERROR value
 * @property {number} EN_MESSAGE_ERROR_MYSQLDB_INSERT=10028 EN_MESSAGE_ERROR_MYSQLDB_INSERT value
 * @property {number} EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT=10029 EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT value
 * @property {number} EN_MESSAGE_ERROR_SHOP_SVR=10030 EN_MESSAGE_ERROR_SHOP_SVR value
 * @property {number} EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN=10031 EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN value
 * @property {number} EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND=10032 EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND value
 * @property {number} EN_MESSAGE_ERROR_KVDB_FAILED=10033 EN_MESSAGE_ERROR_KVDB_FAILED value
 * @property {number} EN_MESSAGE_ERROR_BASEDB_ERROR=10034 EN_MESSAGE_ERROR_BASEDB_ERROR value
 * @property {number} EN_MESSAGE_ERROR_BASEDB_TIMEOUT=10035 EN_MESSAGE_ERROR_BASEDB_TIMEOUT value
 * @property {number} EN_MESSAGE_ERROR_REDIS_QUERY_ERROR=10040 EN_MESSAGE_ERROR_REDIS_QUERY_ERROR value
 * @property {number} EN_MESSAGE_ERROR_REDIS_SAVE_ERROR=10041 EN_MESSAGE_ERROR_REDIS_SAVE_ERROR value
 * @property {number} EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH=10042 EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH value
 */
$root.ENMessageError = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_MESSAGE_ERROR_OK"] = 0;
    values[valuesById[1] = "EN_MESSAGE_ERROR_RSA_FAILED"] = 1;
    values[valuesById[2] = "EN_MESSAGE_ERROR_PLAYER_FULL"] = 2;
    values[valuesById[3] = "EN_MESSAGE_ERROR_LOAD_DATA_FAILED"] = 3;
    values[valuesById[4] = "EN_MESSAGE_ERROR_INVALID_TABLE_ID"] = 4;
    values[valuesById[5] = "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX"] = 5;
    values[valuesById[6] = "EN_MESSAGE_ERROR_ALREADY_SIT"] = 6;
    values[valuesById[7] = "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER"] = 7;
    values[valuesById[8] = "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM"] = 8;
    values[valuesById[9] = "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL"] = 9;
    values[valuesById[10] = "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE"] = 10;
    values[valuesById[11] = "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER"] = 11;
    values[valuesById[12] = "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION"] = 12;
    values[valuesById[13] = "EN_MESSAGE_ERROR_UID_NOT_MATCH"] = 13;
    values[valuesById[14] = "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS"] = 14;
    values[valuesById[15] = "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST"] = 15;
    values[valuesById[16] = "EN_MESSAGE_ERROR_INVALID_GOOD_ID"] = 16;
    values[valuesById[17] = "EN_MESSAGE_ERROR_BASE64_ENCODE"] = 17;
    values[valuesById[18] = "EN_MESSAGE_ERROR_INVALID_WORD"] = 18;
    values[valuesById[19] = "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN"] = 19;
    values[valuesById[20] = "EN_MESSAGE_ERROR_PROP_FULL"] = 20;
    values[valuesById[21] = "EN_MESSAGE_ERROR_INVALID_PROP_ID"] = 21;
    values[valuesById[22] = "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE"] = 22;
    values[valuesById[23] = "EN_MESSAGE_ERROR_SAME_ORDERID"] = 23;
    values[valuesById[24] = "EN_MESSAGE_ERROR_INVALID_ORDERID"] = 24;
    values[valuesById[25] = "EN_MESSAGE_ERROR_INVALID_TABLE_STATE"] = 25;
    values[valuesById[26] = "EN_MESSAGE_ERROR_INVALID_PLAYER_UID"] = 26;
    values[valuesById[27] = "EN_MESSAGE_ERROR_GM_FAIL"] = 27;
    values[valuesById[28] = "EN_MESSAGE_ERROR_INVALID_FCODEID"] = 28;
    values[valuesById[29] = "EN_MESSAGE_ERROR_EXPIRED_FCODEID"] = 29;
    values[valuesById[30] = "EN_MESSAGE_ERROR_INVALID_UID"] = 30;
    values[valuesById[31] = "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION"] = 31;
    values[valuesById[32] = "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT"] = 32;
    values[valuesById[33] = "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT"] = 33;
    values[valuesById[34] = "EN_MESSAGE_ERROR_SHOP_CLOSE"] = 34;
    values[valuesById[35] = "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE"] = 35;
    values[valuesById[36] = "EN_MESSAGE_ERROR_INVALID_CONFIG"] = 36;
    values[valuesById[42] = "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE"] = 42;
    values[valuesById[66] = "EN_MESSAGE_ERROR_NOT_IN_TABLE"] = 66;
    values[valuesById[39] = "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM"] = 39;
    values[valuesById[67] = "EN_MESSAGE_ERROR_CHAT_TOO_LONG"] = 67;
    values[valuesById[68] = "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP"] = 68;
    values[valuesById[69] = "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE"] = 69;
    values[valuesById[70] = "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL"] = 70;
    values[valuesById[71] = "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP"] = 71;
    values[valuesById[72] = "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS"] = 72;
    values[valuesById[73] = "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH"] = 73;
    values[valuesById[74] = "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH"] = 74;
    values[valuesById[75] = "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL"] = 75;
    values[valuesById[76] = "EN_MESSAGE_ERROR_NO_OPEN_SEAT"] = 76;
    values[valuesById[77] = "EN_MESSAGE_ERROR_OPEN_SEAT_FULL"] = 77;
    values[valuesById[100] = "EN_MESSAGE_ERROR_NO_CONF"] = 100;
    values[valuesById[101] = "EN_MESSAGE_ERROR_TABLE_FULL"] = 101;
    values[valuesById[102] = "EN_MESSAGE_ERROR_INVALID_CREATE_TIME"] = 102;
    values[valuesById[103] = "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW"] = 103;
    values[valuesById[104] = "EN_MESSAGE_ERROR_CREATE_FULL"] = 104;
    values[valuesById[105] = "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH"] = 105;
    values[valuesById[10011] = "EN_MESSAGE_ERROR_SVR_TIMEOUT"] = 10011;
    values[valuesById[10015] = "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR"] = 10015;
    values[valuesById[10016] = "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR"] = 10016;
    values[valuesById[10017] = "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT"] = 10017;
    values[valuesById[10001] = "EN_MESSAGE_ERROR_KVDB_SELECT"] = 10001;
    values[valuesById[10002] = "EN_MESSAGE_ERROR_KVDB_UPDATE"] = 10002;
    values[valuesById[10003] = "EN_MESSAGE_ERROR_KVDB_DELETE"] = 10003;
    values[valuesById[10004] = "EN_MESSAGE_ERROR_KVDB_INSERT"] = 10004;
    values[valuesById[10005] = "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT"] = 10005;
    values[valuesById[10006] = "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE"] = 10006;
    values[valuesById[10007] = "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE"] = 10007;
    values[valuesById[10008] = "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT"] = 10008;
    values[valuesById[10012] = "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR"] = 10012;
    values[valuesById[10018] = "EN_MESSAGE_ERROR_ROBOT_ACTION"] = 10018;
    values[valuesById[10019] = "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION"] = 10019;
    values[valuesById[10020] = "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED"] = 10020;
    values[valuesById[10021] = "EN_MESSAGE_ERROR_MYSQLDB_SELECT"] = 10021;
    values[valuesById[10022] = "EN_MESSAGE_ERROR_MYSQLDB_UPDATE"] = 10022;
    values[valuesById[10023] = "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT"] = 10023;
    values[valuesById[10024] = "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE"] = 10024;
    values[valuesById[10025] = "EN_MESSAGE_ERROR_GTPL_ERROR"] = 10025;
    values[valuesById[10026] = "EN_MESSAGE_ERROR_ROOMSVR_ERROR"] = 10026;
    values[valuesById[10027] = "EN_MESSAGE_ERROR_GMSVR_ERROR"] = 10027;
    values[valuesById[10028] = "EN_MESSAGE_ERROR_MYSQLDB_INSERT"] = 10028;
    values[valuesById[10029] = "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT"] = 10029;
    values[valuesById[10030] = "EN_MESSAGE_ERROR_SHOP_SVR"] = 10030;
    values[valuesById[10031] = "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN"] = 10031;
    values[valuesById[10032] = "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND"] = 10032;
    values[valuesById[10033] = "EN_MESSAGE_ERROR_KVDB_FAILED"] = 10033;
    values[valuesById[10034] = "EN_MESSAGE_ERROR_BASEDB_ERROR"] = 10034;
    values[valuesById[10035] = "EN_MESSAGE_ERROR_BASEDB_TIMEOUT"] = 10035;
    values[valuesById[10040] = "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR"] = 10040;
    values[valuesById[10041] = "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR"] = 10041;
    values[valuesById[10042] = "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH"] = 10042;
    return values;
})();

/**
 * ENConfigType enum.
 * @exports ENConfigType
 * @enum {string}
 * @property {number} EN_CONFIG_TYPE_CREATE_TABLE=1 EN_CONFIG_TYPE_CREATE_TABLE value
 * @property {number} EN_CONFIG_TYPE_RAISE_BLIND=2 EN_CONFIG_TYPE_RAISE_BLIND value
 * @property {number} EN_CONFIG_TYPE_TRAINING=3 EN_CONFIG_TYPE_TRAINING value
 */
$root.ENConfigType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "EN_CONFIG_TYPE_CREATE_TABLE"] = 1;
    values[valuesById[2] = "EN_CONFIG_TYPE_RAISE_BLIND"] = 2;
    values[valuesById[3] = "EN_CONFIG_TYPE_TRAINING"] = 3;
    return values;
})();

/**
 * ENTableType enum.
 * @exports ENTableType
 * @enum {string}
 * @property {number} EN_TABLE_CREATE_NORMAL=0 EN_TABLE_CREATE_NORMAL value
 * @property {number} EN_TABLE_SNG_TIME=100 EN_TABLE_SNG_TIME value
 * @property {number} EN_TABLE_TRAINING_TIME=200 EN_TABLE_TRAINING_TIME value
 */
$root.ENTableType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_TABLE_CREATE_NORMAL"] = 0;
    values[valuesById[100] = "EN_TABLE_SNG_TIME"] = 100;
    values[valuesById[200] = "EN_TABLE_TRAINING_TIME"] = 200;
    return values;
})();

/**
 * ENCardType enum.
 * @exports ENCardType
 * @enum {string}
 * @property {number} EN_CARD_TYPE_SPADE=0 EN_CARD_TYPE_SPADE value
 * @property {number} EN_CARD_TYPE_HEART=1 EN_CARD_TYPE_HEART value
 * @property {number} EN_CARD_TYPE_DIAMOND=2 EN_CARD_TYPE_DIAMOND value
 * @property {number} EN_CARD_TYPE_CLUB=3 EN_CARD_TYPE_CLUB value
 */
$root.ENCardType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_CARD_TYPE_SPADE"] = 0;
    values[valuesById[1] = "EN_CARD_TYPE_HEART"] = 1;
    values[valuesById[2] = "EN_CARD_TYPE_DIAMOND"] = 2;
    values[valuesById[3] = "EN_CARD_TYPE_CLUB"] = 3;
    return values;
})();

/**
 * ENCardValue enum.
 * @exports ENCardValue
 * @enum {string}
 * @property {number} EN_CARD_VALUE_2=0 EN_CARD_VALUE_2 value
 * @property {number} EN_CARD_VALUE_3=1 EN_CARD_VALUE_3 value
 * @property {number} EN_CARD_VALUE_4=2 EN_CARD_VALUE_4 value
 * @property {number} EN_CARD_VALUE_5=3 EN_CARD_VALUE_5 value
 * @property {number} EN_CARD_VALUE_6=4 EN_CARD_VALUE_6 value
 * @property {number} EN_CARD_VALUE_7=5 EN_CARD_VALUE_7 value
 * @property {number} EN_CARD_VALUE_8=6 EN_CARD_VALUE_8 value
 * @property {number} EN_CARD_VALUE_9=7 EN_CARD_VALUE_9 value
 * @property {number} EN_CARD_VALUE_10=8 EN_CARD_VALUE_10 value
 * @property {number} EN_CARD_VALUE_JACK=9 EN_CARD_VALUE_JACK value
 * @property {number} EN_CARD_VALUE_QUEEN=10 EN_CARD_VALUE_QUEEN value
 * @property {number} EN_CARD_VALUE_KING=11 EN_CARD_VALUE_KING value
 * @property {number} EN_CARD_VALUE_ACE=12 EN_CARD_VALUE_ACE value
 */
$root.ENCardValue = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_CARD_VALUE_2"] = 0;
    values[valuesById[1] = "EN_CARD_VALUE_3"] = 1;
    values[valuesById[2] = "EN_CARD_VALUE_4"] = 2;
    values[valuesById[3] = "EN_CARD_VALUE_5"] = 3;
    values[valuesById[4] = "EN_CARD_VALUE_6"] = 4;
    values[valuesById[5] = "EN_CARD_VALUE_7"] = 5;
    values[valuesById[6] = "EN_CARD_VALUE_8"] = 6;
    values[valuesById[7] = "EN_CARD_VALUE_9"] = 7;
    values[valuesById[8] = "EN_CARD_VALUE_10"] = 8;
    values[valuesById[9] = "EN_CARD_VALUE_JACK"] = 9;
    values[valuesById[10] = "EN_CARD_VALUE_QUEEN"] = 10;
    values[valuesById[11] = "EN_CARD_VALUE_KING"] = 11;
    values[valuesById[12] = "EN_CARD_VALUE_ACE"] = 12;
    return values;
})();

/**
 * ENCardForm enum.
 * @exports ENCardForm
 * @enum {string}
 * @property {number} EN_CARD_FORM_UNKONWN=0 EN_CARD_FORM_UNKONWN value
 * @property {number} EN_CARD_FORM_HIGH_CARD=1 EN_CARD_FORM_HIGH_CARD value
 * @property {number} EN_CARD_FORM_ONE_PAIR=2 EN_CARD_FORM_ONE_PAIR value
 * @property {number} EN_CARD_FORM_TWO_PAIR=3 EN_CARD_FORM_TWO_PAIR value
 * @property {number} EN_CARD_FORM_THREE_OF_A_KING=4 EN_CARD_FORM_THREE_OF_A_KING value
 * @property {number} EN_CARD_FORM_FLUSH=5 EN_CARD_FORM_FLUSH value
 * @property {number} EN_CARD_FORM_STRAIGHT=6 EN_CARD_FORM_STRAIGHT value
 * @property {number} EN_CARD_FORM_FULL_HOUSE=7 EN_CARD_FORM_FULL_HOUSE value
 * @property {number} EN_CARD_FORM_FOUR_OF_A_KING=8 EN_CARD_FORM_FOUR_OF_A_KING value
 * @property {number} EN_CARD_FORM_STRAIGHT_FLUSH=9 EN_CARD_FORM_STRAIGHT_FLUSH value
 * @property {number} EN_CARD_FORM_ROYAL_FLUSH=10 EN_CARD_FORM_ROYAL_FLUSH value
 */
$root.ENCardForm = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_CARD_FORM_UNKONWN"] = 0;
    values[valuesById[1] = "EN_CARD_FORM_HIGH_CARD"] = 1;
    values[valuesById[2] = "EN_CARD_FORM_ONE_PAIR"] = 2;
    values[valuesById[3] = "EN_CARD_FORM_TWO_PAIR"] = 3;
    values[valuesById[4] = "EN_CARD_FORM_THREE_OF_A_KING"] = 4;
    values[valuesById[5] = "EN_CARD_FORM_FLUSH"] = 5;
    values[valuesById[6] = "EN_CARD_FORM_STRAIGHT"] = 6;
    values[valuesById[7] = "EN_CARD_FORM_FULL_HOUSE"] = 7;
    values[valuesById[8] = "EN_CARD_FORM_FOUR_OF_A_KING"] = 8;
    values[valuesById[9] = "EN_CARD_FORM_STRAIGHT_FLUSH"] = 9;
    values[valuesById[10] = "EN_CARD_FORM_ROYAL_FLUSH"] = 10;
    return values;
})();

/**
 * ENPlayerAction enum.
 * @exports ENPlayerAction
 * @enum {string}
 * @property {number} EN_PLAYER_ACTION_BET=0 EN_PLAYER_ACTION_BET value
 * @property {number} EN_PLAYER_ACTION_CALL=1 EN_PLAYER_ACTION_CALL value
 * @property {number} EN_PLAYER_ACTION_CHECK=2 EN_PLAYER_ACTION_CHECK value
 * @property {number} EN_PLAYER_ACTION_FOLD=3 EN_PLAYER_ACTION_FOLD value
 * @property {number} EN_PLAYER_ACTION_RAISE=4 EN_PLAYER_ACTION_RAISE value
 * @property {number} EN_PLAYER_ACTION_ALL_IN=5 EN_PLAYER_ACTION_ALL_IN value
 * @property {number} EN_PLAYER_ACTION_PRE_BET=6 EN_PLAYER_ACTION_PRE_BET value
 * @property {number} EN_PLAYER_ACTION_NONE=7 EN_PLAYER_ACTION_NONE value
 */
$root.ENPlayerAction = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_PLAYER_ACTION_BET"] = 0;
    values[valuesById[1] = "EN_PLAYER_ACTION_CALL"] = 1;
    values[valuesById[2] = "EN_PLAYER_ACTION_CHECK"] = 2;
    values[valuesById[3] = "EN_PLAYER_ACTION_FOLD"] = 3;
    values[valuesById[4] = "EN_PLAYER_ACTION_RAISE"] = 4;
    values[valuesById[5] = "EN_PLAYER_ACTION_ALL_IN"] = 5;
    values[valuesById[6] = "EN_PLAYER_ACTION_PRE_BET"] = 6;
    values[valuesById[7] = "EN_PLAYER_ACTION_NONE"] = 7;
    return values;
})();

/**
 * ENTableState enum.
 * @exports ENTableState
 * @enum {string}
 * @property {number} EN_TABLE_STATE_WAIT_MIN_PLAYER=0 EN_TABLE_STATE_WAIT_MIN_PLAYER value
 * @property {number} EN_TABLE_STATE_WAIT_CLIENT_ACTION=1 EN_TABLE_STATE_WAIT_CLIENT_ACTION value
 * @property {number} EN_TABLE_STATE_WAIT_ROUND_START=18 EN_TABLE_STATE_WAIT_ROUND_START value
 * @property {number} EN_TABLE_STATE_WAIT_ROUND_END=2 EN_TABLE_STATE_WAIT_ROUND_END value
 * @property {number} EN_TABLE_STATE_WAIT_GAME_END=3 EN_TABLE_STATE_WAIT_GAME_END value
 * @property {number} EN_TABLE_STATE_GAME_START=4 EN_TABLE_STATE_GAME_START value
 * @property {number} EN_TABLE_STATE_ONE_GAME_START=5 EN_TABLE_STATE_ONE_GAME_START value
 * @property {number} EN_TABLE_STATE_ROUND_START=6 EN_TABLE_STATE_ROUND_START value
 * @property {number} EN_TABLE_STATE_ROUND_REAL_START=17 EN_TABLE_STATE_ROUND_REAL_START value
 * @property {number} EN_TABLE_STATE_CONTINUE_ROUND=7 EN_TABLE_STATE_CONTINUE_ROUND value
 * @property {number} EN_TABLE_STATE_CONTINUE_ROUND_AND_SITUP=8 EN_TABLE_STATE_CONTINUE_ROUND_AND_SITUP value
 * @property {number} EN_TABLE_STATE_CONTINUE_ROUND_AND_EXIT=9 EN_TABLE_STATE_CONTINUE_ROUND_AND_EXIT value
 * @property {number} EN_TABLE_STATE_CALC_POTS=10 EN_TABLE_STATE_CALC_POTS value
 * @property {number} EN_TABLE_STATE_ROUND_END=11 EN_TABLE_STATE_ROUND_END value
 * @property {number} EN_TABLE_STATE_GAME_ONE_END=12 EN_TABLE_STATE_GAME_ONE_END value
 * @property {number} EN_TABLE_STATE_GAME_ONE_REAL_END=13 EN_TABLE_STATE_GAME_ONE_REAL_END value
 * @property {number} EN_TABLE_STATE_GAME_END=14 EN_TABLE_STATE_GAME_END value
 * @property {number} EN_TABLE_STATE_GAME_DEL=15 EN_TABLE_STATE_GAME_DEL value
 * @property {number} EN_TABLE_STATE_WAIT_GAME_START=16 EN_TABLE_STATE_WAIT_GAME_START value
 * @property {number} EN_TABLE_STATE_PAY_BEFORE_ONE_GAME_START=20 EN_TABLE_STATE_PAY_BEFORE_ONE_GAME_START value
 * @property {number} EN_TABLE_STATE_WAIT_PAY_BEFORE_ONE_GAME_START=120 EN_TABLE_STATE_WAIT_PAY_BEFORE_ONE_GAME_START value
 */
$root.ENTableState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_TABLE_STATE_WAIT_MIN_PLAYER"] = 0;
    values[valuesById[1] = "EN_TABLE_STATE_WAIT_CLIENT_ACTION"] = 1;
    values[valuesById[18] = "EN_TABLE_STATE_WAIT_ROUND_START"] = 18;
    values[valuesById[2] = "EN_TABLE_STATE_WAIT_ROUND_END"] = 2;
    values[valuesById[3] = "EN_TABLE_STATE_WAIT_GAME_END"] = 3;
    values[valuesById[4] = "EN_TABLE_STATE_GAME_START"] = 4;
    values[valuesById[5] = "EN_TABLE_STATE_ONE_GAME_START"] = 5;
    values[valuesById[6] = "EN_TABLE_STATE_ROUND_START"] = 6;
    values[valuesById[17] = "EN_TABLE_STATE_ROUND_REAL_START"] = 17;
    values[valuesById[7] = "EN_TABLE_STATE_CONTINUE_ROUND"] = 7;
    values[valuesById[8] = "EN_TABLE_STATE_CONTINUE_ROUND_AND_SITUP"] = 8;
    values[valuesById[9] = "EN_TABLE_STATE_CONTINUE_ROUND_AND_EXIT"] = 9;
    values[valuesById[10] = "EN_TABLE_STATE_CALC_POTS"] = 10;
    values[valuesById[11] = "EN_TABLE_STATE_ROUND_END"] = 11;
    values[valuesById[12] = "EN_TABLE_STATE_GAME_ONE_END"] = 12;
    values[valuesById[13] = "EN_TABLE_STATE_GAME_ONE_REAL_END"] = 13;
    values[valuesById[14] = "EN_TABLE_STATE_GAME_END"] = 14;
    values[valuesById[15] = "EN_TABLE_STATE_GAME_DEL"] = 15;
    values[valuesById[16] = "EN_TABLE_STATE_WAIT_GAME_START"] = 16;
    values[valuesById[20] = "EN_TABLE_STATE_PAY_BEFORE_ONE_GAME_START"] = 20;
    values[valuesById[120] = "EN_TABLE_STATE_WAIT_PAY_BEFORE_ONE_GAME_START"] = 120;
    return values;
})();

/**
 * ENPlayerState enum.
 * @exports ENPlayerState
 * @enum {string}
 * @property {number} EN_PLAYER_STATE_NO_PLAYER=0 EN_PLAYER_STATE_NO_PLAYER value
 * @property {number} EN_PLAYER_STATE_PRE_SITDOWN=1 EN_PLAYER_STATE_PRE_SITDOWN value
 * @property {number} EN_PLAYER_STATE_WAIT_FOR_NEXT_ONE_GAME=2 EN_PLAYER_STATE_WAIT_FOR_NEXT_ONE_GAME value
 * @property {number} EN_PLAYER_STATE_PLAYING=3 EN_PLAYER_STATE_PLAYING value
 * @property {number} EN_PLAYER_STATE_ALL_IN=4 EN_PLAYER_STATE_ALL_IN value
 * @property {number} EN_PLAYER_STATE_FOLD=5 EN_PLAYER_STATE_FOLD value
 */
$root.ENPlayerState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_PLAYER_STATE_NO_PLAYER"] = 0;
    values[valuesById[1] = "EN_PLAYER_STATE_PRE_SITDOWN"] = 1;
    values[valuesById[2] = "EN_PLAYER_STATE_WAIT_FOR_NEXT_ONE_GAME"] = 2;
    values[valuesById[3] = "EN_PLAYER_STATE_PLAYING"] = 3;
    values[valuesById[4] = "EN_PLAYER_STATE_ALL_IN"] = 4;
    values[valuesById[5] = "EN_PLAYER_STATE_FOLD"] = 5;
    return values;
})();

/**
 * ENGender enum.
 * @exports ENGender
 * @enum {string}
 * @property {number} EN_GENDER_FEMALE=0 EN_GENDER_FEMALE value
 * @property {number} EN_GENDER_MALE=1 EN_GENDER_MALE value
 */
$root.ENGender = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_GENDER_FEMALE"] = 0;
    values[valuesById[1] = "EN_GENDER_MALE"] = 1;
    return values;
})();

/**
 * ENRankListType enum.
 * @exports ENRankListType
 * @enum {string}
 * @property {number} EN_RANKLIST_TYPE_FULL=0 EN_RANKLIST_TYPE_FULL value
 * @property {number} EN_RANKLIST_TYPE_INC_DAY=1 EN_RANKLIST_TYPE_INC_DAY value
 * @property {number} EN_RANKLIST_TYPE_INC_WEEK=2 EN_RANKLIST_TYPE_INC_WEEK value
 * @property {number} EN_RANKLIST_TYPE_INC_MONTH=3 EN_RANKLIST_TYPE_INC_MONTH value
 * @property {number} EN_RANKLIST_TYPE_INC_YEAR=4 EN_RANKLIST_TYPE_INC_YEAR value
 */
$root.ENRankListType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_RANKLIST_TYPE_FULL"] = 0;
    values[valuesById[1] = "EN_RANKLIST_TYPE_INC_DAY"] = 1;
    values[valuesById[2] = "EN_RANKLIST_TYPE_INC_WEEK"] = 2;
    values[valuesById[3] = "EN_RANKLIST_TYPE_INC_MONTH"] = 3;
    values[valuesById[4] = "EN_RANKLIST_TYPE_INC_YEAR"] = 4;
    return values;
})();

/**
 * ENLogoutType enum.
 * @exports ENLogoutType
 * @enum {string}
 * @property {number} EN_LOGOUT_TYPE_CONFLICT_BY_OTHER=0 EN_LOGOUT_TYPE_CONFLICT_BY_OTHER value
 * @property {number} EN_LOGOUT_TYPE_HEART_BEAT_TIMEOUT=1 EN_LOGOUT_TYPE_HEART_BEAT_TIMEOUT value
 * @property {number} EN_LOGOUT_TYPE_TABLE_RELEASE=2 EN_LOGOUT_TYPE_TABLE_RELEASE value
 * @property {number} EN_LOGOUT_TYPE_CLIENT_DISCONN=3 EN_LOGOUT_TYPE_CLIENT_DISCONN value
 * @property {number} EN_LOGOUT_TYPE_STAY_IN_TABLE_TOO_LONG=4 EN_LOGOUT_TYPE_STAY_IN_TABLE_TOO_LONG value
 * @property {number} EN_LOGOUT_TYPE_REQUEST_LEAVE=5 EN_LOGOUT_TYPE_REQUEST_LEAVE value
 * @property {number} EN_LOGOUT_TYPE_BY_GM=6 EN_LOGOUT_TYPE_BY_GM value
 */
$root.ENLogoutType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_LOGOUT_TYPE_CONFLICT_BY_OTHER"] = 0;
    values[valuesById[1] = "EN_LOGOUT_TYPE_HEART_BEAT_TIMEOUT"] = 1;
    values[valuesById[2] = "EN_LOGOUT_TYPE_TABLE_RELEASE"] = 2;
    values[valuesById[3] = "EN_LOGOUT_TYPE_CLIENT_DISCONN"] = 3;
    values[valuesById[4] = "EN_LOGOUT_TYPE_STAY_IN_TABLE_TOO_LONG"] = 4;
    values[valuesById[5] = "EN_LOGOUT_TYPE_REQUEST_LEAVE"] = 5;
    values[valuesById[6] = "EN_LOGOUT_TYPE_BY_GM"] = 6;
    return values;
})();

/**
 * ENVersionCheckAction enum.
 * @exports ENVersionCheckAction
 * @enum {string}
 * @property {number} EN_VERSION_CHECK_NEWEST=0 EN_VERSION_CHECK_NEWEST value
 * @property {number} EN_VERSION_CHECK_VALID_BUT_CAN_UPDATE=1 EN_VERSION_CHECK_VALID_BUT_CAN_UPDATE value
 * @property {number} EN_VERSION_CHECK_MUST_UPDATE=2 EN_VERSION_CHECK_MUST_UPDATE value
 * @property {number} EN_VERSION_CHECK_MUST_UPDATE_RES_ALL=3 EN_VERSION_CHECK_MUST_UPDATE_RES_ALL value
 * @property {number} EN_VERSION_CHECK_MUST_UPDATE_RES_INC=4 EN_VERSION_CHECK_MUST_UPDATE_RES_INC value
 */
$root.ENVersionCheckAction = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_VERSION_CHECK_NEWEST"] = 0;
    values[valuesById[1] = "EN_VERSION_CHECK_VALID_BUT_CAN_UPDATE"] = 1;
    values[valuesById[2] = "EN_VERSION_CHECK_MUST_UPDATE"] = 2;
    values[valuesById[3] = "EN_VERSION_CHECK_MUST_UPDATE_RES_ALL"] = 3;
    values[valuesById[4] = "EN_VERSION_CHECK_MUST_UPDATE_RES_INC"] = 4;
    return values;
})();

/**
 * ENUpdateReason enum.
 * @exports ENUpdateReason
 * @enum {string}
 * @property {number} EN_REASON_DEFAULT=0 EN_REASON_DEFAULT value
 * @property {number} EN_REASON_SIT=1 EN_REASON_SIT value
 * @property {number} EN_REASON_STAND=2 EN_REASON_STAND value
 * @property {number} EN_REASON_TABLE_FEE=3 EN_REASON_TABLE_FEE value
 * @property {number} EN_REASON_REGISTER=4 EN_REASON_REGISTER value
 * @property {number} EN_REASON_SNG_REWARD=5 EN_REASON_SNG_REWARD value
 * @property {number} EN_REASON_SNG_SIGNUP=6 EN_REASON_SNG_SIGNUP value
 * @property {number} EN_REASON_SNG_SIGNUP_REFUND=7 EN_REASON_SNG_SIGNUP_REFUND value
 * @property {number} EN_REASON_TRAINING_FEE=8 EN_REASON_TRAINING_FEE value
 * @property {number} EN_REASON_RESET_TIME=9 EN_REASON_RESET_TIME value
 * @property {number} EN_SIGNIN=1001 EN_SIGNIN value
 * @property {number} EN_PAY=1002 EN_PAY value
 * @property {number} EN_CONVERT=1003 EN_CONVERT value
 * @property {number} EN_OUTLINE=1004 EN_OUTLINE value
 * @property {number} EN_WX=1005 EN_WX value
 * @property {number} EN_PAY_ALI=1006 EN_PAY_ALI value
 * @property {number} EN_PAY_APPLE=1007 EN_PAY_APPLE value
 * @property {number} EN_INVITE=1008 EN_INVITE value
 * @property {number} EN_OFFLINE_TICKET=1009 EN_OFFLINE_TICKET value
 * @property {number} EN_OFFLINE_REFUND=1010 EN_OFFLINE_REFUND value
 */
$root.ENUpdateReason = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_REASON_DEFAULT"] = 0;
    values[valuesById[1] = "EN_REASON_SIT"] = 1;
    values[valuesById[2] = "EN_REASON_STAND"] = 2;
    values[valuesById[3] = "EN_REASON_TABLE_FEE"] = 3;
    values[valuesById[4] = "EN_REASON_REGISTER"] = 4;
    values[valuesById[5] = "EN_REASON_SNG_REWARD"] = 5;
    values[valuesById[6] = "EN_REASON_SNG_SIGNUP"] = 6;
    values[valuesById[7] = "EN_REASON_SNG_SIGNUP_REFUND"] = 7;
    values[valuesById[8] = "EN_REASON_TRAINING_FEE"] = 8;
    values[valuesById[9] = "EN_REASON_RESET_TIME"] = 9;
    values[valuesById[1001] = "EN_SIGNIN"] = 1001;
    values[valuesById[1002] = "EN_PAY"] = 1002;
    values[valuesById[1003] = "EN_CONVERT"] = 1003;
    values[valuesById[1004] = "EN_OUTLINE"] = 1004;
    values[valuesById[1005] = "EN_WX"] = 1005;
    values[valuesById[1006] = "EN_PAY_ALI"] = 1006;
    values[valuesById[1007] = "EN_PAY_APPLE"] = 1007;
    values[valuesById[1008] = "EN_INVITE"] = 1008;
    values[valuesById[1009] = "EN_OFFLINE_TICKET"] = 1009;
    values[valuesById[1010] = "EN_OFFLINE_REFUND"] = 1010;
    return values;
})();

/**
 * ENTableStatusType enum.
 * @exports ENTableStatusType
 * @enum {string}
 * @property {number} EN_TABLE_STATUS_TYPE_WAITING=1 EN_TABLE_STATUS_TYPE_WAITING value
 * @property {number} EN_TABLE_STATUS_TYPE_SIGNING=2 EN_TABLE_STATUS_TYPE_SIGNING value
 * @property {number} EN_TABLE_STATUS_TYPE_GAMING=4 EN_TABLE_STATUS_TYPE_GAMING value
 */
$root.ENTableStatusType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "EN_TABLE_STATUS_TYPE_WAITING"] = 1;
    values[valuesById[2] = "EN_TABLE_STATUS_TYPE_SIGNING"] = 2;
    values[valuesById[4] = "EN_TABLE_STATUS_TYPE_GAMING"] = 4;
    return values;
})();

/**
 * ENTableSubType enum.
 * @exports ENTableSubType
 * @enum {string}
 * @property {number} EN_TABLE_SUB_TYPE_UNKNOWN=0 EN_TABLE_SUB_TYPE_UNKNOWN value
 * @property {number} EN_TABLE_SUB_TYPE_RECOMMEND=1 EN_TABLE_SUB_TYPE_RECOMMEND value
 * @property {number} EN_TABLE_SUB_TYPE_GOLDEN=2 EN_TABLE_SUB_TYPE_GOLDEN value
 * @property {number} EN_TABLE_SUB_TYPE_FRAGMENT=4 EN_TABLE_SUB_TYPE_FRAGMENT value
 */
$root.ENTableSubType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_TABLE_SUB_TYPE_UNKNOWN"] = 0;
    values[valuesById[1] = "EN_TABLE_SUB_TYPE_RECOMMEND"] = 1;
    values[valuesById[2] = "EN_TABLE_SUB_TYPE_GOLDEN"] = 2;
    values[valuesById[4] = "EN_TABLE_SUB_TYPE_FRAGMENT"] = 4;
    return values;
})();

/**
 * ENTrainingTableLevel enum.
 * @exports ENTrainingTableLevel
 * @enum {string}
 * @property {number} EN_TRAINING_TABLE_LEVEL_JUNIOR=0 EN_TRAINING_TABLE_LEVEL_JUNIOR value
 * @property {number} EN_TRAINING_TABLE_LEVEL_MIDDLE=1 EN_TRAINING_TABLE_LEVEL_MIDDLE value
 * @property {number} EN_TRAINING_TABLE_LEVEL_SENIOR=2 EN_TRAINING_TABLE_LEVEL_SENIOR value
 */
$root.ENTrainingTableLevel = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_TRAINING_TABLE_LEVEL_JUNIOR"] = 0;
    values[valuesById[1] = "EN_TRAINING_TABLE_LEVEL_MIDDLE"] = 1;
    values[valuesById[2] = "EN_TRAINING_TABLE_LEVEL_SENIOR"] = 2;
    return values;
})();

/**
 * ENChatType enum.
 * @exports ENChatType
 * @enum {string}
 * @property {number} EN_CHAT_TEXT=1 EN_CHAT_TEXT value
 * @property {number} EN_CHAT_VOICE=2 EN_CHAT_VOICE value
 * @property {number} EN_CHAT_EMOJI=3 EN_CHAT_EMOJI value
 */
$root.ENChatType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "EN_CHAT_TEXT"] = 1;
    values[valuesById[2] = "EN_CHAT_VOICE"] = 2;
    values[valuesById[3] = "EN_CHAT_EMOJI"] = 3;
    return values;
})();

$root.CSConfigVerItem = (function() {

    /**
     * Properties of a CSConfigVerItem.
     * @exports ICSConfigVerItem
     * @interface ICSConfigVerItem
     * @property {ENConfigType} [type] CSConfigVerItem type
     * @property {number} [version] CSConfigVerItem version
     * @property {IPBConfig} [config] CSConfigVerItem config
     */

    /**
     * Constructs a new CSConfigVerItem.
     * @exports CSConfigVerItem
     * @classdesc Represents a CSConfigVerItem.
     * @constructor
     * @param {ICSConfigVerItem=} [properties] Properties to set
     */
    function CSConfigVerItem(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSConfigVerItem type.
     * @member {ENConfigType}type
     * @memberof CSConfigVerItem
     * @instance
     */
    CSConfigVerItem.prototype.type = 1;

    /**
     * CSConfigVerItem version.
     * @member {number}version
     * @memberof CSConfigVerItem
     * @instance
     */
    CSConfigVerItem.prototype.version = 0;

    /**
     * CSConfigVerItem config.
     * @member {(IPBConfig|null|undefined)}config
     * @memberof CSConfigVerItem
     * @instance
     */
    CSConfigVerItem.prototype.config = null;

    /**
     * Creates a new CSConfigVerItem instance using the specified properties.
     * @function create
     * @memberof CSConfigVerItem
     * @static
     * @param {ICSConfigVerItem=} [properties] Properties to set
     * @returns {CSConfigVerItem} CSConfigVerItem instance
     */
    CSConfigVerItem.create = function create(properties) {
        return new CSConfigVerItem(properties);
    };

    /**
     * Encodes the specified CSConfigVerItem message. Does not implicitly {@link CSConfigVerItem.verify|verify} messages.
     * @function encode
     * @memberof CSConfigVerItem
     * @static
     * @param {ICSConfigVerItem} message CSConfigVerItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSConfigVerItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        if (message.version != null && message.hasOwnProperty("version"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.version);
        if (message.config != null && message.hasOwnProperty("config"))
            $root.PBConfig.encode(message.config, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSConfigVerItem message, length delimited. Does not implicitly {@link CSConfigVerItem.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSConfigVerItem
     * @static
     * @param {ICSConfigVerItem} message CSConfigVerItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSConfigVerItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSConfigVerItem message from the specified reader or buffer.
     * @function decode
     * @memberof CSConfigVerItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSConfigVerItem} CSConfigVerItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSConfigVerItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSConfigVerItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            case 2:
                message.version = reader.uint32();
                break;
            case 3:
                message.config = $root.PBConfig.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSConfigVerItem message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSConfigVerItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSConfigVerItem} CSConfigVerItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSConfigVerItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSConfigVerItem message.
     * @function verify
     * @memberof CSConfigVerItem
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSConfigVerItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.version != null && message.hasOwnProperty("version"))
            if (!$util.isInteger(message.version))
                return "version: integer expected";
        if (message.config != null && message.hasOwnProperty("config")) {
            var error = $root.PBConfig.verify(message.config);
            if (error)
                return "config." + error;
        }
        return null;
    };

    /**
     * Creates a CSConfigVerItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSConfigVerItem
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSConfigVerItem} CSConfigVerItem
     */
    CSConfigVerItem.fromObject = function fromObject(object) {
        if (object instanceof $root.CSConfigVerItem)
            return object;
        var message = new $root.CSConfigVerItem();
        switch (object.type) {
        case "EN_CONFIG_TYPE_CREATE_TABLE":
        case 1:
            message.type = 1;
            break;
        case "EN_CONFIG_TYPE_RAISE_BLIND":
        case 2:
            message.type = 2;
            break;
        case "EN_CONFIG_TYPE_TRAINING":
        case 3:
            message.type = 3;
            break;
        }
        if (object.version != null)
            message.version = object.version >>> 0;
        if (object.config != null) {
            if (typeof object.config !== "object")
                throw TypeError(".CSConfigVerItem.config: object expected");
            message.config = $root.PBConfig.fromObject(object.config);
        }
        return message;
    };

    /**
     * Creates a plain object from a CSConfigVerItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSConfigVerItem
     * @static
     * @param {CSConfigVerItem} message CSConfigVerItem
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSConfigVerItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.type = options.enums === String ? "EN_CONFIG_TYPE_CREATE_TABLE" : 1;
            object.version = 0;
            object.config = null;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ENConfigType[message.type] : message.type;
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        if (message.config != null && message.hasOwnProperty("config"))
            object.config = $root.PBConfig.toObject(message.config, options);
        return object;
    };

    /**
     * Converts this CSConfigVerItem to JSON.
     * @function toJSON
     * @memberof CSConfigVerItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSConfigVerItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSConfigVerItem;
})();

$root.CSRequestUpdateConfig = (function() {

    /**
     * Properties of a CSRequestUpdateConfig.
     * @exports ICSRequestUpdateConfig
     * @interface ICSRequestUpdateConfig
     * @property {Array.<ICSConfigVerItem>} [configVers] CSRequestUpdateConfig configVers
     */

    /**
     * Constructs a new CSRequestUpdateConfig.
     * @exports CSRequestUpdateConfig
     * @classdesc Represents a CSRequestUpdateConfig.
     * @constructor
     * @param {ICSRequestUpdateConfig=} [properties] Properties to set
     */
    function CSRequestUpdateConfig(properties) {
        this.configVers = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestUpdateConfig configVers.
     * @member {Array.<ICSConfigVerItem>}configVers
     * @memberof CSRequestUpdateConfig
     * @instance
     */
    CSRequestUpdateConfig.prototype.configVers = $util.emptyArray;

    /**
     * Creates a new CSRequestUpdateConfig instance using the specified properties.
     * @function create
     * @memberof CSRequestUpdateConfig
     * @static
     * @param {ICSRequestUpdateConfig=} [properties] Properties to set
     * @returns {CSRequestUpdateConfig} CSRequestUpdateConfig instance
     */
    CSRequestUpdateConfig.create = function create(properties) {
        return new CSRequestUpdateConfig(properties);
    };

    /**
     * Encodes the specified CSRequestUpdateConfig message. Does not implicitly {@link CSRequestUpdateConfig.verify|verify} messages.
     * @function encode
     * @memberof CSRequestUpdateConfig
     * @static
     * @param {ICSRequestUpdateConfig} message CSRequestUpdateConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestUpdateConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.configVers != null && message.configVers.length)
            for (var i = 0; i < message.configVers.length; ++i)
                $root.CSConfigVerItem.encode(message.configVers[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSRequestUpdateConfig message, length delimited. Does not implicitly {@link CSRequestUpdateConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestUpdateConfig
     * @static
     * @param {ICSRequestUpdateConfig} message CSRequestUpdateConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestUpdateConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestUpdateConfig message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestUpdateConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestUpdateConfig} CSRequestUpdateConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestUpdateConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestUpdateConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.configVers && message.configVers.length))
                    message.configVers = [];
                message.configVers.push($root.CSConfigVerItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestUpdateConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestUpdateConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestUpdateConfig} CSRequestUpdateConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestUpdateConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestUpdateConfig message.
     * @function verify
     * @memberof CSRequestUpdateConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestUpdateConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.configVers != null && message.hasOwnProperty("configVers")) {
            if (!Array.isArray(message.configVers))
                return "configVers: array expected";
            for (var i = 0; i < message.configVers.length; ++i) {
                var error = $root.CSConfigVerItem.verify(message.configVers[i]);
                if (error)
                    return "configVers." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSRequestUpdateConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestUpdateConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestUpdateConfig} CSRequestUpdateConfig
     */
    CSRequestUpdateConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestUpdateConfig)
            return object;
        var message = new $root.CSRequestUpdateConfig();
        if (object.configVers) {
            if (!Array.isArray(object.configVers))
                throw TypeError(".CSRequestUpdateConfig.configVers: array expected");
            message.configVers = [];
            for (var i = 0; i < object.configVers.length; ++i) {
                if (typeof object.configVers[i] !== "object")
                    throw TypeError(".CSRequestUpdateConfig.configVers: object expected");
                message.configVers[i] = $root.CSConfigVerItem.fromObject(object.configVers[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSRequestUpdateConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestUpdateConfig
     * @static
     * @param {CSRequestUpdateConfig} message CSRequestUpdateConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestUpdateConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.configVers = [];
        if (message.configVers && message.configVers.length) {
            object.configVers = [];
            for (var j = 0; j < message.configVers.length; ++j)
                object.configVers[j] = $root.CSConfigVerItem.toObject(message.configVers[j], options);
        }
        return object;
    };

    /**
     * Converts this CSRequestUpdateConfig to JSON.
     * @function toJSON
     * @memberof CSRequestUpdateConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestUpdateConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestUpdateConfig;
})();

$root.CSResponseUpdateConfig = (function() {

    /**
     * Properties of a CSResponseUpdateConfig.
     * @exports ICSResponseUpdateConfig
     * @interface ICSResponseUpdateConfig
     * @property {Array.<ICSConfigVerItem>} [configVers] CSResponseUpdateConfig configVers
     */

    /**
     * Constructs a new CSResponseUpdateConfig.
     * @exports CSResponseUpdateConfig
     * @classdesc Represents a CSResponseUpdateConfig.
     * @constructor
     * @param {ICSResponseUpdateConfig=} [properties] Properties to set
     */
    function CSResponseUpdateConfig(properties) {
        this.configVers = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseUpdateConfig configVers.
     * @member {Array.<ICSConfigVerItem>}configVers
     * @memberof CSResponseUpdateConfig
     * @instance
     */
    CSResponseUpdateConfig.prototype.configVers = $util.emptyArray;

    /**
     * Creates a new CSResponseUpdateConfig instance using the specified properties.
     * @function create
     * @memberof CSResponseUpdateConfig
     * @static
     * @param {ICSResponseUpdateConfig=} [properties] Properties to set
     * @returns {CSResponseUpdateConfig} CSResponseUpdateConfig instance
     */
    CSResponseUpdateConfig.create = function create(properties) {
        return new CSResponseUpdateConfig(properties);
    };

    /**
     * Encodes the specified CSResponseUpdateConfig message. Does not implicitly {@link CSResponseUpdateConfig.verify|verify} messages.
     * @function encode
     * @memberof CSResponseUpdateConfig
     * @static
     * @param {ICSResponseUpdateConfig} message CSResponseUpdateConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseUpdateConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.configVers != null && message.configVers.length)
            for (var i = 0; i < message.configVers.length; ++i)
                $root.CSConfigVerItem.encode(message.configVers[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSResponseUpdateConfig message, length delimited. Does not implicitly {@link CSResponseUpdateConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseUpdateConfig
     * @static
     * @param {ICSResponseUpdateConfig} message CSResponseUpdateConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseUpdateConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseUpdateConfig message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseUpdateConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseUpdateConfig} CSResponseUpdateConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseUpdateConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseUpdateConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.configVers && message.configVers.length))
                    message.configVers = [];
                message.configVers.push($root.CSConfigVerItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseUpdateConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseUpdateConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseUpdateConfig} CSResponseUpdateConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseUpdateConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseUpdateConfig message.
     * @function verify
     * @memberof CSResponseUpdateConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseUpdateConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.configVers != null && message.hasOwnProperty("configVers")) {
            if (!Array.isArray(message.configVers))
                return "configVers: array expected";
            for (var i = 0; i < message.configVers.length; ++i) {
                var error = $root.CSConfigVerItem.verify(message.configVers[i]);
                if (error)
                    return "configVers." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSResponseUpdateConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseUpdateConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseUpdateConfig} CSResponseUpdateConfig
     */
    CSResponseUpdateConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseUpdateConfig)
            return object;
        var message = new $root.CSResponseUpdateConfig();
        if (object.configVers) {
            if (!Array.isArray(object.configVers))
                throw TypeError(".CSResponseUpdateConfig.configVers: array expected");
            message.configVers = [];
            for (var i = 0; i < object.configVers.length; ++i) {
                if (typeof object.configVers[i] !== "object")
                    throw TypeError(".CSResponseUpdateConfig.configVers: object expected");
                message.configVers[i] = $root.CSConfigVerItem.fromObject(object.configVers[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseUpdateConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseUpdateConfig
     * @static
     * @param {CSResponseUpdateConfig} message CSResponseUpdateConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseUpdateConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.configVers = [];
        if (message.configVers && message.configVers.length) {
            object.configVers = [];
            for (var j = 0; j < message.configVers.length; ++j)
                object.configVers[j] = $root.CSConfigVerItem.toObject(message.configVers[j], options);
        }
        return object;
    };

    /**
     * Converts this CSResponseUpdateConfig to JSON.
     * @function toJSON
     * @memberof CSResponseUpdateConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseUpdateConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseUpdateConfig;
})();

$root.CSRequestLogin = (function() {

    /**
     * Properties of a CSRequestLogin.
     * @exports ICSRequestLogin
     * @interface ICSRequestLogin
     * @property {Uint8Array} [token] CSRequestLogin token
     */

    /**
     * Constructs a new CSRequestLogin.
     * @exports CSRequestLogin
     * @classdesc Represents a CSRequestLogin.
     * @constructor
     * @param {ICSRequestLogin=} [properties] Properties to set
     */
    function CSRequestLogin(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestLogin token.
     * @member {Uint8Array}token
     * @memberof CSRequestLogin
     * @instance
     */
    CSRequestLogin.prototype.token = $util.newBuffer([]);

    /**
     * Creates a new CSRequestLogin instance using the specified properties.
     * @function create
     * @memberof CSRequestLogin
     * @static
     * @param {ICSRequestLogin=} [properties] Properties to set
     * @returns {CSRequestLogin} CSRequestLogin instance
     */
    CSRequestLogin.create = function create(properties) {
        return new CSRequestLogin(properties);
    };

    /**
     * Encodes the specified CSRequestLogin message. Does not implicitly {@link CSRequestLogin.verify|verify} messages.
     * @function encode
     * @memberof CSRequestLogin
     * @static
     * @param {ICSRequestLogin} message CSRequestLogin message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestLogin.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.token != null && message.hasOwnProperty("token"))
            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.token);
        return writer;
    };

    /**
     * Encodes the specified CSRequestLogin message, length delimited. Does not implicitly {@link CSRequestLogin.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestLogin
     * @static
     * @param {ICSRequestLogin} message CSRequestLogin message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestLogin.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestLogin message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestLogin
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestLogin} CSRequestLogin
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestLogin.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestLogin();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.token = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestLogin message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestLogin
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestLogin} CSRequestLogin
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestLogin.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestLogin message.
     * @function verify
     * @memberof CSRequestLogin
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestLogin.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.token != null && message.hasOwnProperty("token"))
            if (!(message.token && typeof message.token.length === "number" || $util.isString(message.token)))
                return "token: buffer expected";
        return null;
    };

    /**
     * Creates a CSRequestLogin message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestLogin
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestLogin} CSRequestLogin
     */
    CSRequestLogin.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestLogin)
            return object;
        var message = new $root.CSRequestLogin();
        if (object.token != null)
            if (typeof object.token === "string")
                $util.base64.decode(object.token, message.token = $util.newBuffer($util.base64.length(object.token)), 0);
            else if (object.token.length)
                message.token = object.token;
        return message;
    };

    /**
     * Creates a plain object from a CSRequestLogin message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestLogin
     * @static
     * @param {CSRequestLogin} message CSRequestLogin
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestLogin.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.token = options.bytes === String ? "" : [];
        if (message.token != null && message.hasOwnProperty("token"))
            object.token = options.bytes === String ? $util.base64.encode(message.token, 0, message.token.length) : options.bytes === Array ? Array.prototype.slice.call(message.token) : message.token;
        return object;
    };

    /**
     * Converts this CSRequestLogin to JSON.
     * @function toJSON
     * @memberof CSRequestLogin
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestLogin.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestLogin;
})();

$root.CSResponseLogin = (function() {

    /**
     * Properties of a CSResponseLogin.
     * @exports ICSResponseLogin
     * @interface ICSResponseLogin
     * @property {ENMessageError} [result] CSResponseLogin result
     * @property {number} [serverTime] CSResponseLogin serverTime
     * @property {boolean} [useHeartBeat] CSResponseLogin useHeartBeat
     * @property {string} [gameServerIp] CSResponseLogin gameServerIp
     * @property {number} [gameServerPort] CSResponseLogin gameServerPort
     * @property {number} [gameTableId] CSResponseLogin gameTableId
     * @property {ICSPlayerInfo} [playerInfo] CSResponseLogin playerInfo
     */

    /**
     * Constructs a new CSResponseLogin.
     * @exports CSResponseLogin
     * @classdesc Represents a CSResponseLogin.
     * @constructor
     * @param {ICSResponseLogin=} [properties] Properties to set
     */
    function CSResponseLogin(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseLogin result.
     * @member {ENMessageError}result
     * @memberof CSResponseLogin
     * @instance
     */
    CSResponseLogin.prototype.result = 0;

    /**
     * CSResponseLogin serverTime.
     * @member {number}serverTime
     * @memberof CSResponseLogin
     * @instance
     */
    CSResponseLogin.prototype.serverTime = 0;

    /**
     * CSResponseLogin useHeartBeat.
     * @member {boolean}useHeartBeat
     * @memberof CSResponseLogin
     * @instance
     */
    CSResponseLogin.prototype.useHeartBeat = false;

    /**
     * CSResponseLogin gameServerIp.
     * @member {string}gameServerIp
     * @memberof CSResponseLogin
     * @instance
     */
    CSResponseLogin.prototype.gameServerIp = "";

    /**
     * CSResponseLogin gameServerPort.
     * @member {number}gameServerPort
     * @memberof CSResponseLogin
     * @instance
     */
    CSResponseLogin.prototype.gameServerPort = 0;

    /**
     * CSResponseLogin gameTableId.
     * @member {number}gameTableId
     * @memberof CSResponseLogin
     * @instance
     */
    CSResponseLogin.prototype.gameTableId = 0;

    /**
     * CSResponseLogin playerInfo.
     * @member {(ICSPlayerInfo|null|undefined)}playerInfo
     * @memberof CSResponseLogin
     * @instance
     */
    CSResponseLogin.prototype.playerInfo = null;

    /**
     * Creates a new CSResponseLogin instance using the specified properties.
     * @function create
     * @memberof CSResponseLogin
     * @static
     * @param {ICSResponseLogin=} [properties] Properties to set
     * @returns {CSResponseLogin} CSResponseLogin instance
     */
    CSResponseLogin.create = function create(properties) {
        return new CSResponseLogin(properties);
    };

    /**
     * Encodes the specified CSResponseLogin message. Does not implicitly {@link CSResponseLogin.verify|verify} messages.
     * @function encode
     * @memberof CSResponseLogin
     * @static
     * @param {ICSResponseLogin} message CSResponseLogin message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseLogin.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.serverTime != null && message.hasOwnProperty("serverTime"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.serverTime);
        if (message.useHeartBeat != null && message.hasOwnProperty("useHeartBeat"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.useHeartBeat);
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.gameServerIp);
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.gameServerPort);
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.gameTableId);
        if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
            $root.CSPlayerInfo.encode(message.playerInfo, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSResponseLogin message, length delimited. Does not implicitly {@link CSResponseLogin.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseLogin
     * @static
     * @param {ICSResponseLogin} message CSResponseLogin message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseLogin.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseLogin message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseLogin
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseLogin} CSResponseLogin
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseLogin.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseLogin();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.serverTime = reader.uint32();
                break;
            case 3:
                message.useHeartBeat = reader.bool();
                break;
            case 5:
                message.gameServerIp = reader.string();
                break;
            case 6:
                message.gameServerPort = reader.uint32();
                break;
            case 7:
                message.gameTableId = reader.uint32();
                break;
            case 8:
                message.playerInfo = $root.CSPlayerInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseLogin message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseLogin
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseLogin} CSResponseLogin
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseLogin.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseLogin message.
     * @function verify
     * @memberof CSResponseLogin
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseLogin.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.serverTime != null && message.hasOwnProperty("serverTime"))
            if (!$util.isInteger(message.serverTime))
                return "serverTime: integer expected";
        if (message.useHeartBeat != null && message.hasOwnProperty("useHeartBeat"))
            if (typeof message.useHeartBeat !== "boolean")
                return "useHeartBeat: boolean expected";
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            if (!$util.isString(message.gameServerIp))
                return "gameServerIp: string expected";
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            if (!$util.isInteger(message.gameServerPort))
                return "gameServerPort: integer expected";
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            if (!$util.isInteger(message.gameTableId))
                return "gameTableId: integer expected";
        if (message.playerInfo != null && message.hasOwnProperty("playerInfo")) {
            var error = $root.CSPlayerInfo.verify(message.playerInfo);
            if (error)
                return "playerInfo." + error;
        }
        return null;
    };

    /**
     * Creates a CSResponseLogin message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseLogin
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseLogin} CSResponseLogin
     */
    CSResponseLogin.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseLogin)
            return object;
        var message = new $root.CSResponseLogin();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.serverTime != null)
            message.serverTime = object.serverTime >>> 0;
        if (object.useHeartBeat != null)
            message.useHeartBeat = Boolean(object.useHeartBeat);
        if (object.gameServerIp != null)
            message.gameServerIp = String(object.gameServerIp);
        if (object.gameServerPort != null)
            message.gameServerPort = object.gameServerPort >>> 0;
        if (object.gameTableId != null)
            message.gameTableId = object.gameTableId >>> 0;
        if (object.playerInfo != null) {
            if (typeof object.playerInfo !== "object")
                throw TypeError(".CSResponseLogin.playerInfo: object expected");
            message.playerInfo = $root.CSPlayerInfo.fromObject(object.playerInfo);
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseLogin message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseLogin
     * @static
     * @param {CSResponseLogin} message CSResponseLogin
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseLogin.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.serverTime = 0;
            object.useHeartBeat = false;
            object.gameServerIp = "";
            object.gameServerPort = 0;
            object.gameTableId = 0;
            object.playerInfo = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.serverTime != null && message.hasOwnProperty("serverTime"))
            object.serverTime = message.serverTime;
        if (message.useHeartBeat != null && message.hasOwnProperty("useHeartBeat"))
            object.useHeartBeat = message.useHeartBeat;
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            object.gameServerIp = message.gameServerIp;
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            object.gameServerPort = message.gameServerPort;
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            object.gameTableId = message.gameTableId;
        if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
            object.playerInfo = $root.CSPlayerInfo.toObject(message.playerInfo, options);
        return object;
    };

    /**
     * Converts this CSResponseLogin to JSON.
     * @function toJSON
     * @memberof CSResponseLogin
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseLogin.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseLogin;
})();

$root.CSNotifyLogout = (function() {

    /**
     * Properties of a CSNotifyLogout.
     * @exports ICSNotifyLogout
     * @interface ICSNotifyLogout
     * @property {ENLogoutType} [type] CSNotifyLogout type
     */

    /**
     * Constructs a new CSNotifyLogout.
     * @exports CSNotifyLogout
     * @classdesc Represents a CSNotifyLogout.
     * @constructor
     * @param {ICSNotifyLogout=} [properties] Properties to set
     */
    function CSNotifyLogout(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyLogout type.
     * @member {ENLogoutType}type
     * @memberof CSNotifyLogout
     * @instance
     */
    CSNotifyLogout.prototype.type = 0;

    /**
     * Creates a new CSNotifyLogout instance using the specified properties.
     * @function create
     * @memberof CSNotifyLogout
     * @static
     * @param {ICSNotifyLogout=} [properties] Properties to set
     * @returns {CSNotifyLogout} CSNotifyLogout instance
     */
    CSNotifyLogout.create = function create(properties) {
        return new CSNotifyLogout(properties);
    };

    /**
     * Encodes the specified CSNotifyLogout message. Does not implicitly {@link CSNotifyLogout.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyLogout
     * @static
     * @param {ICSNotifyLogout} message CSNotifyLogout message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyLogout.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyLogout message, length delimited. Does not implicitly {@link CSNotifyLogout.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyLogout
     * @static
     * @param {ICSNotifyLogout} message CSNotifyLogout message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyLogout.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyLogout message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyLogout
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyLogout} CSNotifyLogout
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyLogout.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyLogout();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyLogout message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyLogout
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyLogout} CSNotifyLogout
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyLogout.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyLogout message.
     * @function verify
     * @memberof CSNotifyLogout
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyLogout.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        return null;
    };

    /**
     * Creates a CSNotifyLogout message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyLogout
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyLogout} CSNotifyLogout
     */
    CSNotifyLogout.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyLogout)
            return object;
        var message = new $root.CSNotifyLogout();
        switch (object.type) {
        case "EN_LOGOUT_TYPE_CONFLICT_BY_OTHER":
        case 0:
            message.type = 0;
            break;
        case "EN_LOGOUT_TYPE_HEART_BEAT_TIMEOUT":
        case 1:
            message.type = 1;
            break;
        case "EN_LOGOUT_TYPE_TABLE_RELEASE":
        case 2:
            message.type = 2;
            break;
        case "EN_LOGOUT_TYPE_CLIENT_DISCONN":
        case 3:
            message.type = 3;
            break;
        case "EN_LOGOUT_TYPE_STAY_IN_TABLE_TOO_LONG":
        case 4:
            message.type = 4;
            break;
        case "EN_LOGOUT_TYPE_REQUEST_LEAVE":
        case 5:
            message.type = 5;
            break;
        case "EN_LOGOUT_TYPE_BY_GM":
        case 6:
            message.type = 6;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyLogout message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyLogout
     * @static
     * @param {CSNotifyLogout} message CSNotifyLogout
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyLogout.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.type = options.enums === String ? "EN_LOGOUT_TYPE_CONFLICT_BY_OTHER" : 0;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ENLogoutType[message.type] : message.type;
        return object;
    };

    /**
     * Converts this CSNotifyLogout to JSON.
     * @function toJSON
     * @memberof CSNotifyLogout
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyLogout.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyLogout;
})();

$root.CSRequestHeartBeat = (function() {

    /**
     * Properties of a CSRequestHeartBeat.
     * @exports ICSRequestHeartBeat
     * @interface ICSRequestHeartBeat
     */

    /**
     * Constructs a new CSRequestHeartBeat.
     * @exports CSRequestHeartBeat
     * @classdesc Represents a CSRequestHeartBeat.
     * @constructor
     * @param {ICSRequestHeartBeat=} [properties] Properties to set
     */
    function CSRequestHeartBeat(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CSRequestHeartBeat instance using the specified properties.
     * @function create
     * @memberof CSRequestHeartBeat
     * @static
     * @param {ICSRequestHeartBeat=} [properties] Properties to set
     * @returns {CSRequestHeartBeat} CSRequestHeartBeat instance
     */
    CSRequestHeartBeat.create = function create(properties) {
        return new CSRequestHeartBeat(properties);
    };

    /**
     * Encodes the specified CSRequestHeartBeat message. Does not implicitly {@link CSRequestHeartBeat.verify|verify} messages.
     * @function encode
     * @memberof CSRequestHeartBeat
     * @static
     * @param {ICSRequestHeartBeat} message CSRequestHeartBeat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestHeartBeat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CSRequestHeartBeat message, length delimited. Does not implicitly {@link CSRequestHeartBeat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestHeartBeat
     * @static
     * @param {ICSRequestHeartBeat} message CSRequestHeartBeat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestHeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestHeartBeat message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestHeartBeat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestHeartBeat} CSRequestHeartBeat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestHeartBeat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestHeartBeat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestHeartBeat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestHeartBeat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestHeartBeat} CSRequestHeartBeat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestHeartBeat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestHeartBeat message.
     * @function verify
     * @memberof CSRequestHeartBeat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestHeartBeat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CSRequestHeartBeat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestHeartBeat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestHeartBeat} CSRequestHeartBeat
     */
    CSRequestHeartBeat.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestHeartBeat)
            return object;
        return new $root.CSRequestHeartBeat();
    };

    /**
     * Creates a plain object from a CSRequestHeartBeat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestHeartBeat
     * @static
     * @param {CSRequestHeartBeat} message CSRequestHeartBeat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestHeartBeat.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CSRequestHeartBeat to JSON.
     * @function toJSON
     * @memberof CSRequestHeartBeat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestHeartBeat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestHeartBeat;
})();

$root.CSResponseHeartBeat = (function() {

    /**
     * Properties of a CSResponseHeartBeat.
     * @exports ICSResponseHeartBeat
     * @interface ICSResponseHeartBeat
     */

    /**
     * Constructs a new CSResponseHeartBeat.
     * @exports CSResponseHeartBeat
     * @classdesc Represents a CSResponseHeartBeat.
     * @constructor
     * @param {ICSResponseHeartBeat=} [properties] Properties to set
     */
    function CSResponseHeartBeat(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CSResponseHeartBeat instance using the specified properties.
     * @function create
     * @memberof CSResponseHeartBeat
     * @static
     * @param {ICSResponseHeartBeat=} [properties] Properties to set
     * @returns {CSResponseHeartBeat} CSResponseHeartBeat instance
     */
    CSResponseHeartBeat.create = function create(properties) {
        return new CSResponseHeartBeat(properties);
    };

    /**
     * Encodes the specified CSResponseHeartBeat message. Does not implicitly {@link CSResponseHeartBeat.verify|verify} messages.
     * @function encode
     * @memberof CSResponseHeartBeat
     * @static
     * @param {ICSResponseHeartBeat} message CSResponseHeartBeat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseHeartBeat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CSResponseHeartBeat message, length delimited. Does not implicitly {@link CSResponseHeartBeat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseHeartBeat
     * @static
     * @param {ICSResponseHeartBeat} message CSResponseHeartBeat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseHeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseHeartBeat message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseHeartBeat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseHeartBeat} CSResponseHeartBeat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseHeartBeat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseHeartBeat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseHeartBeat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseHeartBeat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseHeartBeat} CSResponseHeartBeat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseHeartBeat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseHeartBeat message.
     * @function verify
     * @memberof CSResponseHeartBeat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseHeartBeat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CSResponseHeartBeat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseHeartBeat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseHeartBeat} CSResponseHeartBeat
     */
    CSResponseHeartBeat.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseHeartBeat)
            return object;
        return new $root.CSResponseHeartBeat();
    };

    /**
     * Creates a plain object from a CSResponseHeartBeat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseHeartBeat
     * @static
     * @param {CSResponseHeartBeat} message CSResponseHeartBeat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseHeartBeat.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CSResponseHeartBeat to JSON.
     * @function toJSON
     * @memberof CSResponseHeartBeat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseHeartBeat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseHeartBeat;
})();

$root.CSResponseCommonError = (function() {

    /**
     * Properties of a CSResponseCommonError.
     * @exports ICSResponseCommonError
     * @interface ICSResponseCommonError
     * @property {ENMessageError} [result] CSResponseCommonError result
     * @property {number} [resultDetail] CSResponseCommonError resultDetail
     * @property {string} [reason] CSResponseCommonError reason
     */

    /**
     * Constructs a new CSResponseCommonError.
     * @exports CSResponseCommonError
     * @classdesc Represents a CSResponseCommonError.
     * @constructor
     * @param {ICSResponseCommonError=} [properties] Properties to set
     */
    function CSResponseCommonError(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseCommonError result.
     * @member {ENMessageError}result
     * @memberof CSResponseCommonError
     * @instance
     */
    CSResponseCommonError.prototype.result = 0;

    /**
     * CSResponseCommonError resultDetail.
     * @member {number}resultDetail
     * @memberof CSResponseCommonError
     * @instance
     */
    CSResponseCommonError.prototype.resultDetail = 0;

    /**
     * CSResponseCommonError reason.
     * @member {string}reason
     * @memberof CSResponseCommonError
     * @instance
     */
    CSResponseCommonError.prototype.reason = "";

    /**
     * Creates a new CSResponseCommonError instance using the specified properties.
     * @function create
     * @memberof CSResponseCommonError
     * @static
     * @param {ICSResponseCommonError=} [properties] Properties to set
     * @returns {CSResponseCommonError} CSResponseCommonError instance
     */
    CSResponseCommonError.create = function create(properties) {
        return new CSResponseCommonError(properties);
    };

    /**
     * Encodes the specified CSResponseCommonError message. Does not implicitly {@link CSResponseCommonError.verify|verify} messages.
     * @function encode
     * @memberof CSResponseCommonError
     * @static
     * @param {ICSResponseCommonError} message CSResponseCommonError message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseCommonError.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.resultDetail != null && message.hasOwnProperty("resultDetail"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.resultDetail);
        if (message.reason != null && message.hasOwnProperty("reason"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);
        return writer;
    };

    /**
     * Encodes the specified CSResponseCommonError message, length delimited. Does not implicitly {@link CSResponseCommonError.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseCommonError
     * @static
     * @param {ICSResponseCommonError} message CSResponseCommonError message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseCommonError.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseCommonError message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseCommonError
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseCommonError} CSResponseCommonError
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseCommonError.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseCommonError();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.resultDetail = reader.int32();
                break;
            case 3:
                message.reason = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseCommonError message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseCommonError
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseCommonError} CSResponseCommonError
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseCommonError.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseCommonError message.
     * @function verify
     * @memberof CSResponseCommonError
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseCommonError.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.resultDetail != null && message.hasOwnProperty("resultDetail"))
            if (!$util.isInteger(message.resultDetail))
                return "resultDetail: integer expected";
        if (message.reason != null && message.hasOwnProperty("reason"))
            if (!$util.isString(message.reason))
                return "reason: string expected";
        return null;
    };

    /**
     * Creates a CSResponseCommonError message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseCommonError
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseCommonError} CSResponseCommonError
     */
    CSResponseCommonError.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseCommonError)
            return object;
        var message = new $root.CSResponseCommonError();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.resultDetail != null)
            message.resultDetail = object.resultDetail | 0;
        if (object.reason != null)
            message.reason = String(object.reason);
        return message;
    };

    /**
     * Creates a plain object from a CSResponseCommonError message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseCommonError
     * @static
     * @param {CSResponseCommonError} message CSResponseCommonError
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseCommonError.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.resultDetail = 0;
            object.reason = "";
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.resultDetail != null && message.hasOwnProperty("resultDetail"))
            object.resultDetail = message.resultDetail;
        if (message.reason != null && message.hasOwnProperty("reason"))
            object.reason = message.reason;
        return object;
    };

    /**
     * Converts this CSResponseCommonError to JSON.
     * @function toJSON
     * @memberof CSResponseCommonError
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseCommonError.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseCommonError;
})();

$root.CSRequestCreateTable = (function() {

    /**
     * Properties of a CSRequestCreateTable.
     * @exports ICSRequestCreateTable
     * @interface ICSRequestCreateTable
     * @property {string} [name] CSRequestCreateTable name
     * @property {number|Long} [bigBlind] CSRequestCreateTable bigBlind
     * @property {number} [time] CSRequestCreateTable time
     * @property {boolean} [checkBuyIn] CSRequestCreateTable checkBuyIn
     * @property {number|Long} [uid] CSRequestCreateTable uid
     */

    /**
     * Constructs a new CSRequestCreateTable.
     * @exports CSRequestCreateTable
     * @classdesc Represents a CSRequestCreateTable.
     * @constructor
     * @param {ICSRequestCreateTable=} [properties] Properties to set
     */
    function CSRequestCreateTable(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestCreateTable name.
     * @member {string}name
     * @memberof CSRequestCreateTable
     * @instance
     */
    CSRequestCreateTable.prototype.name = "";

    /**
     * CSRequestCreateTable bigBlind.
     * @member {number|Long}bigBlind
     * @memberof CSRequestCreateTable
     * @instance
     */
    CSRequestCreateTable.prototype.bigBlind = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSRequestCreateTable time.
     * @member {number}time
     * @memberof CSRequestCreateTable
     * @instance
     */
    CSRequestCreateTable.prototype.time = 0;

    /**
     * CSRequestCreateTable checkBuyIn.
     * @member {boolean}checkBuyIn
     * @memberof CSRequestCreateTable
     * @instance
     */
    CSRequestCreateTable.prototype.checkBuyIn = false;

    /**
     * CSRequestCreateTable uid.
     * @member {number|Long}uid
     * @memberof CSRequestCreateTable
     * @instance
     */
    CSRequestCreateTable.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSRequestCreateTable instance using the specified properties.
     * @function create
     * @memberof CSRequestCreateTable
     * @static
     * @param {ICSRequestCreateTable=} [properties] Properties to set
     * @returns {CSRequestCreateTable} CSRequestCreateTable instance
     */
    CSRequestCreateTable.create = function create(properties) {
        return new CSRequestCreateTable(properties);
    };

    /**
     * Encodes the specified CSRequestCreateTable message. Does not implicitly {@link CSRequestCreateTable.verify|verify} messages.
     * @function encode
     * @memberof CSRequestCreateTable
     * @static
     * @param {ICSRequestCreateTable} message CSRequestCreateTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestCreateTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.bigBlind);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.time);
        if (message.checkBuyIn != null && message.hasOwnProperty("checkBuyIn"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.checkBuyIn);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.uid);
        return writer;
    };

    /**
     * Encodes the specified CSRequestCreateTable message, length delimited. Does not implicitly {@link CSRequestCreateTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestCreateTable
     * @static
     * @param {ICSRequestCreateTable} message CSRequestCreateTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestCreateTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestCreateTable message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestCreateTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestCreateTable} CSRequestCreateTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestCreateTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestCreateTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.name = reader.string();
                break;
            case 2:
                message.bigBlind = reader.uint64();
                break;
            case 3:
                message.time = reader.uint32();
                break;
            case 4:
                message.checkBuyIn = reader.bool();
                break;
            case 5:
                message.uid = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestCreateTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestCreateTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestCreateTable} CSRequestCreateTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestCreateTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestCreateTable message.
     * @function verify
     * @memberof CSRequestCreateTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestCreateTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            if (!$util.isInteger(message.bigBlind) && !(message.bigBlind && $util.isInteger(message.bigBlind.low) && $util.isInteger(message.bigBlind.high)))
                return "bigBlind: integer|Long expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        if (message.checkBuyIn != null && message.hasOwnProperty("checkBuyIn"))
            if (typeof message.checkBuyIn !== "boolean")
                return "checkBuyIn: boolean expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSRequestCreateTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestCreateTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestCreateTable} CSRequestCreateTable
     */
    CSRequestCreateTable.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestCreateTable)
            return object;
        var message = new $root.CSRequestCreateTable();
        if (object.name != null)
            message.name = String(object.name);
        if (object.bigBlind != null)
            if ($util.Long)
                (message.bigBlind = $util.Long.fromValue(object.bigBlind)).unsigned = true;
            else if (typeof object.bigBlind === "string")
                message.bigBlind = parseInt(object.bigBlind, 10);
            else if (typeof object.bigBlind === "number")
                message.bigBlind = object.bigBlind;
            else if (typeof object.bigBlind === "object")
                message.bigBlind = new $util.LongBits(object.bigBlind.low >>> 0, object.bigBlind.high >>> 0).toNumber(true);
        if (object.time != null)
            message.time = object.time >>> 0;
        if (object.checkBuyIn != null)
            message.checkBuyIn = Boolean(object.checkBuyIn);
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSRequestCreateTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestCreateTable
     * @static
     * @param {CSRequestCreateTable} message CSRequestCreateTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestCreateTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.name = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.bigBlind = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.bigBlind = options.longs === String ? "0" : 0;
            object.time = 0;
            object.checkBuyIn = false;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            if (typeof message.bigBlind === "number")
                object.bigBlind = options.longs === String ? String(message.bigBlind) : message.bigBlind;
            else
                object.bigBlind = options.longs === String ? $util.Long.prototype.toString.call(message.bigBlind) : options.longs === Number ? new $util.LongBits(message.bigBlind.low >>> 0, message.bigBlind.high >>> 0).toNumber(true) : message.bigBlind;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        if (message.checkBuyIn != null && message.hasOwnProperty("checkBuyIn"))
            object.checkBuyIn = message.checkBuyIn;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        return object;
    };

    /**
     * Converts this CSRequestCreateTable to JSON.
     * @function toJSON
     * @memberof CSRequestCreateTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestCreateTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestCreateTable;
})();

$root.CSResponseCreateTable = (function() {

    /**
     * Properties of a CSResponseCreateTable.
     * @exports ICSResponseCreateTable
     * @interface ICSResponseCreateTable
     * @property {ENMessageError} [result] CSResponseCreateTable result
     * @property {string} [svrIp] CSResponseCreateTable svrIp
     * @property {number} [svrPort] CSResponseCreateTable svrPort
     * @property {number} [tableId] CSResponseCreateTable tableId
     */

    /**
     * Constructs a new CSResponseCreateTable.
     * @exports CSResponseCreateTable
     * @classdesc Represents a CSResponseCreateTable.
     * @constructor
     * @param {ICSResponseCreateTable=} [properties] Properties to set
     */
    function CSResponseCreateTable(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseCreateTable result.
     * @member {ENMessageError}result
     * @memberof CSResponseCreateTable
     * @instance
     */
    CSResponseCreateTable.prototype.result = 0;

    /**
     * CSResponseCreateTable svrIp.
     * @member {string}svrIp
     * @memberof CSResponseCreateTable
     * @instance
     */
    CSResponseCreateTable.prototype.svrIp = "";

    /**
     * CSResponseCreateTable svrPort.
     * @member {number}svrPort
     * @memberof CSResponseCreateTable
     * @instance
     */
    CSResponseCreateTable.prototype.svrPort = 0;

    /**
     * CSResponseCreateTable tableId.
     * @member {number}tableId
     * @memberof CSResponseCreateTable
     * @instance
     */
    CSResponseCreateTable.prototype.tableId = 0;

    /**
     * Creates a new CSResponseCreateTable instance using the specified properties.
     * @function create
     * @memberof CSResponseCreateTable
     * @static
     * @param {ICSResponseCreateTable=} [properties] Properties to set
     * @returns {CSResponseCreateTable} CSResponseCreateTable instance
     */
    CSResponseCreateTable.create = function create(properties) {
        return new CSResponseCreateTable(properties);
    };

    /**
     * Encodes the specified CSResponseCreateTable message. Does not implicitly {@link CSResponseCreateTable.verify|verify} messages.
     * @function encode
     * @memberof CSResponseCreateTable
     * @static
     * @param {ICSResponseCreateTable} message CSResponseCreateTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseCreateTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.svrIp != null && message.hasOwnProperty("svrIp"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.svrIp);
        if (message.svrPort != null && message.hasOwnProperty("svrPort"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.svrPort);
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.tableId);
        return writer;
    };

    /**
     * Encodes the specified CSResponseCreateTable message, length delimited. Does not implicitly {@link CSResponseCreateTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseCreateTable
     * @static
     * @param {ICSResponseCreateTable} message CSResponseCreateTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseCreateTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseCreateTable message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseCreateTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseCreateTable} CSResponseCreateTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseCreateTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseCreateTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.svrIp = reader.string();
                break;
            case 3:
                message.svrPort = reader.uint32();
                break;
            case 4:
                message.tableId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseCreateTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseCreateTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseCreateTable} CSResponseCreateTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseCreateTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseCreateTable message.
     * @function verify
     * @memberof CSResponseCreateTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseCreateTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.svrIp != null && message.hasOwnProperty("svrIp"))
            if (!$util.isString(message.svrIp))
                return "svrIp: string expected";
        if (message.svrPort != null && message.hasOwnProperty("svrPort"))
            if (!$util.isInteger(message.svrPort))
                return "svrPort: integer expected";
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        return null;
    };

    /**
     * Creates a CSResponseCreateTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseCreateTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseCreateTable} CSResponseCreateTable
     */
    CSResponseCreateTable.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseCreateTable)
            return object;
        var message = new $root.CSResponseCreateTable();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.svrIp != null)
            message.svrIp = String(object.svrIp);
        if (object.svrPort != null)
            message.svrPort = object.svrPort >>> 0;
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSResponseCreateTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseCreateTable
     * @static
     * @param {CSResponseCreateTable} message CSResponseCreateTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseCreateTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.svrIp = "";
            object.svrPort = 0;
            object.tableId = 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.svrIp != null && message.hasOwnProperty("svrIp"))
            object.svrIp = message.svrIp;
        if (message.svrPort != null && message.hasOwnProperty("svrPort"))
            object.svrPort = message.svrPort;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        return object;
    };

    /**
     * Converts this CSResponseCreateTable to JSON.
     * @function toJSON
     * @memberof CSResponseCreateTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseCreateTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseCreateTable;
})();

$root.CSTableInfo = (function() {

    /**
     * Properties of a CSTableInfo.
     * @exports ICSTableInfo
     * @interface ICSTableInfo
     * @property {string} [name] CSTableInfo name
     * @property {number|Long} [smallBlind] CSTableInfo smallBlind
     * @property {number|Long} [bigBlind] CSTableInfo bigBlind
     * @property {number} [playerNum] CSTableInfo playerNum
     * @property {number} [maxPlayer] CSTableInfo maxPlayer
     * @property {number} [time] CSTableInfo time
     * @property {number} [createTime] CSTableInfo createTime
     * @property {number} [startTime] CSTableInfo startTime
     * @property {string} [clubName] CSTableInfo clubName
     * @property {number} [tableId] CSTableInfo tableId
     * @property {number|Long} [innerId] CSTableInfo innerId
     * @property {string} [svrIp] CSTableInfo svrIp
     * @property {number} [svrPort] CSTableInfo svrPort
     * @property {ENTableType} [tableType] CSTableInfo tableType
     * @property {number|Long} [ownerUid] CSTableInfo ownerUid
     * @property {number|Long} [sngServiceFee] CSTableInfo sngServiceFee
     * @property {number|Long} [sngSignupFee] CSTableInfo sngSignupFee
     * @property {number} [sngInitScore] CSTableInfo sngInitScore
     * @property {number|Long} [sngRaiseBlindInterval] CSTableInfo sngRaiseBlindInterval
     * @property {Array.<number|Long>} [sngSignupPlayerIds] CSTableInfo sngSignupPlayerIds
     * @property {Array.<IPBReward>} [sngRewards] CSTableInfo sngRewards
     * @property {string} [sngIcon] CSTableInfo sngIcon
     * @property {number} [sngCurSmallBlind] CSTableInfo sngCurSmallBlind
     * @property {number} [sngRaiseBlindIndex] CSTableInfo sngRaiseBlindIndex
     * @property {ENSngSignUpFeeType} [sngServiceFeeType] CSTableInfo sngServiceFeeType
     * @property {ENSngSignUpFeeType} [sngSignupFeeType] CSTableInfo sngSignupFeeType
     * @property {number} [endTime] CSTableInfo endTime
     * @property {number} [minPlayer] CSTableInfo minPlayer
     * @property {number} [showTime] CSTableInfo showTime
     * @property {ENTableSubType} [subTableType] CSTableInfo subTableType
     * @property {ENTrainingTableLevel} [trainingTableLevel] CSTableInfo trainingTableLevel
     * @property {Array.<ICSTablePlayer>} [players] CSTableInfo players
     */

    /**
     * Constructs a new CSTableInfo.
     * @exports CSTableInfo
     * @classdesc Represents a CSTableInfo.
     * @constructor
     * @param {ICSTableInfo=} [properties] Properties to set
     */
    function CSTableInfo(properties) {
        this.sngSignupPlayerIds = [];
        this.sngRewards = [];
        this.players = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSTableInfo name.
     * @member {string}name
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.name = "";

    /**
     * CSTableInfo smallBlind.
     * @member {number|Long}smallBlind
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.smallBlind = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableInfo bigBlind.
     * @member {number|Long}bigBlind
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.bigBlind = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableInfo playerNum.
     * @member {number}playerNum
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.playerNum = 0;

    /**
     * CSTableInfo maxPlayer.
     * @member {number}maxPlayer
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.maxPlayer = 0;

    /**
     * CSTableInfo time.
     * @member {number}time
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.time = 0;

    /**
     * CSTableInfo createTime.
     * @member {number}createTime
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.createTime = 0;

    /**
     * CSTableInfo startTime.
     * @member {number}startTime
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.startTime = 0;

    /**
     * CSTableInfo clubName.
     * @member {string}clubName
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.clubName = "";

    /**
     * CSTableInfo tableId.
     * @member {number}tableId
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.tableId = 0;

    /**
     * CSTableInfo innerId.
     * @member {number|Long}innerId
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.innerId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableInfo svrIp.
     * @member {string}svrIp
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.svrIp = "";

    /**
     * CSTableInfo svrPort.
     * @member {number}svrPort
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.svrPort = 0;

    /**
     * CSTableInfo tableType.
     * @member {ENTableType}tableType
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.tableType = 0;

    /**
     * CSTableInfo ownerUid.
     * @member {number|Long}ownerUid
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.ownerUid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableInfo sngServiceFee.
     * @member {number|Long}sngServiceFee
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngServiceFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableInfo sngSignupFee.
     * @member {number|Long}sngSignupFee
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngSignupFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableInfo sngInitScore.
     * @member {number}sngInitScore
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngInitScore = 0;

    /**
     * CSTableInfo sngRaiseBlindInterval.
     * @member {number|Long}sngRaiseBlindInterval
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngRaiseBlindInterval = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableInfo sngSignupPlayerIds.
     * @member {Array.<number|Long>}sngSignupPlayerIds
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngSignupPlayerIds = $util.emptyArray;

    /**
     * CSTableInfo sngRewards.
     * @member {Array.<IPBReward>}sngRewards
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngRewards = $util.emptyArray;

    /**
     * CSTableInfo sngIcon.
     * @member {string}sngIcon
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngIcon = "";

    /**
     * CSTableInfo sngCurSmallBlind.
     * @member {number}sngCurSmallBlind
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngCurSmallBlind = 0;

    /**
     * CSTableInfo sngRaiseBlindIndex.
     * @member {number}sngRaiseBlindIndex
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngRaiseBlindIndex = 0;

    /**
     * CSTableInfo sngServiceFeeType.
     * @member {ENSngSignUpFeeType}sngServiceFeeType
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngServiceFeeType = 0;

    /**
     * CSTableInfo sngSignupFeeType.
     * @member {ENSngSignUpFeeType}sngSignupFeeType
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.sngSignupFeeType = 0;

    /**
     * CSTableInfo endTime.
     * @member {number}endTime
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.endTime = 0;

    /**
     * CSTableInfo minPlayer.
     * @member {number}minPlayer
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.minPlayer = 0;

    /**
     * CSTableInfo showTime.
     * @member {number}showTime
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.showTime = 0;

    /**
     * CSTableInfo subTableType.
     * @member {ENTableSubType}subTableType
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.subTableType = 0;

    /**
     * CSTableInfo trainingTableLevel.
     * @member {ENTrainingTableLevel}trainingTableLevel
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.trainingTableLevel = 0;

    /**
     * CSTableInfo players.
     * @member {Array.<ICSTablePlayer>}players
     * @memberof CSTableInfo
     * @instance
     */
    CSTableInfo.prototype.players = $util.emptyArray;

    /**
     * Creates a new CSTableInfo instance using the specified properties.
     * @function create
     * @memberof CSTableInfo
     * @static
     * @param {ICSTableInfo=} [properties] Properties to set
     * @returns {CSTableInfo} CSTableInfo instance
     */
    CSTableInfo.create = function create(properties) {
        return new CSTableInfo(properties);
    };

    /**
     * Encodes the specified CSTableInfo message. Does not implicitly {@link CSTableInfo.verify|verify} messages.
     * @function encode
     * @memberof CSTableInfo
     * @static
     * @param {ICSTableInfo} message CSTableInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTableInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.smallBlind);
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.bigBlind);
        if (message.playerNum != null && message.hasOwnProperty("playerNum"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.playerNum);
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.maxPlayer);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.time);
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.createTime);
        if (message.clubName != null && message.hasOwnProperty("clubName"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.clubName);
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.tableId);
        if (message.svrIp != null && message.hasOwnProperty("svrIp"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.svrIp);
        if (message.svrPort != null && message.hasOwnProperty("svrPort"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.svrPort);
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.startTime);
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.tableType);
        if (message.ownerUid != null && message.hasOwnProperty("ownerUid"))
            writer.uint32(/* id 14, wireType 0 =*/112).uint64(message.ownerUid);
        if (message.sngServiceFee != null && message.hasOwnProperty("sngServiceFee"))
            writer.uint32(/* id 15, wireType 0 =*/120).uint64(message.sngServiceFee);
        if (message.sngSignupFee != null && message.hasOwnProperty("sngSignupFee"))
            writer.uint32(/* id 16, wireType 0 =*/128).uint64(message.sngSignupFee);
        if (message.sngInitScore != null && message.hasOwnProperty("sngInitScore"))
            writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.sngInitScore);
        if (message.sngRaiseBlindInterval != null && message.hasOwnProperty("sngRaiseBlindInterval"))
            writer.uint32(/* id 18, wireType 0 =*/144).uint64(message.sngRaiseBlindInterval);
        if (message.sngSignupPlayerIds != null && message.sngSignupPlayerIds.length)
            for (var i = 0; i < message.sngSignupPlayerIds.length; ++i)
                writer.uint32(/* id 19, wireType 0 =*/152).uint64(message.sngSignupPlayerIds[i]);
        if (message.sngRewards != null && message.sngRewards.length)
            for (var i = 0; i < message.sngRewards.length; ++i)
                $root.PBReward.encode(message.sngRewards[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.sngCurSmallBlind != null && message.hasOwnProperty("sngCurSmallBlind"))
            writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.sngCurSmallBlind);
        if (message.sngIcon != null && message.hasOwnProperty("sngIcon"))
            writer.uint32(/* id 22, wireType 2 =*/178).string(message.sngIcon);
        if (message.sngRaiseBlindIndex != null && message.hasOwnProperty("sngRaiseBlindIndex"))
            writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.sngRaiseBlindIndex);
        if (message.sngServiceFeeType != null && message.hasOwnProperty("sngServiceFeeType"))
            writer.uint32(/* id 24, wireType 0 =*/192).int32(message.sngServiceFeeType);
        if (message.sngSignupFeeType != null && message.hasOwnProperty("sngSignupFeeType"))
            writer.uint32(/* id 25, wireType 0 =*/200).int32(message.sngSignupFeeType);
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.endTime);
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.minPlayer);
        if (message.showTime != null && message.hasOwnProperty("showTime"))
            writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.showTime);
        if (message.subTableType != null && message.hasOwnProperty("subTableType"))
            writer.uint32(/* id 29, wireType 0 =*/232).int32(message.subTableType);
        if (message.trainingTableLevel != null && message.hasOwnProperty("trainingTableLevel"))
            writer.uint32(/* id 30, wireType 0 =*/240).int32(message.trainingTableLevel);
        if (message.innerId != null && message.hasOwnProperty("innerId"))
            writer.uint32(/* id 31, wireType 0 =*/248).uint64(message.innerId);
        if (message.players != null && message.players.length)
            for (var i = 0; i < message.players.length; ++i)
                $root.CSTablePlayer.encode(message.players[i], writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSTableInfo message, length delimited. Does not implicitly {@link CSTableInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSTableInfo
     * @static
     * @param {ICSTableInfo} message CSTableInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTableInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSTableInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSTableInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSTableInfo} CSTableInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTableInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSTableInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.name = reader.string();
                break;
            case 2:
                message.smallBlind = reader.uint64();
                break;
            case 3:
                message.bigBlind = reader.uint64();
                break;
            case 4:
                message.playerNum = reader.uint32();
                break;
            case 5:
                message.maxPlayer = reader.uint32();
                break;
            case 6:
                message.time = reader.uint32();
                break;
            case 7:
                message.createTime = reader.uint32();
                break;
            case 12:
                message.startTime = reader.uint32();
                break;
            case 8:
                message.clubName = reader.string();
                break;
            case 9:
                message.tableId = reader.uint32();
                break;
            case 31:
                message.innerId = reader.uint64();
                break;
            case 10:
                message.svrIp = reader.string();
                break;
            case 11:
                message.svrPort = reader.uint32();
                break;
            case 13:
                message.tableType = reader.int32();
                break;
            case 14:
                message.ownerUid = reader.uint64();
                break;
            case 15:
                message.sngServiceFee = reader.uint64();
                break;
            case 16:
                message.sngSignupFee = reader.uint64();
                break;
            case 17:
                message.sngInitScore = reader.uint32();
                break;
            case 18:
                message.sngRaiseBlindInterval = reader.uint64();
                break;
            case 19:
                if (!(message.sngSignupPlayerIds && message.sngSignupPlayerIds.length))
                    message.sngSignupPlayerIds = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.sngSignupPlayerIds.push(reader.uint64());
                } else
                    message.sngSignupPlayerIds.push(reader.uint64());
                break;
            case 20:
                if (!(message.sngRewards && message.sngRewards.length))
                    message.sngRewards = [];
                message.sngRewards.push($root.PBReward.decode(reader, reader.uint32()));
                break;
            case 22:
                message.sngIcon = reader.string();
                break;
            case 21:
                message.sngCurSmallBlind = reader.uint32();
                break;
            case 23:
                message.sngRaiseBlindIndex = reader.uint32();
                break;
            case 24:
                message.sngServiceFeeType = reader.int32();
                break;
            case 25:
                message.sngSignupFeeType = reader.int32();
                break;
            case 26:
                message.endTime = reader.uint32();
                break;
            case 27:
                message.minPlayer = reader.uint32();
                break;
            case 28:
                message.showTime = reader.uint32();
                break;
            case 29:
                message.subTableType = reader.int32();
                break;
            case 30:
                message.trainingTableLevel = reader.int32();
                break;
            case 32:
                if (!(message.players && message.players.length))
                    message.players = [];
                message.players.push($root.CSTablePlayer.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSTableInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSTableInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSTableInfo} CSTableInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTableInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSTableInfo message.
     * @function verify
     * @memberof CSTableInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSTableInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            if (!$util.isInteger(message.smallBlind) && !(message.smallBlind && $util.isInteger(message.smallBlind.low) && $util.isInteger(message.smallBlind.high)))
                return "smallBlind: integer|Long expected";
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            if (!$util.isInteger(message.bigBlind) && !(message.bigBlind && $util.isInteger(message.bigBlind.low) && $util.isInteger(message.bigBlind.high)))
                return "bigBlind: integer|Long expected";
        if (message.playerNum != null && message.hasOwnProperty("playerNum"))
            if (!$util.isInteger(message.playerNum))
                return "playerNum: integer expected";
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            if (!$util.isInteger(message.maxPlayer))
                return "maxPlayer: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            if (!$util.isInteger(message.createTime))
                return "createTime: integer expected";
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (!$util.isInteger(message.startTime))
                return "startTime: integer expected";
        if (message.clubName != null && message.hasOwnProperty("clubName"))
            if (!$util.isString(message.clubName))
                return "clubName: string expected";
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        if (message.innerId != null && message.hasOwnProperty("innerId"))
            if (!$util.isInteger(message.innerId) && !(message.innerId && $util.isInteger(message.innerId.low) && $util.isInteger(message.innerId.high)))
                return "innerId: integer|Long expected";
        if (message.svrIp != null && message.hasOwnProperty("svrIp"))
            if (!$util.isString(message.svrIp))
                return "svrIp: string expected";
        if (message.svrPort != null && message.hasOwnProperty("svrPort"))
            if (!$util.isInteger(message.svrPort))
                return "svrPort: integer expected";
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            switch (message.tableType) {
            default:
                return "tableType: enum value expected";
            case 0:
            case 100:
            case 200:
                break;
            }
        if (message.ownerUid != null && message.hasOwnProperty("ownerUid"))
            if (!$util.isInteger(message.ownerUid) && !(message.ownerUid && $util.isInteger(message.ownerUid.low) && $util.isInteger(message.ownerUid.high)))
                return "ownerUid: integer|Long expected";
        if (message.sngServiceFee != null && message.hasOwnProperty("sngServiceFee"))
            if (!$util.isInteger(message.sngServiceFee) && !(message.sngServiceFee && $util.isInteger(message.sngServiceFee.low) && $util.isInteger(message.sngServiceFee.high)))
                return "sngServiceFee: integer|Long expected";
        if (message.sngSignupFee != null && message.hasOwnProperty("sngSignupFee"))
            if (!$util.isInteger(message.sngSignupFee) && !(message.sngSignupFee && $util.isInteger(message.sngSignupFee.low) && $util.isInteger(message.sngSignupFee.high)))
                return "sngSignupFee: integer|Long expected";
        if (message.sngInitScore != null && message.hasOwnProperty("sngInitScore"))
            if (!$util.isInteger(message.sngInitScore))
                return "sngInitScore: integer expected";
        if (message.sngRaiseBlindInterval != null && message.hasOwnProperty("sngRaiseBlindInterval"))
            if (!$util.isInteger(message.sngRaiseBlindInterval) && !(message.sngRaiseBlindInterval && $util.isInteger(message.sngRaiseBlindInterval.low) && $util.isInteger(message.sngRaiseBlindInterval.high)))
                return "sngRaiseBlindInterval: integer|Long expected";
        if (message.sngSignupPlayerIds != null && message.hasOwnProperty("sngSignupPlayerIds")) {
            if (!Array.isArray(message.sngSignupPlayerIds))
                return "sngSignupPlayerIds: array expected";
            for (var i = 0; i < message.sngSignupPlayerIds.length; ++i)
                if (!$util.isInteger(message.sngSignupPlayerIds[i]) && !(message.sngSignupPlayerIds[i] && $util.isInteger(message.sngSignupPlayerIds[i].low) && $util.isInteger(message.sngSignupPlayerIds[i].high)))
                    return "sngSignupPlayerIds: integer|Long[] expected";
        }
        if (message.sngRewards != null && message.hasOwnProperty("sngRewards")) {
            if (!Array.isArray(message.sngRewards))
                return "sngRewards: array expected";
            for (var i = 0; i < message.sngRewards.length; ++i) {
                var error = $root.PBReward.verify(message.sngRewards[i]);
                if (error)
                    return "sngRewards." + error;
            }
        }
        if (message.sngIcon != null && message.hasOwnProperty("sngIcon"))
            if (!$util.isString(message.sngIcon))
                return "sngIcon: string expected";
        if (message.sngCurSmallBlind != null && message.hasOwnProperty("sngCurSmallBlind"))
            if (!$util.isInteger(message.sngCurSmallBlind))
                return "sngCurSmallBlind: integer expected";
        if (message.sngRaiseBlindIndex != null && message.hasOwnProperty("sngRaiseBlindIndex"))
            if (!$util.isInteger(message.sngRaiseBlindIndex))
                return "sngRaiseBlindIndex: integer expected";
        if (message.sngServiceFeeType != null && message.hasOwnProperty("sngServiceFeeType"))
            switch (message.sngServiceFeeType) {
            default:
                return "sngServiceFeeType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.sngSignupFeeType != null && message.hasOwnProperty("sngSignupFeeType"))
            switch (message.sngSignupFeeType) {
            default:
                return "sngSignupFeeType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (!$util.isInteger(message.endTime))
                return "endTime: integer expected";
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            if (!$util.isInteger(message.minPlayer))
                return "minPlayer: integer expected";
        if (message.showTime != null && message.hasOwnProperty("showTime"))
            if (!$util.isInteger(message.showTime))
                return "showTime: integer expected";
        if (message.subTableType != null && message.hasOwnProperty("subTableType"))
            switch (message.subTableType) {
            default:
                return "subTableType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 4:
                break;
            }
        if (message.trainingTableLevel != null && message.hasOwnProperty("trainingTableLevel"))
            switch (message.trainingTableLevel) {
            default:
                return "trainingTableLevel: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.players != null && message.hasOwnProperty("players")) {
            if (!Array.isArray(message.players))
                return "players: array expected";
            for (var i = 0; i < message.players.length; ++i) {
                error = $root.CSTablePlayer.verify(message.players[i]);
                if (error)
                    return "players." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSTableInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSTableInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSTableInfo} CSTableInfo
     */
    CSTableInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSTableInfo)
            return object;
        var message = new $root.CSTableInfo();
        if (object.name != null)
            message.name = String(object.name);
        if (object.smallBlind != null)
            if ($util.Long)
                (message.smallBlind = $util.Long.fromValue(object.smallBlind)).unsigned = true;
            else if (typeof object.smallBlind === "string")
                message.smallBlind = parseInt(object.smallBlind, 10);
            else if (typeof object.smallBlind === "number")
                message.smallBlind = object.smallBlind;
            else if (typeof object.smallBlind === "object")
                message.smallBlind = new $util.LongBits(object.smallBlind.low >>> 0, object.smallBlind.high >>> 0).toNumber(true);
        if (object.bigBlind != null)
            if ($util.Long)
                (message.bigBlind = $util.Long.fromValue(object.bigBlind)).unsigned = true;
            else if (typeof object.bigBlind === "string")
                message.bigBlind = parseInt(object.bigBlind, 10);
            else if (typeof object.bigBlind === "number")
                message.bigBlind = object.bigBlind;
            else if (typeof object.bigBlind === "object")
                message.bigBlind = new $util.LongBits(object.bigBlind.low >>> 0, object.bigBlind.high >>> 0).toNumber(true);
        if (object.playerNum != null)
            message.playerNum = object.playerNum >>> 0;
        if (object.maxPlayer != null)
            message.maxPlayer = object.maxPlayer >>> 0;
        if (object.time != null)
            message.time = object.time >>> 0;
        if (object.createTime != null)
            message.createTime = object.createTime >>> 0;
        if (object.startTime != null)
            message.startTime = object.startTime >>> 0;
        if (object.clubName != null)
            message.clubName = String(object.clubName);
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        if (object.innerId != null)
            if ($util.Long)
                (message.innerId = $util.Long.fromValue(object.innerId)).unsigned = true;
            else if (typeof object.innerId === "string")
                message.innerId = parseInt(object.innerId, 10);
            else if (typeof object.innerId === "number")
                message.innerId = object.innerId;
            else if (typeof object.innerId === "object")
                message.innerId = new $util.LongBits(object.innerId.low >>> 0, object.innerId.high >>> 0).toNumber(true);
        if (object.svrIp != null)
            message.svrIp = String(object.svrIp);
        if (object.svrPort != null)
            message.svrPort = object.svrPort >>> 0;
        switch (object.tableType) {
        case "EN_TABLE_CREATE_NORMAL":
        case 0:
            message.tableType = 0;
            break;
        case "EN_TABLE_SNG_TIME":
        case 100:
            message.tableType = 100;
            break;
        case "EN_TABLE_TRAINING_TIME":
        case 200:
            message.tableType = 200;
            break;
        }
        if (object.ownerUid != null)
            if ($util.Long)
                (message.ownerUid = $util.Long.fromValue(object.ownerUid)).unsigned = true;
            else if (typeof object.ownerUid === "string")
                message.ownerUid = parseInt(object.ownerUid, 10);
            else if (typeof object.ownerUid === "number")
                message.ownerUid = object.ownerUid;
            else if (typeof object.ownerUid === "object")
                message.ownerUid = new $util.LongBits(object.ownerUid.low >>> 0, object.ownerUid.high >>> 0).toNumber(true);
        if (object.sngServiceFee != null)
            if ($util.Long)
                (message.sngServiceFee = $util.Long.fromValue(object.sngServiceFee)).unsigned = true;
            else if (typeof object.sngServiceFee === "string")
                message.sngServiceFee = parseInt(object.sngServiceFee, 10);
            else if (typeof object.sngServiceFee === "number")
                message.sngServiceFee = object.sngServiceFee;
            else if (typeof object.sngServiceFee === "object")
                message.sngServiceFee = new $util.LongBits(object.sngServiceFee.low >>> 0, object.sngServiceFee.high >>> 0).toNumber(true);
        if (object.sngSignupFee != null)
            if ($util.Long)
                (message.sngSignupFee = $util.Long.fromValue(object.sngSignupFee)).unsigned = true;
            else if (typeof object.sngSignupFee === "string")
                message.sngSignupFee = parseInt(object.sngSignupFee, 10);
            else if (typeof object.sngSignupFee === "number")
                message.sngSignupFee = object.sngSignupFee;
            else if (typeof object.sngSignupFee === "object")
                message.sngSignupFee = new $util.LongBits(object.sngSignupFee.low >>> 0, object.sngSignupFee.high >>> 0).toNumber(true);
        if (object.sngInitScore != null)
            message.sngInitScore = object.sngInitScore >>> 0;
        if (object.sngRaiseBlindInterval != null)
            if ($util.Long)
                (message.sngRaiseBlindInterval = $util.Long.fromValue(object.sngRaiseBlindInterval)).unsigned = true;
            else if (typeof object.sngRaiseBlindInterval === "string")
                message.sngRaiseBlindInterval = parseInt(object.sngRaiseBlindInterval, 10);
            else if (typeof object.sngRaiseBlindInterval === "number")
                message.sngRaiseBlindInterval = object.sngRaiseBlindInterval;
            else if (typeof object.sngRaiseBlindInterval === "object")
                message.sngRaiseBlindInterval = new $util.LongBits(object.sngRaiseBlindInterval.low >>> 0, object.sngRaiseBlindInterval.high >>> 0).toNumber(true);
        if (object.sngSignupPlayerIds) {
            if (!Array.isArray(object.sngSignupPlayerIds))
                throw TypeError(".CSTableInfo.sngSignupPlayerIds: array expected");
            message.sngSignupPlayerIds = [];
            for (var i = 0; i < object.sngSignupPlayerIds.length; ++i)
                if ($util.Long)
                    (message.sngSignupPlayerIds[i] = $util.Long.fromValue(object.sngSignupPlayerIds[i])).unsigned = true;
                else if (typeof object.sngSignupPlayerIds[i] === "string")
                    message.sngSignupPlayerIds[i] = parseInt(object.sngSignupPlayerIds[i], 10);
                else if (typeof object.sngSignupPlayerIds[i] === "number")
                    message.sngSignupPlayerIds[i] = object.sngSignupPlayerIds[i];
                else if (typeof object.sngSignupPlayerIds[i] === "object")
                    message.sngSignupPlayerIds[i] = new $util.LongBits(object.sngSignupPlayerIds[i].low >>> 0, object.sngSignupPlayerIds[i].high >>> 0).toNumber(true);
        }
        if (object.sngRewards) {
            if (!Array.isArray(object.sngRewards))
                throw TypeError(".CSTableInfo.sngRewards: array expected");
            message.sngRewards = [];
            for (var i = 0; i < object.sngRewards.length; ++i) {
                if (typeof object.sngRewards[i] !== "object")
                    throw TypeError(".CSTableInfo.sngRewards: object expected");
                message.sngRewards[i] = $root.PBReward.fromObject(object.sngRewards[i]);
            }
        }
        if (object.sngIcon != null)
            message.sngIcon = String(object.sngIcon);
        if (object.sngCurSmallBlind != null)
            message.sngCurSmallBlind = object.sngCurSmallBlind >>> 0;
        if (object.sngRaiseBlindIndex != null)
            message.sngRaiseBlindIndex = object.sngRaiseBlindIndex >>> 0;
        switch (object.sngServiceFeeType) {
        case "EN_SNG_FEE_TYPE_CHIP":
        case 0:
            message.sngServiceFeeType = 0;
            break;
        case "EN_SNG_FEE_TYPE_DIAMOND":
        case 1:
            message.sngServiceFeeType = 1;
            break;
        case "EN_SNG_FEE_TYPE_NONE":
        case 2:
            message.sngServiceFeeType = 2;
            break;
        }
        switch (object.sngSignupFeeType) {
        case "EN_SNG_FEE_TYPE_CHIP":
        case 0:
            message.sngSignupFeeType = 0;
            break;
        case "EN_SNG_FEE_TYPE_DIAMOND":
        case 1:
            message.sngSignupFeeType = 1;
            break;
        case "EN_SNG_FEE_TYPE_NONE":
        case 2:
            message.sngSignupFeeType = 2;
            break;
        }
        if (object.endTime != null)
            message.endTime = object.endTime >>> 0;
        if (object.minPlayer != null)
            message.minPlayer = object.minPlayer >>> 0;
        if (object.showTime != null)
            message.showTime = object.showTime >>> 0;
        switch (object.subTableType) {
        case "EN_TABLE_SUB_TYPE_UNKNOWN":
        case 0:
            message.subTableType = 0;
            break;
        case "EN_TABLE_SUB_TYPE_RECOMMEND":
        case 1:
            message.subTableType = 1;
            break;
        case "EN_TABLE_SUB_TYPE_GOLDEN":
        case 2:
            message.subTableType = 2;
            break;
        case "EN_TABLE_SUB_TYPE_FRAGMENT":
        case 4:
            message.subTableType = 4;
            break;
        }
        switch (object.trainingTableLevel) {
        case "EN_TRAINING_TABLE_LEVEL_JUNIOR":
        case 0:
            message.trainingTableLevel = 0;
            break;
        case "EN_TRAINING_TABLE_LEVEL_MIDDLE":
        case 1:
            message.trainingTableLevel = 1;
            break;
        case "EN_TRAINING_TABLE_LEVEL_SENIOR":
        case 2:
            message.trainingTableLevel = 2;
            break;
        }
        if (object.players) {
            if (!Array.isArray(object.players))
                throw TypeError(".CSTableInfo.players: array expected");
            message.players = [];
            for (var i = 0; i < object.players.length; ++i) {
                if (typeof object.players[i] !== "object")
                    throw TypeError(".CSTableInfo.players: object expected");
                message.players[i] = $root.CSTablePlayer.fromObject(object.players[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSTableInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSTableInfo
     * @static
     * @param {CSTableInfo} message CSTableInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSTableInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.sngSignupPlayerIds = [];
            object.sngRewards = [];
            object.players = [];
        }
        if (options.defaults) {
            object.name = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.smallBlind = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.smallBlind = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.bigBlind = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.bigBlind = options.longs === String ? "0" : 0;
            object.playerNum = 0;
            object.maxPlayer = 0;
            object.time = 0;
            object.createTime = 0;
            object.clubName = "";
            object.tableId = 0;
            object.svrIp = "";
            object.svrPort = 0;
            object.startTime = 0;
            object.tableType = options.enums === String ? "EN_TABLE_CREATE_NORMAL" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ownerUid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ownerUid = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.sngServiceFee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.sngServiceFee = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.sngSignupFee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.sngSignupFee = options.longs === String ? "0" : 0;
            object.sngInitScore = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.sngRaiseBlindInterval = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.sngRaiseBlindInterval = options.longs === String ? "0" : 0;
            object.sngCurSmallBlind = 0;
            object.sngIcon = "";
            object.sngRaiseBlindIndex = 0;
            object.sngServiceFeeType = options.enums === String ? "EN_SNG_FEE_TYPE_CHIP" : 0;
            object.sngSignupFeeType = options.enums === String ? "EN_SNG_FEE_TYPE_CHIP" : 0;
            object.endTime = 0;
            object.minPlayer = 0;
            object.showTime = 0;
            object.subTableType = options.enums === String ? "EN_TABLE_SUB_TYPE_UNKNOWN" : 0;
            object.trainingTableLevel = options.enums === String ? "EN_TRAINING_TABLE_LEVEL_JUNIOR" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.innerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.innerId = options.longs === String ? "0" : 0;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            if (typeof message.smallBlind === "number")
                object.smallBlind = options.longs === String ? String(message.smallBlind) : message.smallBlind;
            else
                object.smallBlind = options.longs === String ? $util.Long.prototype.toString.call(message.smallBlind) : options.longs === Number ? new $util.LongBits(message.smallBlind.low >>> 0, message.smallBlind.high >>> 0).toNumber(true) : message.smallBlind;
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            if (typeof message.bigBlind === "number")
                object.bigBlind = options.longs === String ? String(message.bigBlind) : message.bigBlind;
            else
                object.bigBlind = options.longs === String ? $util.Long.prototype.toString.call(message.bigBlind) : options.longs === Number ? new $util.LongBits(message.bigBlind.low >>> 0, message.bigBlind.high >>> 0).toNumber(true) : message.bigBlind;
        if (message.playerNum != null && message.hasOwnProperty("playerNum"))
            object.playerNum = message.playerNum;
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            object.maxPlayer = message.maxPlayer;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            object.createTime = message.createTime;
        if (message.clubName != null && message.hasOwnProperty("clubName"))
            object.clubName = message.clubName;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message.svrIp != null && message.hasOwnProperty("svrIp"))
            object.svrIp = message.svrIp;
        if (message.svrPort != null && message.hasOwnProperty("svrPort"))
            object.svrPort = message.svrPort;
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            object.startTime = message.startTime;
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            object.tableType = options.enums === String ? $root.ENTableType[message.tableType] : message.tableType;
        if (message.ownerUid != null && message.hasOwnProperty("ownerUid"))
            if (typeof message.ownerUid === "number")
                object.ownerUid = options.longs === String ? String(message.ownerUid) : message.ownerUid;
            else
                object.ownerUid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerUid) : options.longs === Number ? new $util.LongBits(message.ownerUid.low >>> 0, message.ownerUid.high >>> 0).toNumber(true) : message.ownerUid;
        if (message.sngServiceFee != null && message.hasOwnProperty("sngServiceFee"))
            if (typeof message.sngServiceFee === "number")
                object.sngServiceFee = options.longs === String ? String(message.sngServiceFee) : message.sngServiceFee;
            else
                object.sngServiceFee = options.longs === String ? $util.Long.prototype.toString.call(message.sngServiceFee) : options.longs === Number ? new $util.LongBits(message.sngServiceFee.low >>> 0, message.sngServiceFee.high >>> 0).toNumber(true) : message.sngServiceFee;
        if (message.sngSignupFee != null && message.hasOwnProperty("sngSignupFee"))
            if (typeof message.sngSignupFee === "number")
                object.sngSignupFee = options.longs === String ? String(message.sngSignupFee) : message.sngSignupFee;
            else
                object.sngSignupFee = options.longs === String ? $util.Long.prototype.toString.call(message.sngSignupFee) : options.longs === Number ? new $util.LongBits(message.sngSignupFee.low >>> 0, message.sngSignupFee.high >>> 0).toNumber(true) : message.sngSignupFee;
        if (message.sngInitScore != null && message.hasOwnProperty("sngInitScore"))
            object.sngInitScore = message.sngInitScore;
        if (message.sngRaiseBlindInterval != null && message.hasOwnProperty("sngRaiseBlindInterval"))
            if (typeof message.sngRaiseBlindInterval === "number")
                object.sngRaiseBlindInterval = options.longs === String ? String(message.sngRaiseBlindInterval) : message.sngRaiseBlindInterval;
            else
                object.sngRaiseBlindInterval = options.longs === String ? $util.Long.prototype.toString.call(message.sngRaiseBlindInterval) : options.longs === Number ? new $util.LongBits(message.sngRaiseBlindInterval.low >>> 0, message.sngRaiseBlindInterval.high >>> 0).toNumber(true) : message.sngRaiseBlindInterval;
        if (message.sngSignupPlayerIds && message.sngSignupPlayerIds.length) {
            object.sngSignupPlayerIds = [];
            for (var j = 0; j < message.sngSignupPlayerIds.length; ++j)
                if (typeof message.sngSignupPlayerIds[j] === "number")
                    object.sngSignupPlayerIds[j] = options.longs === String ? String(message.sngSignupPlayerIds[j]) : message.sngSignupPlayerIds[j];
                else
                    object.sngSignupPlayerIds[j] = options.longs === String ? $util.Long.prototype.toString.call(message.sngSignupPlayerIds[j]) : options.longs === Number ? new $util.LongBits(message.sngSignupPlayerIds[j].low >>> 0, message.sngSignupPlayerIds[j].high >>> 0).toNumber(true) : message.sngSignupPlayerIds[j];
        }
        if (message.sngRewards && message.sngRewards.length) {
            object.sngRewards = [];
            for (var j = 0; j < message.sngRewards.length; ++j)
                object.sngRewards[j] = $root.PBReward.toObject(message.sngRewards[j], options);
        }
        if (message.sngCurSmallBlind != null && message.hasOwnProperty("sngCurSmallBlind"))
            object.sngCurSmallBlind = message.sngCurSmallBlind;
        if (message.sngIcon != null && message.hasOwnProperty("sngIcon"))
            object.sngIcon = message.sngIcon;
        if (message.sngRaiseBlindIndex != null && message.hasOwnProperty("sngRaiseBlindIndex"))
            object.sngRaiseBlindIndex = message.sngRaiseBlindIndex;
        if (message.sngServiceFeeType != null && message.hasOwnProperty("sngServiceFeeType"))
            object.sngServiceFeeType = options.enums === String ? $root.ENSngSignUpFeeType[message.sngServiceFeeType] : message.sngServiceFeeType;
        if (message.sngSignupFeeType != null && message.hasOwnProperty("sngSignupFeeType"))
            object.sngSignupFeeType = options.enums === String ? $root.ENSngSignUpFeeType[message.sngSignupFeeType] : message.sngSignupFeeType;
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            object.endTime = message.endTime;
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            object.minPlayer = message.minPlayer;
        if (message.showTime != null && message.hasOwnProperty("showTime"))
            object.showTime = message.showTime;
        if (message.subTableType != null && message.hasOwnProperty("subTableType"))
            object.subTableType = options.enums === String ? $root.ENTableSubType[message.subTableType] : message.subTableType;
        if (message.trainingTableLevel != null && message.hasOwnProperty("trainingTableLevel"))
            object.trainingTableLevel = options.enums === String ? $root.ENTrainingTableLevel[message.trainingTableLevel] : message.trainingTableLevel;
        if (message.innerId != null && message.hasOwnProperty("innerId"))
            if (typeof message.innerId === "number")
                object.innerId = options.longs === String ? String(message.innerId) : message.innerId;
            else
                object.innerId = options.longs === String ? $util.Long.prototype.toString.call(message.innerId) : options.longs === Number ? new $util.LongBits(message.innerId.low >>> 0, message.innerId.high >>> 0).toNumber(true) : message.innerId;
        if (message.players && message.players.length) {
            object.players = [];
            for (var j = 0; j < message.players.length; ++j)
                object.players[j] = $root.CSTablePlayer.toObject(message.players[j], options);
        }
        return object;
    };

    /**
     * Converts this CSTableInfo to JSON.
     * @function toJSON
     * @memberof CSTableInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSTableInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSTableInfo;
})();

$root.CSRequestTableList = (function() {

    /**
     * Properties of a CSRequestTableList.
     * @exports ICSRequestTableList
     * @interface ICSRequestTableList
     * @property {number|Long} [uid] CSRequestTableList uid
     */

    /**
     * Constructs a new CSRequestTableList.
     * @exports CSRequestTableList
     * @classdesc Represents a CSRequestTableList.
     * @constructor
     * @param {ICSRequestTableList=} [properties] Properties to set
     */
    function CSRequestTableList(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestTableList uid.
     * @member {number|Long}uid
     * @memberof CSRequestTableList
     * @instance
     */
    CSRequestTableList.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSRequestTableList instance using the specified properties.
     * @function create
     * @memberof CSRequestTableList
     * @static
     * @param {ICSRequestTableList=} [properties] Properties to set
     * @returns {CSRequestTableList} CSRequestTableList instance
     */
    CSRequestTableList.create = function create(properties) {
        return new CSRequestTableList(properties);
    };

    /**
     * Encodes the specified CSRequestTableList message. Does not implicitly {@link CSRequestTableList.verify|verify} messages.
     * @function encode
     * @memberof CSRequestTableList
     * @static
     * @param {ICSRequestTableList} message CSRequestTableList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTableList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        return writer;
    };

    /**
     * Encodes the specified CSRequestTableList message, length delimited. Does not implicitly {@link CSRequestTableList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestTableList
     * @static
     * @param {ICSRequestTableList} message CSRequestTableList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTableList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestTableList message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestTableList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestTableList} CSRequestTableList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTableList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestTableList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestTableList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestTableList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestTableList} CSRequestTableList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTableList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestTableList message.
     * @function verify
     * @memberof CSRequestTableList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestTableList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSRequestTableList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestTableList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestTableList} CSRequestTableList
     */
    CSRequestTableList.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestTableList)
            return object;
        var message = new $root.CSRequestTableList();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSRequestTableList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestTableList
     * @static
     * @param {CSRequestTableList} message CSRequestTableList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestTableList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        return object;
    };

    /**
     * Converts this CSRequestTableList to JSON.
     * @function toJSON
     * @memberof CSRequestTableList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestTableList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestTableList;
})();

$root.CSResponseTableList = (function() {

    /**
     * Properties of a CSResponseTableList.
     * @exports ICSResponseTableList
     * @interface ICSResponseTableList
     * @property {Array.<ICSTableInfo>} [tables] CSResponseTableList tables
     */

    /**
     * Constructs a new CSResponseTableList.
     * @exports CSResponseTableList
     * @classdesc Represents a CSResponseTableList.
     * @constructor
     * @param {ICSResponseTableList=} [properties] Properties to set
     */
    function CSResponseTableList(properties) {
        this.tables = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseTableList tables.
     * @member {Array.<ICSTableInfo>}tables
     * @memberof CSResponseTableList
     * @instance
     */
    CSResponseTableList.prototype.tables = $util.emptyArray;

    /**
     * Creates a new CSResponseTableList instance using the specified properties.
     * @function create
     * @memberof CSResponseTableList
     * @static
     * @param {ICSResponseTableList=} [properties] Properties to set
     * @returns {CSResponseTableList} CSResponseTableList instance
     */
    CSResponseTableList.create = function create(properties) {
        return new CSResponseTableList(properties);
    };

    /**
     * Encodes the specified CSResponseTableList message. Does not implicitly {@link CSResponseTableList.verify|verify} messages.
     * @function encode
     * @memberof CSResponseTableList
     * @static
     * @param {ICSResponseTableList} message CSResponseTableList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTableList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tables != null && message.tables.length)
            for (var i = 0; i < message.tables.length; ++i)
                $root.CSTableInfo.encode(message.tables[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSResponseTableList message, length delimited. Does not implicitly {@link CSResponseTableList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseTableList
     * @static
     * @param {ICSResponseTableList} message CSResponseTableList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTableList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseTableList message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseTableList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseTableList} CSResponseTableList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTableList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseTableList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.tables && message.tables.length))
                    message.tables = [];
                message.tables.push($root.CSTableInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseTableList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseTableList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseTableList} CSResponseTableList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTableList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseTableList message.
     * @function verify
     * @memberof CSResponseTableList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseTableList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tables != null && message.hasOwnProperty("tables")) {
            if (!Array.isArray(message.tables))
                return "tables: array expected";
            for (var i = 0; i < message.tables.length; ++i) {
                var error = $root.CSTableInfo.verify(message.tables[i]);
                if (error)
                    return "tables." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSResponseTableList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseTableList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseTableList} CSResponseTableList
     */
    CSResponseTableList.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseTableList)
            return object;
        var message = new $root.CSResponseTableList();
        if (object.tables) {
            if (!Array.isArray(object.tables))
                throw TypeError(".CSResponseTableList.tables: array expected");
            message.tables = [];
            for (var i = 0; i < object.tables.length; ++i) {
                if (typeof object.tables[i] !== "object")
                    throw TypeError(".CSResponseTableList.tables: object expected");
                message.tables[i] = $root.CSTableInfo.fromObject(object.tables[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseTableList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseTableList
     * @static
     * @param {CSResponseTableList} message CSResponseTableList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseTableList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.tables = [];
        if (message.tables && message.tables.length) {
            object.tables = [];
            for (var j = 0; j < message.tables.length; ++j)
                object.tables[j] = $root.CSTableInfo.toObject(message.tables[j], options);
        }
        return object;
    };

    /**
     * Converts this CSResponseTableList to JSON.
     * @function toJSON
     * @memberof CSResponseTableList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseTableList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseTableList;
})();

$root.CSRequestTableListBySubType = (function() {

    /**
     * Properties of a CSRequestTableListBySubType.
     * @exports ICSRequestTableListBySubType
     * @interface ICSRequestTableListBySubType
     * @property {number|Long} [uid] CSRequestTableListBySubType uid
     * @property {number} [subTableTypes] CSRequestTableListBySubType subTableTypes
     */

    /**
     * Constructs a new CSRequestTableListBySubType.
     * @exports CSRequestTableListBySubType
     * @classdesc Represents a CSRequestTableListBySubType.
     * @constructor
     * @param {ICSRequestTableListBySubType=} [properties] Properties to set
     */
    function CSRequestTableListBySubType(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestTableListBySubType uid.
     * @member {number|Long}uid
     * @memberof CSRequestTableListBySubType
     * @instance
     */
    CSRequestTableListBySubType.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSRequestTableListBySubType subTableTypes.
     * @member {number}subTableTypes
     * @memberof CSRequestTableListBySubType
     * @instance
     */
    CSRequestTableListBySubType.prototype.subTableTypes = 0;

    /**
     * Creates a new CSRequestTableListBySubType instance using the specified properties.
     * @function create
     * @memberof CSRequestTableListBySubType
     * @static
     * @param {ICSRequestTableListBySubType=} [properties] Properties to set
     * @returns {CSRequestTableListBySubType} CSRequestTableListBySubType instance
     */
    CSRequestTableListBySubType.create = function create(properties) {
        return new CSRequestTableListBySubType(properties);
    };

    /**
     * Encodes the specified CSRequestTableListBySubType message. Does not implicitly {@link CSRequestTableListBySubType.verify|verify} messages.
     * @function encode
     * @memberof CSRequestTableListBySubType
     * @static
     * @param {ICSRequestTableListBySubType} message CSRequestTableListBySubType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTableListBySubType.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        if (message.subTableTypes != null && message.hasOwnProperty("subTableTypes"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.subTableTypes);
        return writer;
    };

    /**
     * Encodes the specified CSRequestTableListBySubType message, length delimited. Does not implicitly {@link CSRequestTableListBySubType.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestTableListBySubType
     * @static
     * @param {ICSRequestTableListBySubType} message CSRequestTableListBySubType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTableListBySubType.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestTableListBySubType message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestTableListBySubType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestTableListBySubType} CSRequestTableListBySubType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTableListBySubType.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestTableListBySubType();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            case 2:
                message.subTableTypes = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestTableListBySubType message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestTableListBySubType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestTableListBySubType} CSRequestTableListBySubType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTableListBySubType.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestTableListBySubType message.
     * @function verify
     * @memberof CSRequestTableListBySubType
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestTableListBySubType.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.subTableTypes != null && message.hasOwnProperty("subTableTypes"))
            if (!$util.isInteger(message.subTableTypes))
                return "subTableTypes: integer expected";
        return null;
    };

    /**
     * Creates a CSRequestTableListBySubType message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestTableListBySubType
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestTableListBySubType} CSRequestTableListBySubType
     */
    CSRequestTableListBySubType.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestTableListBySubType)
            return object;
        var message = new $root.CSRequestTableListBySubType();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.subTableTypes != null)
            message.subTableTypes = object.subTableTypes >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSRequestTableListBySubType message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestTableListBySubType
     * @static
     * @param {CSRequestTableListBySubType} message CSRequestTableListBySubType
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestTableListBySubType.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
            object.subTableTypes = 0;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.subTableTypes != null && message.hasOwnProperty("subTableTypes"))
            object.subTableTypes = message.subTableTypes;
        return object;
    };

    /**
     * Converts this CSRequestTableListBySubType to JSON.
     * @function toJSON
     * @memberof CSRequestTableListBySubType
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestTableListBySubType.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestTableListBySubType;
})();

$root.CSResponseTableListBySubType = (function() {

    /**
     * Properties of a CSResponseTableListBySubType.
     * @exports ICSResponseTableListBySubType
     * @interface ICSResponseTableListBySubType
     * @property {Array.<ICSTableInfo>} [tables] CSResponseTableListBySubType tables
     */

    /**
     * Constructs a new CSResponseTableListBySubType.
     * @exports CSResponseTableListBySubType
     * @classdesc Represents a CSResponseTableListBySubType.
     * @constructor
     * @param {ICSResponseTableListBySubType=} [properties] Properties to set
     */
    function CSResponseTableListBySubType(properties) {
        this.tables = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseTableListBySubType tables.
     * @member {Array.<ICSTableInfo>}tables
     * @memberof CSResponseTableListBySubType
     * @instance
     */
    CSResponseTableListBySubType.prototype.tables = $util.emptyArray;

    /**
     * Creates a new CSResponseTableListBySubType instance using the specified properties.
     * @function create
     * @memberof CSResponseTableListBySubType
     * @static
     * @param {ICSResponseTableListBySubType=} [properties] Properties to set
     * @returns {CSResponseTableListBySubType} CSResponseTableListBySubType instance
     */
    CSResponseTableListBySubType.create = function create(properties) {
        return new CSResponseTableListBySubType(properties);
    };

    /**
     * Encodes the specified CSResponseTableListBySubType message. Does not implicitly {@link CSResponseTableListBySubType.verify|verify} messages.
     * @function encode
     * @memberof CSResponseTableListBySubType
     * @static
     * @param {ICSResponseTableListBySubType} message CSResponseTableListBySubType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTableListBySubType.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tables != null && message.tables.length)
            for (var i = 0; i < message.tables.length; ++i)
                $root.CSTableInfo.encode(message.tables[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSResponseTableListBySubType message, length delimited. Does not implicitly {@link CSResponseTableListBySubType.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseTableListBySubType
     * @static
     * @param {ICSResponseTableListBySubType} message CSResponseTableListBySubType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTableListBySubType.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseTableListBySubType message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseTableListBySubType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseTableListBySubType} CSResponseTableListBySubType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTableListBySubType.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseTableListBySubType();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.tables && message.tables.length))
                    message.tables = [];
                message.tables.push($root.CSTableInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseTableListBySubType message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseTableListBySubType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseTableListBySubType} CSResponseTableListBySubType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTableListBySubType.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseTableListBySubType message.
     * @function verify
     * @memberof CSResponseTableListBySubType
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseTableListBySubType.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tables != null && message.hasOwnProperty("tables")) {
            if (!Array.isArray(message.tables))
                return "tables: array expected";
            for (var i = 0; i < message.tables.length; ++i) {
                var error = $root.CSTableInfo.verify(message.tables[i]);
                if (error)
                    return "tables." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSResponseTableListBySubType message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseTableListBySubType
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseTableListBySubType} CSResponseTableListBySubType
     */
    CSResponseTableListBySubType.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseTableListBySubType)
            return object;
        var message = new $root.CSResponseTableListBySubType();
        if (object.tables) {
            if (!Array.isArray(object.tables))
                throw TypeError(".CSResponseTableListBySubType.tables: array expected");
            message.tables = [];
            for (var i = 0; i < object.tables.length; ++i) {
                if (typeof object.tables[i] !== "object")
                    throw TypeError(".CSResponseTableListBySubType.tables: object expected");
                message.tables[i] = $root.CSTableInfo.fromObject(object.tables[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseTableListBySubType message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseTableListBySubType
     * @static
     * @param {CSResponseTableListBySubType} message CSResponseTableListBySubType
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseTableListBySubType.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.tables = [];
        if (message.tables && message.tables.length) {
            object.tables = [];
            for (var j = 0; j < message.tables.length; ++j)
                object.tables[j] = $root.CSTableInfo.toObject(message.tables[j], options);
        }
        return object;
    };

    /**
     * Converts this CSResponseTableListBySubType to JSON.
     * @function toJSON
     * @memberof CSResponseTableListBySubType
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseTableListBySubType.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseTableListBySubType;
})();

$root.CSRequestTableListByStatus = (function() {

    /**
     * Properties of a CSRequestTableListByStatus.
     * @exports ICSRequestTableListByStatus
     * @interface ICSRequestTableListByStatus
     * @property {number|Long} [uid] CSRequestTableListByStatus uid
     * @property {number} [statusTypes] CSRequestTableListByStatus statusTypes
     */

    /**
     * Constructs a new CSRequestTableListByStatus.
     * @exports CSRequestTableListByStatus
     * @classdesc Represents a CSRequestTableListByStatus.
     * @constructor
     * @param {ICSRequestTableListByStatus=} [properties] Properties to set
     */
    function CSRequestTableListByStatus(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestTableListByStatus uid.
     * @member {number|Long}uid
     * @memberof CSRequestTableListByStatus
     * @instance
     */
    CSRequestTableListByStatus.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSRequestTableListByStatus statusTypes.
     * @member {number}statusTypes
     * @memberof CSRequestTableListByStatus
     * @instance
     */
    CSRequestTableListByStatus.prototype.statusTypes = 0;

    /**
     * Creates a new CSRequestTableListByStatus instance using the specified properties.
     * @function create
     * @memberof CSRequestTableListByStatus
     * @static
     * @param {ICSRequestTableListByStatus=} [properties] Properties to set
     * @returns {CSRequestTableListByStatus} CSRequestTableListByStatus instance
     */
    CSRequestTableListByStatus.create = function create(properties) {
        return new CSRequestTableListByStatus(properties);
    };

    /**
     * Encodes the specified CSRequestTableListByStatus message. Does not implicitly {@link CSRequestTableListByStatus.verify|verify} messages.
     * @function encode
     * @memberof CSRequestTableListByStatus
     * @static
     * @param {ICSRequestTableListByStatus} message CSRequestTableListByStatus message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTableListByStatus.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        if (message.statusTypes != null && message.hasOwnProperty("statusTypes"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.statusTypes);
        return writer;
    };

    /**
     * Encodes the specified CSRequestTableListByStatus message, length delimited. Does not implicitly {@link CSRequestTableListByStatus.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestTableListByStatus
     * @static
     * @param {ICSRequestTableListByStatus} message CSRequestTableListByStatus message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTableListByStatus.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestTableListByStatus message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestTableListByStatus
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestTableListByStatus} CSRequestTableListByStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTableListByStatus.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestTableListByStatus();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            case 2:
                message.statusTypes = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestTableListByStatus message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestTableListByStatus
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestTableListByStatus} CSRequestTableListByStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTableListByStatus.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestTableListByStatus message.
     * @function verify
     * @memberof CSRequestTableListByStatus
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestTableListByStatus.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.statusTypes != null && message.hasOwnProperty("statusTypes"))
            if (!$util.isInteger(message.statusTypes))
                return "statusTypes: integer expected";
        return null;
    };

    /**
     * Creates a CSRequestTableListByStatus message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestTableListByStatus
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestTableListByStatus} CSRequestTableListByStatus
     */
    CSRequestTableListByStatus.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestTableListByStatus)
            return object;
        var message = new $root.CSRequestTableListByStatus();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.statusTypes != null)
            message.statusTypes = object.statusTypes >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSRequestTableListByStatus message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestTableListByStatus
     * @static
     * @param {CSRequestTableListByStatus} message CSRequestTableListByStatus
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestTableListByStatus.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
            object.statusTypes = 0;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.statusTypes != null && message.hasOwnProperty("statusTypes"))
            object.statusTypes = message.statusTypes;
        return object;
    };

    /**
     * Converts this CSRequestTableListByStatus to JSON.
     * @function toJSON
     * @memberof CSRequestTableListByStatus
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestTableListByStatus.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestTableListByStatus;
})();

$root.CSResponseTableListByStatus = (function() {

    /**
     * Properties of a CSResponseTableListByStatus.
     * @exports ICSResponseTableListByStatus
     * @interface ICSResponseTableListByStatus
     * @property {Array.<ICSTableInfo>} [tables] CSResponseTableListByStatus tables
     */

    /**
     * Constructs a new CSResponseTableListByStatus.
     * @exports CSResponseTableListByStatus
     * @classdesc Represents a CSResponseTableListByStatus.
     * @constructor
     * @param {ICSResponseTableListByStatus=} [properties] Properties to set
     */
    function CSResponseTableListByStatus(properties) {
        this.tables = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseTableListByStatus tables.
     * @member {Array.<ICSTableInfo>}tables
     * @memberof CSResponseTableListByStatus
     * @instance
     */
    CSResponseTableListByStatus.prototype.tables = $util.emptyArray;

    /**
     * Creates a new CSResponseTableListByStatus instance using the specified properties.
     * @function create
     * @memberof CSResponseTableListByStatus
     * @static
     * @param {ICSResponseTableListByStatus=} [properties] Properties to set
     * @returns {CSResponseTableListByStatus} CSResponseTableListByStatus instance
     */
    CSResponseTableListByStatus.create = function create(properties) {
        return new CSResponseTableListByStatus(properties);
    };

    /**
     * Encodes the specified CSResponseTableListByStatus message. Does not implicitly {@link CSResponseTableListByStatus.verify|verify} messages.
     * @function encode
     * @memberof CSResponseTableListByStatus
     * @static
     * @param {ICSResponseTableListByStatus} message CSResponseTableListByStatus message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTableListByStatus.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tables != null && message.tables.length)
            for (var i = 0; i < message.tables.length; ++i)
                $root.CSTableInfo.encode(message.tables[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSResponseTableListByStatus message, length delimited. Does not implicitly {@link CSResponseTableListByStatus.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseTableListByStatus
     * @static
     * @param {ICSResponseTableListByStatus} message CSResponseTableListByStatus message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTableListByStatus.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseTableListByStatus message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseTableListByStatus
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseTableListByStatus} CSResponseTableListByStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTableListByStatus.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseTableListByStatus();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.tables && message.tables.length))
                    message.tables = [];
                message.tables.push($root.CSTableInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseTableListByStatus message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseTableListByStatus
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseTableListByStatus} CSResponseTableListByStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTableListByStatus.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseTableListByStatus message.
     * @function verify
     * @memberof CSResponseTableListByStatus
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseTableListByStatus.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tables != null && message.hasOwnProperty("tables")) {
            if (!Array.isArray(message.tables))
                return "tables: array expected";
            for (var i = 0; i < message.tables.length; ++i) {
                var error = $root.CSTableInfo.verify(message.tables[i]);
                if (error)
                    return "tables." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSResponseTableListByStatus message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseTableListByStatus
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseTableListByStatus} CSResponseTableListByStatus
     */
    CSResponseTableListByStatus.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseTableListByStatus)
            return object;
        var message = new $root.CSResponseTableListByStatus();
        if (object.tables) {
            if (!Array.isArray(object.tables))
                throw TypeError(".CSResponseTableListByStatus.tables: array expected");
            message.tables = [];
            for (var i = 0; i < object.tables.length; ++i) {
                if (typeof object.tables[i] !== "object")
                    throw TypeError(".CSResponseTableListByStatus.tables: object expected");
                message.tables[i] = $root.CSTableInfo.fromObject(object.tables[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseTableListByStatus message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseTableListByStatus
     * @static
     * @param {CSResponseTableListByStatus} message CSResponseTableListByStatus
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseTableListByStatus.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.tables = [];
        if (message.tables && message.tables.length) {
            object.tables = [];
            for (var j = 0; j < message.tables.length; ++j)
                object.tables[j] = $root.CSTableInfo.toObject(message.tables[j], options);
        }
        return object;
    };

    /**
     * Converts this CSResponseTableListByStatus to JSON.
     * @function toJSON
     * @memberof CSResponseTableListByStatus
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseTableListByStatus.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseTableListByStatus;
})();

$root.CSRequestTableInfo = (function() {

    /**
     * Properties of a CSRequestTableInfo.
     * @exports ICSRequestTableInfo
     * @interface ICSRequestTableInfo
     * @property {number} [tableId] CSRequestTableInfo tableId
     */

    /**
     * Constructs a new CSRequestTableInfo.
     * @exports CSRequestTableInfo
     * @classdesc Represents a CSRequestTableInfo.
     * @constructor
     * @param {ICSRequestTableInfo=} [properties] Properties to set
     */
    function CSRequestTableInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestTableInfo tableId.
     * @member {number}tableId
     * @memberof CSRequestTableInfo
     * @instance
     */
    CSRequestTableInfo.prototype.tableId = 0;

    /**
     * Creates a new CSRequestTableInfo instance using the specified properties.
     * @function create
     * @memberof CSRequestTableInfo
     * @static
     * @param {ICSRequestTableInfo=} [properties] Properties to set
     * @returns {CSRequestTableInfo} CSRequestTableInfo instance
     */
    CSRequestTableInfo.create = function create(properties) {
        return new CSRequestTableInfo(properties);
    };

    /**
     * Encodes the specified CSRequestTableInfo message. Does not implicitly {@link CSRequestTableInfo.verify|verify} messages.
     * @function encode
     * @memberof CSRequestTableInfo
     * @static
     * @param {ICSRequestTableInfo} message CSRequestTableInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTableInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tableId);
        return writer;
    };

    /**
     * Encodes the specified CSRequestTableInfo message, length delimited. Does not implicitly {@link CSRequestTableInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestTableInfo
     * @static
     * @param {ICSRequestTableInfo} message CSRequestTableInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTableInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestTableInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestTableInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestTableInfo} CSRequestTableInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTableInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestTableInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.tableId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestTableInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestTableInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestTableInfo} CSRequestTableInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTableInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestTableInfo message.
     * @function verify
     * @memberof CSRequestTableInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestTableInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        return null;
    };

    /**
     * Creates a CSRequestTableInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestTableInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestTableInfo} CSRequestTableInfo
     */
    CSRequestTableInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestTableInfo)
            return object;
        var message = new $root.CSRequestTableInfo();
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSRequestTableInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestTableInfo
     * @static
     * @param {CSRequestTableInfo} message CSRequestTableInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestTableInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.tableId = 0;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        return object;
    };

    /**
     * Converts this CSRequestTableInfo to JSON.
     * @function toJSON
     * @memberof CSRequestTableInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestTableInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestTableInfo;
})();

$root.CSResponseTableInfo = (function() {

    /**
     * Properties of a CSResponseTableInfo.
     * @exports ICSResponseTableInfo
     * @interface ICSResponseTableInfo
     * @property {ICSTableInfo} [table] CSResponseTableInfo table
     */

    /**
     * Constructs a new CSResponseTableInfo.
     * @exports CSResponseTableInfo
     * @classdesc Represents a CSResponseTableInfo.
     * @constructor
     * @param {ICSResponseTableInfo=} [properties] Properties to set
     */
    function CSResponseTableInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseTableInfo table.
     * @member {(ICSTableInfo|null|undefined)}table
     * @memberof CSResponseTableInfo
     * @instance
     */
    CSResponseTableInfo.prototype.table = null;

    /**
     * Creates a new CSResponseTableInfo instance using the specified properties.
     * @function create
     * @memberof CSResponseTableInfo
     * @static
     * @param {ICSResponseTableInfo=} [properties] Properties to set
     * @returns {CSResponseTableInfo} CSResponseTableInfo instance
     */
    CSResponseTableInfo.create = function create(properties) {
        return new CSResponseTableInfo(properties);
    };

    /**
     * Encodes the specified CSResponseTableInfo message. Does not implicitly {@link CSResponseTableInfo.verify|verify} messages.
     * @function encode
     * @memberof CSResponseTableInfo
     * @static
     * @param {ICSResponseTableInfo} message CSResponseTableInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTableInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.table != null && message.hasOwnProperty("table"))
            $root.CSTableInfo.encode(message.table, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSResponseTableInfo message, length delimited. Does not implicitly {@link CSResponseTableInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseTableInfo
     * @static
     * @param {ICSResponseTableInfo} message CSResponseTableInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTableInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseTableInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseTableInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseTableInfo} CSResponseTableInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTableInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseTableInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.table = $root.CSTableInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseTableInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseTableInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseTableInfo} CSResponseTableInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTableInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseTableInfo message.
     * @function verify
     * @memberof CSResponseTableInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseTableInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.table != null && message.hasOwnProperty("table")) {
            var error = $root.CSTableInfo.verify(message.table);
            if (error)
                return "table." + error;
        }
        return null;
    };

    /**
     * Creates a CSResponseTableInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseTableInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseTableInfo} CSResponseTableInfo
     */
    CSResponseTableInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseTableInfo)
            return object;
        var message = new $root.CSResponseTableInfo();
        if (object.table != null) {
            if (typeof object.table !== "object")
                throw TypeError(".CSResponseTableInfo.table: object expected");
            message.table = $root.CSTableInfo.fromObject(object.table);
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseTableInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseTableInfo
     * @static
     * @param {CSResponseTableInfo} message CSResponseTableInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseTableInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.table = null;
        if (message.table != null && message.hasOwnProperty("table"))
            object.table = $root.CSTableInfo.toObject(message.table, options);
        return object;
    };

    /**
     * Converts this CSResponseTableInfo to JSON.
     * @function toJSON
     * @memberof CSResponseTableInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseTableInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseTableInfo;
})();

$root.CSRequestSngSignUp = (function() {

    /**
     * Properties of a CSRequestSngSignUp.
     * @exports ICSRequestSngSignUp
     * @interface ICSRequestSngSignUp
     * @property {number|Long} [uid] CSRequestSngSignUp uid
     * @property {number} [tableId] CSRequestSngSignUp tableId
     * @property {number} [index] CSRequestSngSignUp index
     */

    /**
     * Constructs a new CSRequestSngSignUp.
     * @exports CSRequestSngSignUp
     * @classdesc Represents a CSRequestSngSignUp.
     * @constructor
     * @param {ICSRequestSngSignUp=} [properties] Properties to set
     */
    function CSRequestSngSignUp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestSngSignUp uid.
     * @member {number|Long}uid
     * @memberof CSRequestSngSignUp
     * @instance
     */
    CSRequestSngSignUp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSRequestSngSignUp tableId.
     * @member {number}tableId
     * @memberof CSRequestSngSignUp
     * @instance
     */
    CSRequestSngSignUp.prototype.tableId = 0;

    /**
     * CSRequestSngSignUp index.
     * @member {number}index
     * @memberof CSRequestSngSignUp
     * @instance
     */
    CSRequestSngSignUp.prototype.index = 0;

    /**
     * Creates a new CSRequestSngSignUp instance using the specified properties.
     * @function create
     * @memberof CSRequestSngSignUp
     * @static
     * @param {ICSRequestSngSignUp=} [properties] Properties to set
     * @returns {CSRequestSngSignUp} CSRequestSngSignUp instance
     */
    CSRequestSngSignUp.create = function create(properties) {
        return new CSRequestSngSignUp(properties);
    };

    /**
     * Encodes the specified CSRequestSngSignUp message. Does not implicitly {@link CSRequestSngSignUp.verify|verify} messages.
     * @function encode
     * @memberof CSRequestSngSignUp
     * @static
     * @param {ICSRequestSngSignUp} message CSRequestSngSignUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestSngSignUp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tableId);
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.index);
        return writer;
    };

    /**
     * Encodes the specified CSRequestSngSignUp message, length delimited. Does not implicitly {@link CSRequestSngSignUp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestSngSignUp
     * @static
     * @param {ICSRequestSngSignUp} message CSRequestSngSignUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestSngSignUp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestSngSignUp message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestSngSignUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestSngSignUp} CSRequestSngSignUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestSngSignUp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestSngSignUp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            case 2:
                message.tableId = reader.uint32();
                break;
            case 3:
                message.index = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestSngSignUp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestSngSignUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestSngSignUp} CSRequestSngSignUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestSngSignUp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestSngSignUp message.
     * @function verify
     * @memberof CSRequestSngSignUp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestSngSignUp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        return null;
    };

    /**
     * Creates a CSRequestSngSignUp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestSngSignUp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestSngSignUp} CSRequestSngSignUp
     */
    CSRequestSngSignUp.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestSngSignUp)
            return object;
        var message = new $root.CSRequestSngSignUp();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        if (object.index != null)
            message.index = object.index >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSRequestSngSignUp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestSngSignUp
     * @static
     * @param {CSRequestSngSignUp} message CSRequestSngSignUp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestSngSignUp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
            object.tableId = 0;
            object.index = 0;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        return object;
    };

    /**
     * Converts this CSRequestSngSignUp to JSON.
     * @function toJSON
     * @memberof CSRequestSngSignUp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestSngSignUp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestSngSignUp;
})();

$root.CSResponseSngSignUp = (function() {

    /**
     * Properties of a CSResponseSngSignUp.
     * @exports ICSResponseSngSignUp
     * @interface ICSResponseSngSignUp
     * @property {ENMessageError} [result] CSResponseSngSignUp result
     * @property {string} [gameServerIp] CSResponseSngSignUp gameServerIp
     * @property {number} [gameServerPort] CSResponseSngSignUp gameServerPort
     * @property {number} [gameTableId] CSResponseSngSignUp gameTableId
     */

    /**
     * Constructs a new CSResponseSngSignUp.
     * @exports CSResponseSngSignUp
     * @classdesc Represents a CSResponseSngSignUp.
     * @constructor
     * @param {ICSResponseSngSignUp=} [properties] Properties to set
     */
    function CSResponseSngSignUp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseSngSignUp result.
     * @member {ENMessageError}result
     * @memberof CSResponseSngSignUp
     * @instance
     */
    CSResponseSngSignUp.prototype.result = 0;

    /**
     * CSResponseSngSignUp gameServerIp.
     * @member {string}gameServerIp
     * @memberof CSResponseSngSignUp
     * @instance
     */
    CSResponseSngSignUp.prototype.gameServerIp = "";

    /**
     * CSResponseSngSignUp gameServerPort.
     * @member {number}gameServerPort
     * @memberof CSResponseSngSignUp
     * @instance
     */
    CSResponseSngSignUp.prototype.gameServerPort = 0;

    /**
     * CSResponseSngSignUp gameTableId.
     * @member {number}gameTableId
     * @memberof CSResponseSngSignUp
     * @instance
     */
    CSResponseSngSignUp.prototype.gameTableId = 0;

    /**
     * Creates a new CSResponseSngSignUp instance using the specified properties.
     * @function create
     * @memberof CSResponseSngSignUp
     * @static
     * @param {ICSResponseSngSignUp=} [properties] Properties to set
     * @returns {CSResponseSngSignUp} CSResponseSngSignUp instance
     */
    CSResponseSngSignUp.create = function create(properties) {
        return new CSResponseSngSignUp(properties);
    };

    /**
     * Encodes the specified CSResponseSngSignUp message. Does not implicitly {@link CSResponseSngSignUp.verify|verify} messages.
     * @function encode
     * @memberof CSResponseSngSignUp
     * @static
     * @param {ICSResponseSngSignUp} message CSResponseSngSignUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseSngSignUp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.gameServerIp);
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gameServerPort);
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gameTableId);
        return writer;
    };

    /**
     * Encodes the specified CSResponseSngSignUp message, length delimited. Does not implicitly {@link CSResponseSngSignUp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseSngSignUp
     * @static
     * @param {ICSResponseSngSignUp} message CSResponseSngSignUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseSngSignUp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseSngSignUp message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseSngSignUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseSngSignUp} CSResponseSngSignUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseSngSignUp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseSngSignUp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.gameServerIp = reader.string();
                break;
            case 3:
                message.gameServerPort = reader.uint32();
                break;
            case 4:
                message.gameTableId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseSngSignUp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseSngSignUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseSngSignUp} CSResponseSngSignUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseSngSignUp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseSngSignUp message.
     * @function verify
     * @memberof CSResponseSngSignUp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseSngSignUp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            if (!$util.isString(message.gameServerIp))
                return "gameServerIp: string expected";
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            if (!$util.isInteger(message.gameServerPort))
                return "gameServerPort: integer expected";
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            if (!$util.isInteger(message.gameTableId))
                return "gameTableId: integer expected";
        return null;
    };

    /**
     * Creates a CSResponseSngSignUp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseSngSignUp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseSngSignUp} CSResponseSngSignUp
     */
    CSResponseSngSignUp.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseSngSignUp)
            return object;
        var message = new $root.CSResponseSngSignUp();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.gameServerIp != null)
            message.gameServerIp = String(object.gameServerIp);
        if (object.gameServerPort != null)
            message.gameServerPort = object.gameServerPort >>> 0;
        if (object.gameTableId != null)
            message.gameTableId = object.gameTableId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSResponseSngSignUp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseSngSignUp
     * @static
     * @param {CSResponseSngSignUp} message CSResponseSngSignUp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseSngSignUp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.gameServerIp = "";
            object.gameServerPort = 0;
            object.gameTableId = 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            object.gameServerIp = message.gameServerIp;
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            object.gameServerPort = message.gameServerPort;
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            object.gameTableId = message.gameTableId;
        return object;
    };

    /**
     * Converts this CSResponseSngSignUp to JSON.
     * @function toJSON
     * @memberof CSResponseSngSignUp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseSngSignUp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseSngSignUp;
})();

$root.CSRequestTrainingSignUp = (function() {

    /**
     * Properties of a CSRequestTrainingSignUp.
     * @exports ICSRequestTrainingSignUp
     * @interface ICSRequestTrainingSignUp
     * @property {number|Long} [uid] CSRequestTrainingSignUp uid
     * @property {ENTrainingTableLevel} [tableLevel] CSRequestTrainingSignUp tableLevel
     * @property {number} [tableId] CSRequestTrainingSignUp tableId
     * @property {number} [_index] CSRequestTrainingSignUp _index
     * @property {number} [_tableId] CSRequestTrainingSignUp _tableId
     */

    /**
     * Constructs a new CSRequestTrainingSignUp.
     * @exports CSRequestTrainingSignUp
     * @classdesc Represents a CSRequestTrainingSignUp.
     * @constructor
     * @param {ICSRequestTrainingSignUp=} [properties] Properties to set
     */
    function CSRequestTrainingSignUp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestTrainingSignUp uid.
     * @member {number|Long}uid
     * @memberof CSRequestTrainingSignUp
     * @instance
     */
    CSRequestTrainingSignUp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSRequestTrainingSignUp tableLevel.
     * @member {ENTrainingTableLevel}tableLevel
     * @memberof CSRequestTrainingSignUp
     * @instance
     */
    CSRequestTrainingSignUp.prototype.tableLevel = 0;

    /**
     * CSRequestTrainingSignUp tableId.
     * @member {number}tableId
     * @memberof CSRequestTrainingSignUp
     * @instance
     */
    CSRequestTrainingSignUp.prototype.tableId = 0;

    /**
     * CSRequestTrainingSignUp _index.
     * @member {number}_index
     * @memberof CSRequestTrainingSignUp
     * @instance
     */
    CSRequestTrainingSignUp.prototype._index = 0;

    /**
     * CSRequestTrainingSignUp _tableId.
     * @member {number}_tableId
     * @memberof CSRequestTrainingSignUp
     * @instance
     */
    CSRequestTrainingSignUp.prototype._tableId = 0;

    /**
     * Creates a new CSRequestTrainingSignUp instance using the specified properties.
     * @function create
     * @memberof CSRequestTrainingSignUp
     * @static
     * @param {ICSRequestTrainingSignUp=} [properties] Properties to set
     * @returns {CSRequestTrainingSignUp} CSRequestTrainingSignUp instance
     */
    CSRequestTrainingSignUp.create = function create(properties) {
        return new CSRequestTrainingSignUp(properties);
    };

    /**
     * Encodes the specified CSRequestTrainingSignUp message. Does not implicitly {@link CSRequestTrainingSignUp.verify|verify} messages.
     * @function encode
     * @memberof CSRequestTrainingSignUp
     * @static
     * @param {ICSRequestTrainingSignUp} message CSRequestTrainingSignUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTrainingSignUp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        if (message.tableLevel != null && message.hasOwnProperty("tableLevel"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.tableLevel);
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.tableId);
        if (message._index != null && message.hasOwnProperty("_index"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message._index);
        if (message._tableId != null && message.hasOwnProperty("_tableId"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message._tableId);
        return writer;
    };

    /**
     * Encodes the specified CSRequestTrainingSignUp message, length delimited. Does not implicitly {@link CSRequestTrainingSignUp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestTrainingSignUp
     * @static
     * @param {ICSRequestTrainingSignUp} message CSRequestTrainingSignUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTrainingSignUp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestTrainingSignUp message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestTrainingSignUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestTrainingSignUp} CSRequestTrainingSignUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTrainingSignUp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestTrainingSignUp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            case 2:
                message.tableLevel = reader.int32();
                break;
            case 4:
                message.tableId = reader.uint32();
                break;
            case 5:
                message._index = reader.uint32();
                break;
            case 6:
                message._tableId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestTrainingSignUp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestTrainingSignUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestTrainingSignUp} CSRequestTrainingSignUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTrainingSignUp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestTrainingSignUp message.
     * @function verify
     * @memberof CSRequestTrainingSignUp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestTrainingSignUp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.tableLevel != null && message.hasOwnProperty("tableLevel"))
            switch (message.tableLevel) {
            default:
                return "tableLevel: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        if (message._index != null && message.hasOwnProperty("_index"))
            if (!$util.isInteger(message._index))
                return "_index: integer expected";
        if (message._tableId != null && message.hasOwnProperty("_tableId"))
            if (!$util.isInteger(message._tableId))
                return "_tableId: integer expected";
        return null;
    };

    /**
     * Creates a CSRequestTrainingSignUp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestTrainingSignUp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestTrainingSignUp} CSRequestTrainingSignUp
     */
    CSRequestTrainingSignUp.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestTrainingSignUp)
            return object;
        var message = new $root.CSRequestTrainingSignUp();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        switch (object.tableLevel) {
        case "EN_TRAINING_TABLE_LEVEL_JUNIOR":
        case 0:
            message.tableLevel = 0;
            break;
        case "EN_TRAINING_TABLE_LEVEL_MIDDLE":
        case 1:
            message.tableLevel = 1;
            break;
        case "EN_TRAINING_TABLE_LEVEL_SENIOR":
        case 2:
            message.tableLevel = 2;
            break;
        }
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        if (object._index != null)
            message._index = object._index >>> 0;
        if (object._tableId != null)
            message._tableId = object._tableId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSRequestTrainingSignUp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestTrainingSignUp
     * @static
     * @param {CSRequestTrainingSignUp} message CSRequestTrainingSignUp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestTrainingSignUp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
            object.tableLevel = options.enums === String ? "EN_TRAINING_TABLE_LEVEL_JUNIOR" : 0;
            object.tableId = 0;
            object._index = 0;
            object._tableId = 0;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.tableLevel != null && message.hasOwnProperty("tableLevel"))
            object.tableLevel = options.enums === String ? $root.ENTrainingTableLevel[message.tableLevel] : message.tableLevel;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message._index != null && message.hasOwnProperty("_index"))
            object._index = message._index;
        if (message._tableId != null && message.hasOwnProperty("_tableId"))
            object._tableId = message._tableId;
        return object;
    };

    /**
     * Converts this CSRequestTrainingSignUp to JSON.
     * @function toJSON
     * @memberof CSRequestTrainingSignUp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestTrainingSignUp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestTrainingSignUp;
})();

$root.CSResponseTrainingSignUp = (function() {

    /**
     * Properties of a CSResponseTrainingSignUp.
     * @exports ICSResponseTrainingSignUp
     * @interface ICSResponseTrainingSignUp
     * @property {ENMessageError} [result] CSResponseTrainingSignUp result
     * @property {string} [gameServerIp] CSResponseTrainingSignUp gameServerIp
     * @property {number} [gameServerPort] CSResponseTrainingSignUp gameServerPort
     * @property {number} [gameTableId] CSResponseTrainingSignUp gameTableId
     */

    /**
     * Constructs a new CSResponseTrainingSignUp.
     * @exports CSResponseTrainingSignUp
     * @classdesc Represents a CSResponseTrainingSignUp.
     * @constructor
     * @param {ICSResponseTrainingSignUp=} [properties] Properties to set
     */
    function CSResponseTrainingSignUp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseTrainingSignUp result.
     * @member {ENMessageError}result
     * @memberof CSResponseTrainingSignUp
     * @instance
     */
    CSResponseTrainingSignUp.prototype.result = 0;

    /**
     * CSResponseTrainingSignUp gameServerIp.
     * @member {string}gameServerIp
     * @memberof CSResponseTrainingSignUp
     * @instance
     */
    CSResponseTrainingSignUp.prototype.gameServerIp = "";

    /**
     * CSResponseTrainingSignUp gameServerPort.
     * @member {number}gameServerPort
     * @memberof CSResponseTrainingSignUp
     * @instance
     */
    CSResponseTrainingSignUp.prototype.gameServerPort = 0;

    /**
     * CSResponseTrainingSignUp gameTableId.
     * @member {number}gameTableId
     * @memberof CSResponseTrainingSignUp
     * @instance
     */
    CSResponseTrainingSignUp.prototype.gameTableId = 0;

    /**
     * Creates a new CSResponseTrainingSignUp instance using the specified properties.
     * @function create
     * @memberof CSResponseTrainingSignUp
     * @static
     * @param {ICSResponseTrainingSignUp=} [properties] Properties to set
     * @returns {CSResponseTrainingSignUp} CSResponseTrainingSignUp instance
     */
    CSResponseTrainingSignUp.create = function create(properties) {
        return new CSResponseTrainingSignUp(properties);
    };

    /**
     * Encodes the specified CSResponseTrainingSignUp message. Does not implicitly {@link CSResponseTrainingSignUp.verify|verify} messages.
     * @function encode
     * @memberof CSResponseTrainingSignUp
     * @static
     * @param {ICSResponseTrainingSignUp} message CSResponseTrainingSignUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTrainingSignUp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.gameServerIp);
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gameServerPort);
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gameTableId);
        return writer;
    };

    /**
     * Encodes the specified CSResponseTrainingSignUp message, length delimited. Does not implicitly {@link CSResponseTrainingSignUp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseTrainingSignUp
     * @static
     * @param {ICSResponseTrainingSignUp} message CSResponseTrainingSignUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTrainingSignUp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseTrainingSignUp message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseTrainingSignUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseTrainingSignUp} CSResponseTrainingSignUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTrainingSignUp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseTrainingSignUp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.gameServerIp = reader.string();
                break;
            case 3:
                message.gameServerPort = reader.uint32();
                break;
            case 4:
                message.gameTableId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseTrainingSignUp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseTrainingSignUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseTrainingSignUp} CSResponseTrainingSignUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTrainingSignUp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseTrainingSignUp message.
     * @function verify
     * @memberof CSResponseTrainingSignUp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseTrainingSignUp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            if (!$util.isString(message.gameServerIp))
                return "gameServerIp: string expected";
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            if (!$util.isInteger(message.gameServerPort))
                return "gameServerPort: integer expected";
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            if (!$util.isInteger(message.gameTableId))
                return "gameTableId: integer expected";
        return null;
    };

    /**
     * Creates a CSResponseTrainingSignUp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseTrainingSignUp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseTrainingSignUp} CSResponseTrainingSignUp
     */
    CSResponseTrainingSignUp.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseTrainingSignUp)
            return object;
        var message = new $root.CSResponseTrainingSignUp();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.gameServerIp != null)
            message.gameServerIp = String(object.gameServerIp);
        if (object.gameServerPort != null)
            message.gameServerPort = object.gameServerPort >>> 0;
        if (object.gameTableId != null)
            message.gameTableId = object.gameTableId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSResponseTrainingSignUp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseTrainingSignUp
     * @static
     * @param {CSResponseTrainingSignUp} message CSResponseTrainingSignUp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseTrainingSignUp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.gameServerIp = "";
            object.gameServerPort = 0;
            object.gameTableId = 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            object.gameServerIp = message.gameServerIp;
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            object.gameServerPort = message.gameServerPort;
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            object.gameTableId = message.gameTableId;
        return object;
    };

    /**
     * Converts this CSResponseTrainingSignUp to JSON.
     * @function toJSON
     * @memberof CSResponseTrainingSignUp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseTrainingSignUp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseTrainingSignUp;
})();

$root.CSRequestChangeTrainingTable = (function() {

    /**
     * Properties of a CSRequestChangeTrainingTable.
     * @exports ICSRequestChangeTrainingTable
     * @interface ICSRequestChangeTrainingTable
     * @property {number} [index] CSRequestChangeTrainingTable index
     * @property {number} [tableId] CSRequestChangeTrainingTable tableId
     * @property {number} [_tableId] CSRequestChangeTrainingTable _tableId
     */

    /**
     * Constructs a new CSRequestChangeTrainingTable.
     * @exports CSRequestChangeTrainingTable
     * @classdesc Represents a CSRequestChangeTrainingTable.
     * @constructor
     * @param {ICSRequestChangeTrainingTable=} [properties] Properties to set
     */
    function CSRequestChangeTrainingTable(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestChangeTrainingTable index.
     * @member {number}index
     * @memberof CSRequestChangeTrainingTable
     * @instance
     */
    CSRequestChangeTrainingTable.prototype.index = 0;

    /**
     * CSRequestChangeTrainingTable tableId.
     * @member {number}tableId
     * @memberof CSRequestChangeTrainingTable
     * @instance
     */
    CSRequestChangeTrainingTable.prototype.tableId = 0;

    /**
     * CSRequestChangeTrainingTable _tableId.
     * @member {number}_tableId
     * @memberof CSRequestChangeTrainingTable
     * @instance
     */
    CSRequestChangeTrainingTable.prototype._tableId = 0;

    /**
     * Creates a new CSRequestChangeTrainingTable instance using the specified properties.
     * @function create
     * @memberof CSRequestChangeTrainingTable
     * @static
     * @param {ICSRequestChangeTrainingTable=} [properties] Properties to set
     * @returns {CSRequestChangeTrainingTable} CSRequestChangeTrainingTable instance
     */
    CSRequestChangeTrainingTable.create = function create(properties) {
        return new CSRequestChangeTrainingTable(properties);
    };

    /**
     * Encodes the specified CSRequestChangeTrainingTable message. Does not implicitly {@link CSRequestChangeTrainingTable.verify|verify} messages.
     * @function encode
     * @memberof CSRequestChangeTrainingTable
     * @static
     * @param {ICSRequestChangeTrainingTable} message CSRequestChangeTrainingTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestChangeTrainingTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tableId);
        if (message._tableId != null && message.hasOwnProperty("_tableId"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message._tableId);
        return writer;
    };

    /**
     * Encodes the specified CSRequestChangeTrainingTable message, length delimited. Does not implicitly {@link CSRequestChangeTrainingTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestChangeTrainingTable
     * @static
     * @param {ICSRequestChangeTrainingTable} message CSRequestChangeTrainingTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestChangeTrainingTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestChangeTrainingTable message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestChangeTrainingTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestChangeTrainingTable} CSRequestChangeTrainingTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestChangeTrainingTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestChangeTrainingTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.index = reader.uint32();
                break;
            case 3:
                message.tableId = reader.uint32();
                break;
            case 4:
                message._tableId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestChangeTrainingTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestChangeTrainingTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestChangeTrainingTable} CSRequestChangeTrainingTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestChangeTrainingTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestChangeTrainingTable message.
     * @function verify
     * @memberof CSRequestChangeTrainingTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestChangeTrainingTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        if (message._tableId != null && message.hasOwnProperty("_tableId"))
            if (!$util.isInteger(message._tableId))
                return "_tableId: integer expected";
        return null;
    };

    /**
     * Creates a CSRequestChangeTrainingTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestChangeTrainingTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestChangeTrainingTable} CSRequestChangeTrainingTable
     */
    CSRequestChangeTrainingTable.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestChangeTrainingTable)
            return object;
        var message = new $root.CSRequestChangeTrainingTable();
        if (object.index != null)
            message.index = object.index >>> 0;
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        if (object._tableId != null)
            message._tableId = object._tableId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSRequestChangeTrainingTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestChangeTrainingTable
     * @static
     * @param {CSRequestChangeTrainingTable} message CSRequestChangeTrainingTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestChangeTrainingTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.index = 0;
            object.tableId = 0;
            object._tableId = 0;
        }
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message._tableId != null && message.hasOwnProperty("_tableId"))
            object._tableId = message._tableId;
        return object;
    };

    /**
     * Converts this CSRequestChangeTrainingTable to JSON.
     * @function toJSON
     * @memberof CSRequestChangeTrainingTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestChangeTrainingTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestChangeTrainingTable;
})();

$root.CSResponseChangeTrainingTable = (function() {

    /**
     * Properties of a CSResponseChangeTrainingTable.
     * @exports ICSResponseChangeTrainingTable
     * @interface ICSResponseChangeTrainingTable
     * @property {ENMessageError} [result] CSResponseChangeTrainingTable result
     * @property {string} [gameServerIp] CSResponseChangeTrainingTable gameServerIp
     * @property {number} [gameServerPort] CSResponseChangeTrainingTable gameServerPort
     * @property {number} [gameTableId] CSResponseChangeTrainingTable gameTableId
     */

    /**
     * Constructs a new CSResponseChangeTrainingTable.
     * @exports CSResponseChangeTrainingTable
     * @classdesc Represents a CSResponseChangeTrainingTable.
     * @constructor
     * @param {ICSResponseChangeTrainingTable=} [properties] Properties to set
     */
    function CSResponseChangeTrainingTable(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseChangeTrainingTable result.
     * @member {ENMessageError}result
     * @memberof CSResponseChangeTrainingTable
     * @instance
     */
    CSResponseChangeTrainingTable.prototype.result = 0;

    /**
     * CSResponseChangeTrainingTable gameServerIp.
     * @member {string}gameServerIp
     * @memberof CSResponseChangeTrainingTable
     * @instance
     */
    CSResponseChangeTrainingTable.prototype.gameServerIp = "";

    /**
     * CSResponseChangeTrainingTable gameServerPort.
     * @member {number}gameServerPort
     * @memberof CSResponseChangeTrainingTable
     * @instance
     */
    CSResponseChangeTrainingTable.prototype.gameServerPort = 0;

    /**
     * CSResponseChangeTrainingTable gameTableId.
     * @member {number}gameTableId
     * @memberof CSResponseChangeTrainingTable
     * @instance
     */
    CSResponseChangeTrainingTable.prototype.gameTableId = 0;

    /**
     * Creates a new CSResponseChangeTrainingTable instance using the specified properties.
     * @function create
     * @memberof CSResponseChangeTrainingTable
     * @static
     * @param {ICSResponseChangeTrainingTable=} [properties] Properties to set
     * @returns {CSResponseChangeTrainingTable} CSResponseChangeTrainingTable instance
     */
    CSResponseChangeTrainingTable.create = function create(properties) {
        return new CSResponseChangeTrainingTable(properties);
    };

    /**
     * Encodes the specified CSResponseChangeTrainingTable message. Does not implicitly {@link CSResponseChangeTrainingTable.verify|verify} messages.
     * @function encode
     * @memberof CSResponseChangeTrainingTable
     * @static
     * @param {ICSResponseChangeTrainingTable} message CSResponseChangeTrainingTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseChangeTrainingTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.gameServerIp);
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gameServerPort);
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gameTableId);
        return writer;
    };

    /**
     * Encodes the specified CSResponseChangeTrainingTable message, length delimited. Does not implicitly {@link CSResponseChangeTrainingTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseChangeTrainingTable
     * @static
     * @param {ICSResponseChangeTrainingTable} message CSResponseChangeTrainingTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseChangeTrainingTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseChangeTrainingTable message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseChangeTrainingTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseChangeTrainingTable} CSResponseChangeTrainingTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseChangeTrainingTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseChangeTrainingTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.gameServerIp = reader.string();
                break;
            case 3:
                message.gameServerPort = reader.uint32();
                break;
            case 4:
                message.gameTableId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseChangeTrainingTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseChangeTrainingTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseChangeTrainingTable} CSResponseChangeTrainingTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseChangeTrainingTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseChangeTrainingTable message.
     * @function verify
     * @memberof CSResponseChangeTrainingTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseChangeTrainingTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            if (!$util.isString(message.gameServerIp))
                return "gameServerIp: string expected";
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            if (!$util.isInteger(message.gameServerPort))
                return "gameServerPort: integer expected";
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            if (!$util.isInteger(message.gameTableId))
                return "gameTableId: integer expected";
        return null;
    };

    /**
     * Creates a CSResponseChangeTrainingTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseChangeTrainingTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseChangeTrainingTable} CSResponseChangeTrainingTable
     */
    CSResponseChangeTrainingTable.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseChangeTrainingTable)
            return object;
        var message = new $root.CSResponseChangeTrainingTable();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.gameServerIp != null)
            message.gameServerIp = String(object.gameServerIp);
        if (object.gameServerPort != null)
            message.gameServerPort = object.gameServerPort >>> 0;
        if (object.gameTableId != null)
            message.gameTableId = object.gameTableId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSResponseChangeTrainingTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseChangeTrainingTable
     * @static
     * @param {CSResponseChangeTrainingTable} message CSResponseChangeTrainingTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseChangeTrainingTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.gameServerIp = "";
            object.gameServerPort = 0;
            object.gameTableId = 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.gameServerIp != null && message.hasOwnProperty("gameServerIp"))
            object.gameServerIp = message.gameServerIp;
        if (message.gameServerPort != null && message.hasOwnProperty("gameServerPort"))
            object.gameServerPort = message.gameServerPort;
        if (message.gameTableId != null && message.hasOwnProperty("gameTableId"))
            object.gameTableId = message.gameTableId;
        return object;
    };

    /**
     * Converts this CSResponseChangeTrainingTable to JSON.
     * @function toJSON
     * @memberof CSResponseChangeTrainingTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseChangeTrainingTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseChangeTrainingTable;
})();

$root.CSTablePlayer = (function() {

    /**
     * Properties of a CSTablePlayer.
     * @exports ICSTablePlayer
     * @interface ICSTablePlayer
     * @property {ENPlayerState} [state] CSTablePlayer state
     * @property {number} [index] CSTablePlayer index
     * @property {number|Long} [playerUid] CSTablePlayer playerUid
     * @property {number|Long} [chips] CSTablePlayer chips
     * @property {number|Long} [betChips] CSTablePlayer betChips
     * @property {boolean} [isTuoguan] CSTablePlayer isTuoguan
     * @property {number} [sngRank] CSTablePlayer sngRank
     * @property {ENPlayerAction} [actionType] CSTablePlayer actionType
     * @property {number} [resetTimeCount] CSTablePlayer resetTimeCount
     */

    /**
     * Constructs a new CSTablePlayer.
     * @exports CSTablePlayer
     * @classdesc Represents a CSTablePlayer.
     * @constructor
     * @param {ICSTablePlayer=} [properties] Properties to set
     */
    function CSTablePlayer(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSTablePlayer state.
     * @member {ENPlayerState}state
     * @memberof CSTablePlayer
     * @instance
     */
    CSTablePlayer.prototype.state = 0;

    /**
     * CSTablePlayer index.
     * @member {number}index
     * @memberof CSTablePlayer
     * @instance
     */
    CSTablePlayer.prototype.index = 0;

    /**
     * CSTablePlayer playerUid.
     * @member {number|Long}playerUid
     * @memberof CSTablePlayer
     * @instance
     */
    CSTablePlayer.prototype.playerUid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTablePlayer chips.
     * @member {number|Long}chips
     * @memberof CSTablePlayer
     * @instance
     */
    CSTablePlayer.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTablePlayer betChips.
     * @member {number|Long}betChips
     * @memberof CSTablePlayer
     * @instance
     */
    CSTablePlayer.prototype.betChips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTablePlayer isTuoguan.
     * @member {boolean}isTuoguan
     * @memberof CSTablePlayer
     * @instance
     */
    CSTablePlayer.prototype.isTuoguan = false;

    /**
     * CSTablePlayer sngRank.
     * @member {number}sngRank
     * @memberof CSTablePlayer
     * @instance
     */
    CSTablePlayer.prototype.sngRank = 0;

    /**
     * CSTablePlayer actionType.
     * @member {ENPlayerAction}actionType
     * @memberof CSTablePlayer
     * @instance
     */
    CSTablePlayer.prototype.actionType = 7;

    /**
     * CSTablePlayer resetTimeCount.
     * @member {number}resetTimeCount
     * @memberof CSTablePlayer
     * @instance
     */
    CSTablePlayer.prototype.resetTimeCount = 0;

    /**
     * Creates a new CSTablePlayer instance using the specified properties.
     * @function create
     * @memberof CSTablePlayer
     * @static
     * @param {ICSTablePlayer=} [properties] Properties to set
     * @returns {CSTablePlayer} CSTablePlayer instance
     */
    CSTablePlayer.create = function create(properties) {
        return new CSTablePlayer(properties);
    };

    /**
     * Encodes the specified CSTablePlayer message. Does not implicitly {@link CSTablePlayer.verify|verify} messages.
     * @function encode
     * @memberof CSTablePlayer
     * @static
     * @param {ICSTablePlayer} message CSTablePlayer message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTablePlayer.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.playerUid);
        if (message.chips != null && message.hasOwnProperty("chips"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.chips);
        if (message.betChips != null && message.hasOwnProperty("betChips"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.betChips);
        if (message.isTuoguan != null && message.hasOwnProperty("isTuoguan"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isTuoguan);
        if (message.sngRank != null && message.hasOwnProperty("sngRank"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.sngRank);
        if (message.actionType != null && message.hasOwnProperty("actionType"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.actionType);
        if (message.resetTimeCount != null && message.hasOwnProperty("resetTimeCount"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.resetTimeCount);
        return writer;
    };

    /**
     * Encodes the specified CSTablePlayer message, length delimited. Does not implicitly {@link CSTablePlayer.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSTablePlayer
     * @static
     * @param {ICSTablePlayer} message CSTablePlayer message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTablePlayer.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSTablePlayer message from the specified reader or buffer.
     * @function decode
     * @memberof CSTablePlayer
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSTablePlayer} CSTablePlayer
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTablePlayer.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSTablePlayer();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.state = reader.int32();
                break;
            case 2:
                message.index = reader.uint32();
                break;
            case 3:
                message.playerUid = reader.uint64();
                break;
            case 4:
                message.chips = reader.uint64();
                break;
            case 5:
                message.betChips = reader.uint64();
                break;
            case 6:
                message.isTuoguan = reader.bool();
                break;
            case 7:
                message.sngRank = reader.uint32();
                break;
            case 8:
                message.actionType = reader.int32();
                break;
            case 10:
                message.resetTimeCount = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSTablePlayer message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSTablePlayer
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSTablePlayer} CSTablePlayer
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTablePlayer.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSTablePlayer message.
     * @function verify
     * @memberof CSTablePlayer
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSTablePlayer.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            if (!$util.isInteger(message.playerUid) && !(message.playerUid && $util.isInteger(message.playerUid.low) && $util.isInteger(message.playerUid.high)))
                return "playerUid: integer|Long expected";
        if (message.chips != null && message.hasOwnProperty("chips"))
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
        if (message.betChips != null && message.hasOwnProperty("betChips"))
            if (!$util.isInteger(message.betChips) && !(message.betChips && $util.isInteger(message.betChips.low) && $util.isInteger(message.betChips.high)))
                return "betChips: integer|Long expected";
        if (message.isTuoguan != null && message.hasOwnProperty("isTuoguan"))
            if (typeof message.isTuoguan !== "boolean")
                return "isTuoguan: boolean expected";
        if (message.sngRank != null && message.hasOwnProperty("sngRank"))
            if (!$util.isInteger(message.sngRank))
                return "sngRank: integer expected";
        if (message.actionType != null && message.hasOwnProperty("actionType"))
            switch (message.actionType) {
            default:
                return "actionType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                break;
            }
        if (message.resetTimeCount != null && message.hasOwnProperty("resetTimeCount"))
            if (!$util.isInteger(message.resetTimeCount))
                return "resetTimeCount: integer expected";
        return null;
    };

    /**
     * Creates a CSTablePlayer message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSTablePlayer
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSTablePlayer} CSTablePlayer
     */
    CSTablePlayer.fromObject = function fromObject(object) {
        if (object instanceof $root.CSTablePlayer)
            return object;
        var message = new $root.CSTablePlayer();
        switch (object.state) {
        case "EN_PLAYER_STATE_NO_PLAYER":
        case 0:
            message.state = 0;
            break;
        case "EN_PLAYER_STATE_PRE_SITDOWN":
        case 1:
            message.state = 1;
            break;
        case "EN_PLAYER_STATE_WAIT_FOR_NEXT_ONE_GAME":
        case 2:
            message.state = 2;
            break;
        case "EN_PLAYER_STATE_PLAYING":
        case 3:
            message.state = 3;
            break;
        case "EN_PLAYER_STATE_ALL_IN":
        case 4:
            message.state = 4;
            break;
        case "EN_PLAYER_STATE_FOLD":
        case 5:
            message.state = 5;
            break;
        }
        if (object.index != null)
            message.index = object.index >>> 0;
        if (object.playerUid != null)
            if ($util.Long)
                (message.playerUid = $util.Long.fromValue(object.playerUid)).unsigned = true;
            else if (typeof object.playerUid === "string")
                message.playerUid = parseInt(object.playerUid, 10);
            else if (typeof object.playerUid === "number")
                message.playerUid = object.playerUid;
            else if (typeof object.playerUid === "object")
                message.playerUid = new $util.LongBits(object.playerUid.low >>> 0, object.playerUid.high >>> 0).toNumber(true);
        if (object.chips != null)
            if ($util.Long)
                (message.chips = $util.Long.fromValue(object.chips)).unsigned = true;
            else if (typeof object.chips === "string")
                message.chips = parseInt(object.chips, 10);
            else if (typeof object.chips === "number")
                message.chips = object.chips;
            else if (typeof object.chips === "object")
                message.chips = new $util.LongBits(object.chips.low >>> 0, object.chips.high >>> 0).toNumber(true);
        if (object.betChips != null)
            if ($util.Long)
                (message.betChips = $util.Long.fromValue(object.betChips)).unsigned = true;
            else if (typeof object.betChips === "string")
                message.betChips = parseInt(object.betChips, 10);
            else if (typeof object.betChips === "number")
                message.betChips = object.betChips;
            else if (typeof object.betChips === "object")
                message.betChips = new $util.LongBits(object.betChips.low >>> 0, object.betChips.high >>> 0).toNumber(true);
        if (object.isTuoguan != null)
            message.isTuoguan = Boolean(object.isTuoguan);
        if (object.sngRank != null)
            message.sngRank = object.sngRank >>> 0;
        switch (object.actionType) {
        case "EN_PLAYER_ACTION_BET":
        case 0:
            message.actionType = 0;
            break;
        case "EN_PLAYER_ACTION_CALL":
        case 1:
            message.actionType = 1;
            break;
        case "EN_PLAYER_ACTION_CHECK":
        case 2:
            message.actionType = 2;
            break;
        case "EN_PLAYER_ACTION_FOLD":
        case 3:
            message.actionType = 3;
            break;
        case "EN_PLAYER_ACTION_RAISE":
        case 4:
            message.actionType = 4;
            break;
        case "EN_PLAYER_ACTION_ALL_IN":
        case 5:
            message.actionType = 5;
            break;
        case "EN_PLAYER_ACTION_PRE_BET":
        case 6:
            message.actionType = 6;
            break;
        case "EN_PLAYER_ACTION_NONE":
        case 7:
            message.actionType = 7;
            break;
        }
        if (object.resetTimeCount != null)
            message.resetTimeCount = object.resetTimeCount >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSTablePlayer message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSTablePlayer
     * @static
     * @param {CSTablePlayer} message CSTablePlayer
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSTablePlayer.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.state = options.enums === String ? "EN_PLAYER_STATE_NO_PLAYER" : 0;
            object.index = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.playerUid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.playerUid = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.chips = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.chips = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.betChips = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.betChips = options.longs === String ? "0" : 0;
            object.isTuoguan = false;
            object.sngRank = 0;
            object.actionType = options.enums === String ? "EN_PLAYER_ACTION_NONE" : 7;
            object.resetTimeCount = 0;
        }
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.ENPlayerState[message.state] : message.state;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            if (typeof message.playerUid === "number")
                object.playerUid = options.longs === String ? String(message.playerUid) : message.playerUid;
            else
                object.playerUid = options.longs === String ? $util.Long.prototype.toString.call(message.playerUid) : options.longs === Number ? new $util.LongBits(message.playerUid.low >>> 0, message.playerUid.high >>> 0).toNumber(true) : message.playerUid;
        if (message.chips != null && message.hasOwnProperty("chips"))
            if (typeof message.chips === "number")
                object.chips = options.longs === String ? String(message.chips) : message.chips;
            else
                object.chips = options.longs === String ? $util.Long.prototype.toString.call(message.chips) : options.longs === Number ? new $util.LongBits(message.chips.low >>> 0, message.chips.high >>> 0).toNumber(true) : message.chips;
        if (message.betChips != null && message.hasOwnProperty("betChips"))
            if (typeof message.betChips === "number")
                object.betChips = options.longs === String ? String(message.betChips) : message.betChips;
            else
                object.betChips = options.longs === String ? $util.Long.prototype.toString.call(message.betChips) : options.longs === Number ? new $util.LongBits(message.betChips.low >>> 0, message.betChips.high >>> 0).toNumber(true) : message.betChips;
        if (message.isTuoguan != null && message.hasOwnProperty("isTuoguan"))
            object.isTuoguan = message.isTuoguan;
        if (message.sngRank != null && message.hasOwnProperty("sngRank"))
            object.sngRank = message.sngRank;
        if (message.actionType != null && message.hasOwnProperty("actionType"))
            object.actionType = options.enums === String ? $root.ENPlayerAction[message.actionType] : message.actionType;
        if (message.resetTimeCount != null && message.hasOwnProperty("resetTimeCount"))
            object.resetTimeCount = message.resetTimeCount;
        return object;
    };

    /**
     * Converts this CSTablePlayer to JSON.
     * @function toJSON
     * @memberof CSTablePlayer
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSTablePlayer.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSTablePlayer;
})();

$root.CSTablePot = (function() {

    /**
     * Properties of a CSTablePot.
     * @exports ICSTablePot
     * @interface ICSTablePot
     * @property {number|Long} [totalBet] CSTablePot totalBet
     * @property {number|Long} [subChipsThisRound] CSTablePot subChipsThisRound
     */

    /**
     * Constructs a new CSTablePot.
     * @exports CSTablePot
     * @classdesc Represents a CSTablePot.
     * @constructor
     * @param {ICSTablePot=} [properties] Properties to set
     */
    function CSTablePot(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSTablePot totalBet.
     * @member {number|Long}totalBet
     * @memberof CSTablePot
     * @instance
     */
    CSTablePot.prototype.totalBet = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTablePot subChipsThisRound.
     * @member {number|Long}subChipsThisRound
     * @memberof CSTablePot
     * @instance
     */
    CSTablePot.prototype.subChipsThisRound = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSTablePot instance using the specified properties.
     * @function create
     * @memberof CSTablePot
     * @static
     * @param {ICSTablePot=} [properties] Properties to set
     * @returns {CSTablePot} CSTablePot instance
     */
    CSTablePot.create = function create(properties) {
        return new CSTablePot(properties);
    };

    /**
     * Encodes the specified CSTablePot message. Does not implicitly {@link CSTablePot.verify|verify} messages.
     * @function encode
     * @memberof CSTablePot
     * @static
     * @param {ICSTablePot} message CSTablePot message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTablePot.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.totalBet != null && message.hasOwnProperty("totalBet"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.totalBet);
        if (message.subChipsThisRound != null && message.hasOwnProperty("subChipsThisRound"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.subChipsThisRound);
        return writer;
    };

    /**
     * Encodes the specified CSTablePot message, length delimited. Does not implicitly {@link CSTablePot.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSTablePot
     * @static
     * @param {ICSTablePot} message CSTablePot message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTablePot.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSTablePot message from the specified reader or buffer.
     * @function decode
     * @memberof CSTablePot
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSTablePot} CSTablePot
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTablePot.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSTablePot();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.totalBet = reader.uint64();
                break;
            case 2:
                message.subChipsThisRound = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSTablePot message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSTablePot
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSTablePot} CSTablePot
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTablePot.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSTablePot message.
     * @function verify
     * @memberof CSTablePot
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSTablePot.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.totalBet != null && message.hasOwnProperty("totalBet"))
            if (!$util.isInteger(message.totalBet) && !(message.totalBet && $util.isInteger(message.totalBet.low) && $util.isInteger(message.totalBet.high)))
                return "totalBet: integer|Long expected";
        if (message.subChipsThisRound != null && message.hasOwnProperty("subChipsThisRound"))
            if (!$util.isInteger(message.subChipsThisRound) && !(message.subChipsThisRound && $util.isInteger(message.subChipsThisRound.low) && $util.isInteger(message.subChipsThisRound.high)))
                return "subChipsThisRound: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSTablePot message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSTablePot
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSTablePot} CSTablePot
     */
    CSTablePot.fromObject = function fromObject(object) {
        if (object instanceof $root.CSTablePot)
            return object;
        var message = new $root.CSTablePot();
        if (object.totalBet != null)
            if ($util.Long)
                (message.totalBet = $util.Long.fromValue(object.totalBet)).unsigned = true;
            else if (typeof object.totalBet === "string")
                message.totalBet = parseInt(object.totalBet, 10);
            else if (typeof object.totalBet === "number")
                message.totalBet = object.totalBet;
            else if (typeof object.totalBet === "object")
                message.totalBet = new $util.LongBits(object.totalBet.low >>> 0, object.totalBet.high >>> 0).toNumber(true);
        if (object.subChipsThisRound != null)
            if ($util.Long)
                (message.subChipsThisRound = $util.Long.fromValue(object.subChipsThisRound)).unsigned = true;
            else if (typeof object.subChipsThisRound === "string")
                message.subChipsThisRound = parseInt(object.subChipsThisRound, 10);
            else if (typeof object.subChipsThisRound === "number")
                message.subChipsThisRound = object.subChipsThisRound;
            else if (typeof object.subChipsThisRound === "object")
                message.subChipsThisRound = new $util.LongBits(object.subChipsThisRound.low >>> 0, object.subChipsThisRound.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSTablePot message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSTablePot
     * @static
     * @param {CSTablePot} message CSTablePot
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSTablePot.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.totalBet = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.totalBet = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.subChipsThisRound = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.subChipsThisRound = options.longs === String ? "0" : 0;
        }
        if (message.totalBet != null && message.hasOwnProperty("totalBet"))
            if (typeof message.totalBet === "number")
                object.totalBet = options.longs === String ? String(message.totalBet) : message.totalBet;
            else
                object.totalBet = options.longs === String ? $util.Long.prototype.toString.call(message.totalBet) : options.longs === Number ? new $util.LongBits(message.totalBet.low >>> 0, message.totalBet.high >>> 0).toNumber(true) : message.totalBet;
        if (message.subChipsThisRound != null && message.hasOwnProperty("subChipsThisRound"))
            if (typeof message.subChipsThisRound === "number")
                object.subChipsThisRound = options.longs === String ? String(message.subChipsThisRound) : message.subChipsThisRound;
            else
                object.subChipsThisRound = options.longs === String ? $util.Long.prototype.toString.call(message.subChipsThisRound) : options.longs === Number ? new $util.LongBits(message.subChipsThisRound.low >>> 0, message.subChipsThisRound.high >>> 0).toNumber(true) : message.subChipsThisRound;
        return object;
    };

    /**
     * Converts this CSTablePot to JSON.
     * @function toJSON
     * @memberof CSTablePot
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSTablePot.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSTablePot;
})();

$root.CSTablePlayerResult = (function() {

    /**
     * Properties of a CSTablePlayerResult.
     * @exports ICSTablePlayerResult
     * @interface ICSTablePlayerResult
     * @property {number} [index] CSTablePlayerResult index
     * @property {number|Long} [chips] CSTablePlayerResult chips
     * @property {ENPlayerState} [state] CSTablePlayerResult state
     * @property {number|Long} [playerUid] CSTablePlayerResult playerUid
     * @property {ENCardForm} [cardForm] CSTablePlayerResult cardForm
     * @property {Array.<number>} [holeCards] CSTablePlayerResult holeCards
     * @property {Array.<number>} [formCards] CSTablePlayerResult formCards
     * @property {number|Long} [winLose] CSTablePlayerResult winLose
     * @property {number} [foldRound] CSTablePlayerResult foldRound
     * @property {boolean} [isCalcPot] CSTablePlayerResult isCalcPot
     */

    /**
     * Constructs a new CSTablePlayerResult.
     * @exports CSTablePlayerResult
     * @classdesc Represents a CSTablePlayerResult.
     * @constructor
     * @param {ICSTablePlayerResult=} [properties] Properties to set
     */
    function CSTablePlayerResult(properties) {
        this.holeCards = [];
        this.formCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSTablePlayerResult index.
     * @member {number}index
     * @memberof CSTablePlayerResult
     * @instance
     */
    CSTablePlayerResult.prototype.index = 0;

    /**
     * CSTablePlayerResult chips.
     * @member {number|Long}chips
     * @memberof CSTablePlayerResult
     * @instance
     */
    CSTablePlayerResult.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTablePlayerResult state.
     * @member {ENPlayerState}state
     * @memberof CSTablePlayerResult
     * @instance
     */
    CSTablePlayerResult.prototype.state = 0;

    /**
     * CSTablePlayerResult playerUid.
     * @member {number|Long}playerUid
     * @memberof CSTablePlayerResult
     * @instance
     */
    CSTablePlayerResult.prototype.playerUid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTablePlayerResult cardForm.
     * @member {ENCardForm}cardForm
     * @memberof CSTablePlayerResult
     * @instance
     */
    CSTablePlayerResult.prototype.cardForm = 0;

    /**
     * CSTablePlayerResult holeCards.
     * @member {Array.<number>}holeCards
     * @memberof CSTablePlayerResult
     * @instance
     */
    CSTablePlayerResult.prototype.holeCards = $util.emptyArray;

    /**
     * CSTablePlayerResult formCards.
     * @member {Array.<number>}formCards
     * @memberof CSTablePlayerResult
     * @instance
     */
    CSTablePlayerResult.prototype.formCards = $util.emptyArray;

    /**
     * CSTablePlayerResult winLose.
     * @member {number|Long}winLose
     * @memberof CSTablePlayerResult
     * @instance
     */
    CSTablePlayerResult.prototype.winLose = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * CSTablePlayerResult foldRound.
     * @member {number}foldRound
     * @memberof CSTablePlayerResult
     * @instance
     */
    CSTablePlayerResult.prototype.foldRound = 0;

    /**
     * CSTablePlayerResult isCalcPot.
     * @member {boolean}isCalcPot
     * @memberof CSTablePlayerResult
     * @instance
     */
    CSTablePlayerResult.prototype.isCalcPot = false;

    /**
     * Creates a new CSTablePlayerResult instance using the specified properties.
     * @function create
     * @memberof CSTablePlayerResult
     * @static
     * @param {ICSTablePlayerResult=} [properties] Properties to set
     * @returns {CSTablePlayerResult} CSTablePlayerResult instance
     */
    CSTablePlayerResult.create = function create(properties) {
        return new CSTablePlayerResult(properties);
    };

    /**
     * Encodes the specified CSTablePlayerResult message. Does not implicitly {@link CSTablePlayerResult.verify|verify} messages.
     * @function encode
     * @memberof CSTablePlayerResult
     * @static
     * @param {ICSTablePlayerResult} message CSTablePlayerResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTablePlayerResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.playerUid);
        if (message.chips != null && message.hasOwnProperty("chips"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.chips);
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.cardForm);
        if (message.holeCards != null && message.holeCards.length)
            for (var i = 0; i < message.holeCards.length; ++i)
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.holeCards[i]);
        if (message.formCards != null && message.formCards.length)
            for (var i = 0; i < message.formCards.length; ++i)
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.formCards[i]);
        if (message.isCalcPot != null && message.hasOwnProperty("isCalcPot"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.isCalcPot);
        if (message.winLose != null && message.hasOwnProperty("winLose"))
            writer.uint32(/* id 11, wireType 0 =*/88).int64(message.winLose);
        if (message.foldRound != null && message.hasOwnProperty("foldRound"))
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.foldRound);
        return writer;
    };

    /**
     * Encodes the specified CSTablePlayerResult message, length delimited. Does not implicitly {@link CSTablePlayerResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSTablePlayerResult
     * @static
     * @param {ICSTablePlayerResult} message CSTablePlayerResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTablePlayerResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSTablePlayerResult message from the specified reader or buffer.
     * @function decode
     * @memberof CSTablePlayerResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSTablePlayerResult} CSTablePlayerResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTablePlayerResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSTablePlayerResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.index = reader.uint32();
                break;
            case 4:
                message.chips = reader.uint64();
                break;
            case 1:
                message.state = reader.int32();
                break;
            case 3:
                message.playerUid = reader.uint64();
                break;
            case 7:
                message.cardForm = reader.int32();
                break;
            case 8:
                if (!(message.holeCards && message.holeCards.length))
                    message.holeCards = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.holeCards.push(reader.uint32());
                } else
                    message.holeCards.push(reader.uint32());
                break;
            case 9:
                if (!(message.formCards && message.formCards.length))
                    message.formCards = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.formCards.push(reader.uint32());
                } else
                    message.formCards.push(reader.uint32());
                break;
            case 11:
                message.winLose = reader.int64();
                break;
            case 12:
                message.foldRound = reader.uint32();
                break;
            case 10:
                message.isCalcPot = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSTablePlayerResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSTablePlayerResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSTablePlayerResult} CSTablePlayerResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTablePlayerResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSTablePlayerResult message.
     * @function verify
     * @memberof CSTablePlayerResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSTablePlayerResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        if (message.chips != null && message.hasOwnProperty("chips"))
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            if (!$util.isInteger(message.playerUid) && !(message.playerUid && $util.isInteger(message.playerUid.low) && $util.isInteger(message.playerUid.high)))
                return "playerUid: integer|Long expected";
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            switch (message.cardForm) {
            default:
                return "cardForm: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
        if (message.holeCards != null && message.hasOwnProperty("holeCards")) {
            if (!Array.isArray(message.holeCards))
                return "holeCards: array expected";
            for (var i = 0; i < message.holeCards.length; ++i)
                if (!$util.isInteger(message.holeCards[i]))
                    return "holeCards: integer[] expected";
        }
        if (message.formCards != null && message.hasOwnProperty("formCards")) {
            if (!Array.isArray(message.formCards))
                return "formCards: array expected";
            for (var i = 0; i < message.formCards.length; ++i)
                if (!$util.isInteger(message.formCards[i]))
                    return "formCards: integer[] expected";
        }
        if (message.winLose != null && message.hasOwnProperty("winLose"))
            if (!$util.isInteger(message.winLose) && !(message.winLose && $util.isInteger(message.winLose.low) && $util.isInteger(message.winLose.high)))
                return "winLose: integer|Long expected";
        if (message.foldRound != null && message.hasOwnProperty("foldRound"))
            if (!$util.isInteger(message.foldRound))
                return "foldRound: integer expected";
        if (message.isCalcPot != null && message.hasOwnProperty("isCalcPot"))
            if (typeof message.isCalcPot !== "boolean")
                return "isCalcPot: boolean expected";
        return null;
    };

    /**
     * Creates a CSTablePlayerResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSTablePlayerResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSTablePlayerResult} CSTablePlayerResult
     */
    CSTablePlayerResult.fromObject = function fromObject(object) {
        if (object instanceof $root.CSTablePlayerResult)
            return object;
        var message = new $root.CSTablePlayerResult();
        if (object.index != null)
            message.index = object.index >>> 0;
        if (object.chips != null)
            if ($util.Long)
                (message.chips = $util.Long.fromValue(object.chips)).unsigned = true;
            else if (typeof object.chips === "string")
                message.chips = parseInt(object.chips, 10);
            else if (typeof object.chips === "number")
                message.chips = object.chips;
            else if (typeof object.chips === "object")
                message.chips = new $util.LongBits(object.chips.low >>> 0, object.chips.high >>> 0).toNumber(true);
        switch (object.state) {
        case "EN_PLAYER_STATE_NO_PLAYER":
        case 0:
            message.state = 0;
            break;
        case "EN_PLAYER_STATE_PRE_SITDOWN":
        case 1:
            message.state = 1;
            break;
        case "EN_PLAYER_STATE_WAIT_FOR_NEXT_ONE_GAME":
        case 2:
            message.state = 2;
            break;
        case "EN_PLAYER_STATE_PLAYING":
        case 3:
            message.state = 3;
            break;
        case "EN_PLAYER_STATE_ALL_IN":
        case 4:
            message.state = 4;
            break;
        case "EN_PLAYER_STATE_FOLD":
        case 5:
            message.state = 5;
            break;
        }
        if (object.playerUid != null)
            if ($util.Long)
                (message.playerUid = $util.Long.fromValue(object.playerUid)).unsigned = true;
            else if (typeof object.playerUid === "string")
                message.playerUid = parseInt(object.playerUid, 10);
            else if (typeof object.playerUid === "number")
                message.playerUid = object.playerUid;
            else if (typeof object.playerUid === "object")
                message.playerUid = new $util.LongBits(object.playerUid.low >>> 0, object.playerUid.high >>> 0).toNumber(true);
        switch (object.cardForm) {
        case "EN_CARD_FORM_UNKONWN":
        case 0:
            message.cardForm = 0;
            break;
        case "EN_CARD_FORM_HIGH_CARD":
        case 1:
            message.cardForm = 1;
            break;
        case "EN_CARD_FORM_ONE_PAIR":
        case 2:
            message.cardForm = 2;
            break;
        case "EN_CARD_FORM_TWO_PAIR":
        case 3:
            message.cardForm = 3;
            break;
        case "EN_CARD_FORM_THREE_OF_A_KING":
        case 4:
            message.cardForm = 4;
            break;
        case "EN_CARD_FORM_FLUSH":
        case 5:
            message.cardForm = 5;
            break;
        case "EN_CARD_FORM_STRAIGHT":
        case 6:
            message.cardForm = 6;
            break;
        case "EN_CARD_FORM_FULL_HOUSE":
        case 7:
            message.cardForm = 7;
            break;
        case "EN_CARD_FORM_FOUR_OF_A_KING":
        case 8:
            message.cardForm = 8;
            break;
        case "EN_CARD_FORM_STRAIGHT_FLUSH":
        case 9:
            message.cardForm = 9;
            break;
        case "EN_CARD_FORM_ROYAL_FLUSH":
        case 10:
            message.cardForm = 10;
            break;
        }
        if (object.holeCards) {
            if (!Array.isArray(object.holeCards))
                throw TypeError(".CSTablePlayerResult.holeCards: array expected");
            message.holeCards = [];
            for (var i = 0; i < object.holeCards.length; ++i)
                message.holeCards[i] = object.holeCards[i] >>> 0;
        }
        if (object.formCards) {
            if (!Array.isArray(object.formCards))
                throw TypeError(".CSTablePlayerResult.formCards: array expected");
            message.formCards = [];
            for (var i = 0; i < object.formCards.length; ++i)
                message.formCards[i] = object.formCards[i] >>> 0;
        }
        if (object.winLose != null)
            if ($util.Long)
                (message.winLose = $util.Long.fromValue(object.winLose)).unsigned = false;
            else if (typeof object.winLose === "string")
                message.winLose = parseInt(object.winLose, 10);
            else if (typeof object.winLose === "number")
                message.winLose = object.winLose;
            else if (typeof object.winLose === "object")
                message.winLose = new $util.LongBits(object.winLose.low >>> 0, object.winLose.high >>> 0).toNumber();
        if (object.foldRound != null)
            message.foldRound = object.foldRound >>> 0;
        if (object.isCalcPot != null)
            message.isCalcPot = Boolean(object.isCalcPot);
        return message;
    };

    /**
     * Creates a plain object from a CSTablePlayerResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSTablePlayerResult
     * @static
     * @param {CSTablePlayerResult} message CSTablePlayerResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSTablePlayerResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.holeCards = [];
            object.formCards = [];
        }
        if (options.defaults) {
            object.state = options.enums === String ? "EN_PLAYER_STATE_NO_PLAYER" : 0;
            object.index = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.playerUid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.playerUid = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.chips = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.chips = options.longs === String ? "0" : 0;
            object.cardForm = options.enums === String ? "EN_CARD_FORM_UNKONWN" : 0;
            object.isCalcPot = false;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.winLose = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.winLose = options.longs === String ? "0" : 0;
            object.foldRound = 0;
        }
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.ENPlayerState[message.state] : message.state;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            if (typeof message.playerUid === "number")
                object.playerUid = options.longs === String ? String(message.playerUid) : message.playerUid;
            else
                object.playerUid = options.longs === String ? $util.Long.prototype.toString.call(message.playerUid) : options.longs === Number ? new $util.LongBits(message.playerUid.low >>> 0, message.playerUid.high >>> 0).toNumber(true) : message.playerUid;
        if (message.chips != null && message.hasOwnProperty("chips"))
            if (typeof message.chips === "number")
                object.chips = options.longs === String ? String(message.chips) : message.chips;
            else
                object.chips = options.longs === String ? $util.Long.prototype.toString.call(message.chips) : options.longs === Number ? new $util.LongBits(message.chips.low >>> 0, message.chips.high >>> 0).toNumber(true) : message.chips;
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            object.cardForm = options.enums === String ? $root.ENCardForm[message.cardForm] : message.cardForm;
        if (message.holeCards && message.holeCards.length) {
            object.holeCards = [];
            for (var j = 0; j < message.holeCards.length; ++j)
                object.holeCards[j] = message.holeCards[j];
        }
        if (message.formCards && message.formCards.length) {
            object.formCards = [];
            for (var j = 0; j < message.formCards.length; ++j)
                object.formCards[j] = message.formCards[j];
        }
        if (message.isCalcPot != null && message.hasOwnProperty("isCalcPot"))
            object.isCalcPot = message.isCalcPot;
        if (message.winLose != null && message.hasOwnProperty("winLose"))
            if (typeof message.winLose === "number")
                object.winLose = options.longs === String ? String(message.winLose) : message.winLose;
            else
                object.winLose = options.longs === String ? $util.Long.prototype.toString.call(message.winLose) : options.longs === Number ? new $util.LongBits(message.winLose.low >>> 0, message.winLose.high >>> 0).toNumber() : message.winLose;
        if (message.foldRound != null && message.hasOwnProperty("foldRound"))
            object.foldRound = message.foldRound;
        return object;
    };

    /**
     * Converts this CSTablePlayerResult to JSON.
     * @function toJSON
     * @memberof CSTablePlayerResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSTablePlayerResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSTablePlayerResult;
})();

$root.CSTablePotResult = (function() {

    /**
     * Properties of a CSTablePotResult.
     * @exports ICSTablePotResult
     * @interface ICSTablePotResult
     * @property {number|Long} [totalBet] CSTablePotResult totalBet
     * @property {Array.<number>} [winPlayerIndexes] CSTablePotResult winPlayerIndexes
     */

    /**
     * Constructs a new CSTablePotResult.
     * @exports CSTablePotResult
     * @classdesc Represents a CSTablePotResult.
     * @constructor
     * @param {ICSTablePotResult=} [properties] Properties to set
     */
    function CSTablePotResult(properties) {
        this.winPlayerIndexes = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSTablePotResult totalBet.
     * @member {number|Long}totalBet
     * @memberof CSTablePotResult
     * @instance
     */
    CSTablePotResult.prototype.totalBet = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTablePotResult winPlayerIndexes.
     * @member {Array.<number>}winPlayerIndexes
     * @memberof CSTablePotResult
     * @instance
     */
    CSTablePotResult.prototype.winPlayerIndexes = $util.emptyArray;

    /**
     * Creates a new CSTablePotResult instance using the specified properties.
     * @function create
     * @memberof CSTablePotResult
     * @static
     * @param {ICSTablePotResult=} [properties] Properties to set
     * @returns {CSTablePotResult} CSTablePotResult instance
     */
    CSTablePotResult.create = function create(properties) {
        return new CSTablePotResult(properties);
    };

    /**
     * Encodes the specified CSTablePotResult message. Does not implicitly {@link CSTablePotResult.verify|verify} messages.
     * @function encode
     * @memberof CSTablePotResult
     * @static
     * @param {ICSTablePotResult} message CSTablePotResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTablePotResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.totalBet != null && message.hasOwnProperty("totalBet"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.totalBet);
        if (message.winPlayerIndexes != null && message.winPlayerIndexes.length)
            for (var i = 0; i < message.winPlayerIndexes.length; ++i)
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.winPlayerIndexes[i]);
        return writer;
    };

    /**
     * Encodes the specified CSTablePotResult message, length delimited. Does not implicitly {@link CSTablePotResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSTablePotResult
     * @static
     * @param {ICSTablePotResult} message CSTablePotResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTablePotResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSTablePotResult message from the specified reader or buffer.
     * @function decode
     * @memberof CSTablePotResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSTablePotResult} CSTablePotResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTablePotResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSTablePotResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.totalBet = reader.uint64();
                break;
            case 4:
                if (!(message.winPlayerIndexes && message.winPlayerIndexes.length))
                    message.winPlayerIndexes = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.winPlayerIndexes.push(reader.uint32());
                } else
                    message.winPlayerIndexes.push(reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSTablePotResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSTablePotResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSTablePotResult} CSTablePotResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTablePotResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSTablePotResult message.
     * @function verify
     * @memberof CSTablePotResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSTablePotResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.totalBet != null && message.hasOwnProperty("totalBet"))
            if (!$util.isInteger(message.totalBet) && !(message.totalBet && $util.isInteger(message.totalBet.low) && $util.isInteger(message.totalBet.high)))
                return "totalBet: integer|Long expected";
        if (message.winPlayerIndexes != null && message.hasOwnProperty("winPlayerIndexes")) {
            if (!Array.isArray(message.winPlayerIndexes))
                return "winPlayerIndexes: array expected";
            for (var i = 0; i < message.winPlayerIndexes.length; ++i)
                if (!$util.isInteger(message.winPlayerIndexes[i]))
                    return "winPlayerIndexes: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a CSTablePotResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSTablePotResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSTablePotResult} CSTablePotResult
     */
    CSTablePotResult.fromObject = function fromObject(object) {
        if (object instanceof $root.CSTablePotResult)
            return object;
        var message = new $root.CSTablePotResult();
        if (object.totalBet != null)
            if ($util.Long)
                (message.totalBet = $util.Long.fromValue(object.totalBet)).unsigned = true;
            else if (typeof object.totalBet === "string")
                message.totalBet = parseInt(object.totalBet, 10);
            else if (typeof object.totalBet === "number")
                message.totalBet = object.totalBet;
            else if (typeof object.totalBet === "object")
                message.totalBet = new $util.LongBits(object.totalBet.low >>> 0, object.totalBet.high >>> 0).toNumber(true);
        if (object.winPlayerIndexes) {
            if (!Array.isArray(object.winPlayerIndexes))
                throw TypeError(".CSTablePotResult.winPlayerIndexes: array expected");
            message.winPlayerIndexes = [];
            for (var i = 0; i < object.winPlayerIndexes.length; ++i)
                message.winPlayerIndexes[i] = object.winPlayerIndexes[i] >>> 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSTablePotResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSTablePotResult
     * @static
     * @param {CSTablePotResult} message CSTablePotResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSTablePotResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.winPlayerIndexes = [];
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.totalBet = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.totalBet = options.longs === String ? "0" : 0;
        if (message.totalBet != null && message.hasOwnProperty("totalBet"))
            if (typeof message.totalBet === "number")
                object.totalBet = options.longs === String ? String(message.totalBet) : message.totalBet;
            else
                object.totalBet = options.longs === String ? $util.Long.prototype.toString.call(message.totalBet) : options.longs === Number ? new $util.LongBits(message.totalBet.low >>> 0, message.totalBet.high >>> 0).toNumber(true) : message.totalBet;
        if (message.winPlayerIndexes && message.winPlayerIndexes.length) {
            object.winPlayerIndexes = [];
            for (var j = 0; j < message.winPlayerIndexes.length; ++j)
                object.winPlayerIndexes[j] = message.winPlayerIndexes[j];
        }
        return object;
    };

    /**
     * Converts this CSTablePotResult to JSON.
     * @function toJSON
     * @memberof CSTablePotResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSTablePotResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSTablePotResult;
})();

$root.CSTableGameInfo = (function() {

    /**
     * Properties of a CSTableGameInfo.
     * @exports ICSTableGameInfo
     * @interface ICSTableGameInfo
     * @property {Array.<ICSTablePlayer>} [players] CSTableGameInfo players
     * @property {ENTableState} [state] CSTableGameInfo state
     * @property {number} [roundCount] CSTableGameInfo roundCount
     * @property {number} [buttonIndex] CSTableGameInfo buttonIndex
     * @property {number} [smallBlindsIndex] CSTableGameInfo smallBlindsIndex
     * @property {number} [smallBlindsNum] CSTableGameInfo smallBlindsNum
     * @property {number} [bigBlindsIndex] CSTableGameInfo bigBlindsIndex
     * @property {number} [bigBlindsNum] CSTableGameInfo bigBlindsNum
     * @property {Array.<number>} [communityCards] CSTableGameInfo communityCards
     * @property {Array.<ICSTablePot>} [pots] CSTableGameInfo pots
     * @property {number|Long} [minBuyIn] CSTableGameInfo minBuyIn
     * @property {number|Long} [maxBuyIn] CSTableGameInfo maxBuyIn
     * @property {number} [actionTime] CSTableGameInfo actionTime
     * @property {number} [actionTimeout] CSTableGameInfo actionTimeout
     * @property {number} [actionIndex] CSTableGameInfo actionIndex
     * @property {ENTableType} [tableType] CSTableGameInfo tableType
     * @property {number} [tableId] CSTableGameInfo tableId
     * @property {number} [maxPlayer] CSTableGameInfo maxPlayer
     * @property {number|Long} [ownerUid] CSTableGameInfo ownerUid
     * @property {number|Long} [gameDraw] CSTableGameInfo gameDraw
     * @property {string} [name] CSTableGameInfo name
     * @property {number} [createTime] CSTableGameInfo createTime
     * @property {number} [startTime] CSTableGameInfo startTime
     * @property {number} [raiseBlindTime] CSTableGameInfo raiseBlindTime
     * @property {number} [time] CSTableGameInfo time
     * @property {ICSTableInfo} [tableInfo] CSTableGameInfo tableInfo
     */

    /**
     * Constructs a new CSTableGameInfo.
     * @exports CSTableGameInfo
     * @classdesc Represents a CSTableGameInfo.
     * @constructor
     * @param {ICSTableGameInfo=} [properties] Properties to set
     */
    function CSTableGameInfo(properties) {
        this.players = [];
        this.communityCards = [];
        this.pots = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSTableGameInfo players.
     * @member {Array.<ICSTablePlayer>}players
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.players = $util.emptyArray;

    /**
     * CSTableGameInfo state.
     * @member {ENTableState}state
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.state = 0;

    /**
     * CSTableGameInfo roundCount.
     * @member {number}roundCount
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.roundCount = 0;

    /**
     * CSTableGameInfo buttonIndex.
     * @member {number}buttonIndex
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.buttonIndex = 0;

    /**
     * CSTableGameInfo smallBlindsIndex.
     * @member {number}smallBlindsIndex
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.smallBlindsIndex = 0;

    /**
     * CSTableGameInfo smallBlindsNum.
     * @member {number}smallBlindsNum
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.smallBlindsNum = 0;

    /**
     * CSTableGameInfo bigBlindsIndex.
     * @member {number}bigBlindsIndex
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.bigBlindsIndex = 0;

    /**
     * CSTableGameInfo bigBlindsNum.
     * @member {number}bigBlindsNum
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.bigBlindsNum = 0;

    /**
     * CSTableGameInfo communityCards.
     * @member {Array.<number>}communityCards
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.communityCards = $util.emptyArray;

    /**
     * CSTableGameInfo pots.
     * @member {Array.<ICSTablePot>}pots
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.pots = $util.emptyArray;

    /**
     * CSTableGameInfo minBuyIn.
     * @member {number|Long}minBuyIn
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.minBuyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableGameInfo maxBuyIn.
     * @member {number|Long}maxBuyIn
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.maxBuyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableGameInfo actionTime.
     * @member {number}actionTime
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.actionTime = 0;

    /**
     * CSTableGameInfo actionTimeout.
     * @member {number}actionTimeout
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.actionTimeout = 0;

    /**
     * CSTableGameInfo actionIndex.
     * @member {number}actionIndex
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.actionIndex = 0;

    /**
     * CSTableGameInfo tableType.
     * @member {ENTableType}tableType
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.tableType = 0;

    /**
     * CSTableGameInfo tableId.
     * @member {number}tableId
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.tableId = 0;

    /**
     * CSTableGameInfo maxPlayer.
     * @member {number}maxPlayer
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.maxPlayer = 0;

    /**
     * CSTableGameInfo ownerUid.
     * @member {number|Long}ownerUid
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.ownerUid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableGameInfo gameDraw.
     * @member {number|Long}gameDraw
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.gameDraw = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableGameInfo name.
     * @member {string}name
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.name = "";

    /**
     * CSTableGameInfo createTime.
     * @member {number}createTime
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.createTime = 0;

    /**
     * CSTableGameInfo startTime.
     * @member {number}startTime
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.startTime = 0;

    /**
     * CSTableGameInfo raiseBlindTime.
     * @member {number}raiseBlindTime
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.raiseBlindTime = 0;

    /**
     * CSTableGameInfo time.
     * @member {number}time
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.time = 0;

    /**
     * CSTableGameInfo tableInfo.
     * @member {(ICSTableInfo|null|undefined)}tableInfo
     * @memberof CSTableGameInfo
     * @instance
     */
    CSTableGameInfo.prototype.tableInfo = null;

    /**
     * Creates a new CSTableGameInfo instance using the specified properties.
     * @function create
     * @memberof CSTableGameInfo
     * @static
     * @param {ICSTableGameInfo=} [properties] Properties to set
     * @returns {CSTableGameInfo} CSTableGameInfo instance
     */
    CSTableGameInfo.create = function create(properties) {
        return new CSTableGameInfo(properties);
    };

    /**
     * Encodes the specified CSTableGameInfo message. Does not implicitly {@link CSTableGameInfo.verify|verify} messages.
     * @function encode
     * @memberof CSTableGameInfo
     * @static
     * @param {ICSTableGameInfo} message CSTableGameInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTableGameInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.players != null && message.players.length)
            for (var i = 0; i < message.players.length; ++i)
                $root.CSTablePlayer.encode(message.players[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
        if (message.roundCount != null && message.hasOwnProperty("roundCount"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.roundCount);
        if (message.buttonIndex != null && message.hasOwnProperty("buttonIndex"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.buttonIndex);
        if (message.smallBlindsIndex != null && message.hasOwnProperty("smallBlindsIndex"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.smallBlindsIndex);
        if (message.smallBlindsNum != null && message.hasOwnProperty("smallBlindsNum"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.smallBlindsNum);
        if (message.bigBlindsIndex != null && message.hasOwnProperty("bigBlindsIndex"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.bigBlindsIndex);
        if (message.bigBlindsNum != null && message.hasOwnProperty("bigBlindsNum"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.bigBlindsNum);
        if (message.communityCards != null && message.communityCards.length)
            for (var i = 0; i < message.communityCards.length; ++i)
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.communityCards[i]);
        if (message.pots != null && message.pots.length)
            for (var i = 0; i < message.pots.length; ++i)
                $root.CSTablePot.encode(message.pots[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.minBuyIn != null && message.hasOwnProperty("minBuyIn"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.minBuyIn);
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.maxBuyIn);
        if (message.actionTime != null && message.hasOwnProperty("actionTime"))
            writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.actionTime);
        if (message.actionTimeout != null && message.hasOwnProperty("actionTimeout"))
            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.actionTimeout);
        if (message.actionIndex != null && message.hasOwnProperty("actionIndex"))
            writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.actionIndex);
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            writer.uint32(/* id 16, wireType 0 =*/128).int32(message.tableType);
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.tableId);
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.maxPlayer);
        if (message.ownerUid != null && message.hasOwnProperty("ownerUid"))
            writer.uint32(/* id 19, wireType 0 =*/152).uint64(message.ownerUid);
        if (message.gameDraw != null && message.hasOwnProperty("gameDraw"))
            writer.uint32(/* id 20, wireType 0 =*/160).uint64(message.gameDraw);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 21, wireType 2 =*/170).string(message.name);
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.createTime);
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.startTime);
        if (message.raiseBlindTime != null && message.hasOwnProperty("raiseBlindTime"))
            writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.raiseBlindTime);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.time);
        if (message.tableInfo != null && message.hasOwnProperty("tableInfo"))
            $root.CSTableInfo.encode(message.tableInfo, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSTableGameInfo message, length delimited. Does not implicitly {@link CSTableGameInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSTableGameInfo
     * @static
     * @param {ICSTableGameInfo} message CSTableGameInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTableGameInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSTableGameInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSTableGameInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSTableGameInfo} CSTableGameInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTableGameInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSTableGameInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.players && message.players.length))
                    message.players = [];
                message.players.push($root.CSTablePlayer.decode(reader, reader.uint32()));
                break;
            case 2:
                message.state = reader.int32();
                break;
            case 3:
                message.roundCount = reader.uint32();
                break;
            case 4:
                message.buttonIndex = reader.uint32();
                break;
            case 5:
                message.smallBlindsIndex = reader.uint32();
                break;
            case 6:
                message.smallBlindsNum = reader.uint32();
                break;
            case 7:
                message.bigBlindsIndex = reader.uint32();
                break;
            case 8:
                message.bigBlindsNum = reader.uint32();
                break;
            case 9:
                if (!(message.communityCards && message.communityCards.length))
                    message.communityCards = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.communityCards.push(reader.uint32());
                } else
                    message.communityCards.push(reader.uint32());
                break;
            case 10:
                if (!(message.pots && message.pots.length))
                    message.pots = [];
                message.pots.push($root.CSTablePot.decode(reader, reader.uint32()));
                break;
            case 11:
                message.minBuyIn = reader.uint64();
                break;
            case 12:
                message.maxBuyIn = reader.uint64();
                break;
            case 13:
                message.actionTime = reader.uint32();
                break;
            case 14:
                message.actionTimeout = reader.uint32();
                break;
            case 15:
                message.actionIndex = reader.uint32();
                break;
            case 16:
                message.tableType = reader.int32();
                break;
            case 17:
                message.tableId = reader.uint32();
                break;
            case 18:
                message.maxPlayer = reader.uint32();
                break;
            case 19:
                message.ownerUid = reader.uint64();
                break;
            case 20:
                message.gameDraw = reader.uint64();
                break;
            case 21:
                message.name = reader.string();
                break;
            case 22:
                message.createTime = reader.uint32();
                break;
            case 23:
                message.startTime = reader.uint32();
                break;
            case 24:
                message.raiseBlindTime = reader.uint32();
                break;
            case 25:
                message.time = reader.uint32();
                break;
            case 26:
                message.tableInfo = $root.CSTableInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSTableGameInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSTableGameInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSTableGameInfo} CSTableGameInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTableGameInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSTableGameInfo message.
     * @function verify
     * @memberof CSTableGameInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSTableGameInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.players != null && message.hasOwnProperty("players")) {
            if (!Array.isArray(message.players))
                return "players: array expected";
            for (var i = 0; i < message.players.length; ++i) {
                var error = $root.CSTablePlayer.verify(message.players[i]);
                if (error)
                    return "players." + error;
            }
        }
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 18:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 17:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 20:
            case 120:
                break;
            }
        if (message.roundCount != null && message.hasOwnProperty("roundCount"))
            if (!$util.isInteger(message.roundCount))
                return "roundCount: integer expected";
        if (message.buttonIndex != null && message.hasOwnProperty("buttonIndex"))
            if (!$util.isInteger(message.buttonIndex))
                return "buttonIndex: integer expected";
        if (message.smallBlindsIndex != null && message.hasOwnProperty("smallBlindsIndex"))
            if (!$util.isInteger(message.smallBlindsIndex))
                return "smallBlindsIndex: integer expected";
        if (message.smallBlindsNum != null && message.hasOwnProperty("smallBlindsNum"))
            if (!$util.isInteger(message.smallBlindsNum))
                return "smallBlindsNum: integer expected";
        if (message.bigBlindsIndex != null && message.hasOwnProperty("bigBlindsIndex"))
            if (!$util.isInteger(message.bigBlindsIndex))
                return "bigBlindsIndex: integer expected";
        if (message.bigBlindsNum != null && message.hasOwnProperty("bigBlindsNum"))
            if (!$util.isInteger(message.bigBlindsNum))
                return "bigBlindsNum: integer expected";
        if (message.communityCards != null && message.hasOwnProperty("communityCards")) {
            if (!Array.isArray(message.communityCards))
                return "communityCards: array expected";
            for (var i = 0; i < message.communityCards.length; ++i)
                if (!$util.isInteger(message.communityCards[i]))
                    return "communityCards: integer[] expected";
        }
        if (message.pots != null && message.hasOwnProperty("pots")) {
            if (!Array.isArray(message.pots))
                return "pots: array expected";
            for (var i = 0; i < message.pots.length; ++i) {
                error = $root.CSTablePot.verify(message.pots[i]);
                if (error)
                    return "pots." + error;
            }
        }
        if (message.minBuyIn != null && message.hasOwnProperty("minBuyIn"))
            if (!$util.isInteger(message.minBuyIn) && !(message.minBuyIn && $util.isInteger(message.minBuyIn.low) && $util.isInteger(message.minBuyIn.high)))
                return "minBuyIn: integer|Long expected";
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            if (!$util.isInteger(message.maxBuyIn) && !(message.maxBuyIn && $util.isInteger(message.maxBuyIn.low) && $util.isInteger(message.maxBuyIn.high)))
                return "maxBuyIn: integer|Long expected";
        if (message.actionTime != null && message.hasOwnProperty("actionTime"))
            if (!$util.isInteger(message.actionTime))
                return "actionTime: integer expected";
        if (message.actionTimeout != null && message.hasOwnProperty("actionTimeout"))
            if (!$util.isInteger(message.actionTimeout))
                return "actionTimeout: integer expected";
        if (message.actionIndex != null && message.hasOwnProperty("actionIndex"))
            if (!$util.isInteger(message.actionIndex))
                return "actionIndex: integer expected";
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            switch (message.tableType) {
            default:
                return "tableType: enum value expected";
            case 0:
            case 100:
            case 200:
                break;
            }
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            if (!$util.isInteger(message.maxPlayer))
                return "maxPlayer: integer expected";
        if (message.ownerUid != null && message.hasOwnProperty("ownerUid"))
            if (!$util.isInteger(message.ownerUid) && !(message.ownerUid && $util.isInteger(message.ownerUid.low) && $util.isInteger(message.ownerUid.high)))
                return "ownerUid: integer|Long expected";
        if (message.gameDraw != null && message.hasOwnProperty("gameDraw"))
            if (!$util.isInteger(message.gameDraw) && !(message.gameDraw && $util.isInteger(message.gameDraw.low) && $util.isInteger(message.gameDraw.high)))
                return "gameDraw: integer|Long expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            if (!$util.isInteger(message.createTime))
                return "createTime: integer expected";
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (!$util.isInteger(message.startTime))
                return "startTime: integer expected";
        if (message.raiseBlindTime != null && message.hasOwnProperty("raiseBlindTime"))
            if (!$util.isInteger(message.raiseBlindTime))
                return "raiseBlindTime: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        if (message.tableInfo != null && message.hasOwnProperty("tableInfo")) {
            error = $root.CSTableInfo.verify(message.tableInfo);
            if (error)
                return "tableInfo." + error;
        }
        return null;
    };

    /**
     * Creates a CSTableGameInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSTableGameInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSTableGameInfo} CSTableGameInfo
     */
    CSTableGameInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSTableGameInfo)
            return object;
        var message = new $root.CSTableGameInfo();
        if (object.players) {
            if (!Array.isArray(object.players))
                throw TypeError(".CSTableGameInfo.players: array expected");
            message.players = [];
            for (var i = 0; i < object.players.length; ++i) {
                if (typeof object.players[i] !== "object")
                    throw TypeError(".CSTableGameInfo.players: object expected");
                message.players[i] = $root.CSTablePlayer.fromObject(object.players[i]);
            }
        }
        switch (object.state) {
        case "EN_TABLE_STATE_WAIT_MIN_PLAYER":
        case 0:
            message.state = 0;
            break;
        case "EN_TABLE_STATE_WAIT_CLIENT_ACTION":
        case 1:
            message.state = 1;
            break;
        case "EN_TABLE_STATE_WAIT_ROUND_START":
        case 18:
            message.state = 18;
            break;
        case "EN_TABLE_STATE_WAIT_ROUND_END":
        case 2:
            message.state = 2;
            break;
        case "EN_TABLE_STATE_WAIT_GAME_END":
        case 3:
            message.state = 3;
            break;
        case "EN_TABLE_STATE_GAME_START":
        case 4:
            message.state = 4;
            break;
        case "EN_TABLE_STATE_ONE_GAME_START":
        case 5:
            message.state = 5;
            break;
        case "EN_TABLE_STATE_ROUND_START":
        case 6:
            message.state = 6;
            break;
        case "EN_TABLE_STATE_ROUND_REAL_START":
        case 17:
            message.state = 17;
            break;
        case "EN_TABLE_STATE_CONTINUE_ROUND":
        case 7:
            message.state = 7;
            break;
        case "EN_TABLE_STATE_CONTINUE_ROUND_AND_SITUP":
        case 8:
            message.state = 8;
            break;
        case "EN_TABLE_STATE_CONTINUE_ROUND_AND_EXIT":
        case 9:
            message.state = 9;
            break;
        case "EN_TABLE_STATE_CALC_POTS":
        case 10:
            message.state = 10;
            break;
        case "EN_TABLE_STATE_ROUND_END":
        case 11:
            message.state = 11;
            break;
        case "EN_TABLE_STATE_GAME_ONE_END":
        case 12:
            message.state = 12;
            break;
        case "EN_TABLE_STATE_GAME_ONE_REAL_END":
        case 13:
            message.state = 13;
            break;
        case "EN_TABLE_STATE_GAME_END":
        case 14:
            message.state = 14;
            break;
        case "EN_TABLE_STATE_GAME_DEL":
        case 15:
            message.state = 15;
            break;
        case "EN_TABLE_STATE_WAIT_GAME_START":
        case 16:
            message.state = 16;
            break;
        case "EN_TABLE_STATE_PAY_BEFORE_ONE_GAME_START":
        case 20:
            message.state = 20;
            break;
        case "EN_TABLE_STATE_WAIT_PAY_BEFORE_ONE_GAME_START":
        case 120:
            message.state = 120;
            break;
        }
        if (object.roundCount != null)
            message.roundCount = object.roundCount >>> 0;
        if (object.buttonIndex != null)
            message.buttonIndex = object.buttonIndex >>> 0;
        if (object.smallBlindsIndex != null)
            message.smallBlindsIndex = object.smallBlindsIndex >>> 0;
        if (object.smallBlindsNum != null)
            message.smallBlindsNum = object.smallBlindsNum >>> 0;
        if (object.bigBlindsIndex != null)
            message.bigBlindsIndex = object.bigBlindsIndex >>> 0;
        if (object.bigBlindsNum != null)
            message.bigBlindsNum = object.bigBlindsNum >>> 0;
        if (object.communityCards) {
            if (!Array.isArray(object.communityCards))
                throw TypeError(".CSTableGameInfo.communityCards: array expected");
            message.communityCards = [];
            for (var i = 0; i < object.communityCards.length; ++i)
                message.communityCards[i] = object.communityCards[i] >>> 0;
        }
        if (object.pots) {
            if (!Array.isArray(object.pots))
                throw TypeError(".CSTableGameInfo.pots: array expected");
            message.pots = [];
            for (var i = 0; i < object.pots.length; ++i) {
                if (typeof object.pots[i] !== "object")
                    throw TypeError(".CSTableGameInfo.pots: object expected");
                message.pots[i] = $root.CSTablePot.fromObject(object.pots[i]);
            }
        }
        if (object.minBuyIn != null)
            if ($util.Long)
                (message.minBuyIn = $util.Long.fromValue(object.minBuyIn)).unsigned = true;
            else if (typeof object.minBuyIn === "string")
                message.minBuyIn = parseInt(object.minBuyIn, 10);
            else if (typeof object.minBuyIn === "number")
                message.minBuyIn = object.minBuyIn;
            else if (typeof object.minBuyIn === "object")
                message.minBuyIn = new $util.LongBits(object.minBuyIn.low >>> 0, object.minBuyIn.high >>> 0).toNumber(true);
        if (object.maxBuyIn != null)
            if ($util.Long)
                (message.maxBuyIn = $util.Long.fromValue(object.maxBuyIn)).unsigned = true;
            else if (typeof object.maxBuyIn === "string")
                message.maxBuyIn = parseInt(object.maxBuyIn, 10);
            else if (typeof object.maxBuyIn === "number")
                message.maxBuyIn = object.maxBuyIn;
            else if (typeof object.maxBuyIn === "object")
                message.maxBuyIn = new $util.LongBits(object.maxBuyIn.low >>> 0, object.maxBuyIn.high >>> 0).toNumber(true);
        if (object.actionTime != null)
            message.actionTime = object.actionTime >>> 0;
        if (object.actionTimeout != null)
            message.actionTimeout = object.actionTimeout >>> 0;
        if (object.actionIndex != null)
            message.actionIndex = object.actionIndex >>> 0;
        switch (object.tableType) {
        case "EN_TABLE_CREATE_NORMAL":
        case 0:
            message.tableType = 0;
            break;
        case "EN_TABLE_SNG_TIME":
        case 100:
            message.tableType = 100;
            break;
        case "EN_TABLE_TRAINING_TIME":
        case 200:
            message.tableType = 200;
            break;
        }
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        if (object.maxPlayer != null)
            message.maxPlayer = object.maxPlayer >>> 0;
        if (object.ownerUid != null)
            if ($util.Long)
                (message.ownerUid = $util.Long.fromValue(object.ownerUid)).unsigned = true;
            else if (typeof object.ownerUid === "string")
                message.ownerUid = parseInt(object.ownerUid, 10);
            else if (typeof object.ownerUid === "number")
                message.ownerUid = object.ownerUid;
            else if (typeof object.ownerUid === "object")
                message.ownerUid = new $util.LongBits(object.ownerUid.low >>> 0, object.ownerUid.high >>> 0).toNumber(true);
        if (object.gameDraw != null)
            if ($util.Long)
                (message.gameDraw = $util.Long.fromValue(object.gameDraw)).unsigned = true;
            else if (typeof object.gameDraw === "string")
                message.gameDraw = parseInt(object.gameDraw, 10);
            else if (typeof object.gameDraw === "number")
                message.gameDraw = object.gameDraw;
            else if (typeof object.gameDraw === "object")
                message.gameDraw = new $util.LongBits(object.gameDraw.low >>> 0, object.gameDraw.high >>> 0).toNumber(true);
        if (object.name != null)
            message.name = String(object.name);
        if (object.createTime != null)
            message.createTime = object.createTime >>> 0;
        if (object.startTime != null)
            message.startTime = object.startTime >>> 0;
        if (object.raiseBlindTime != null)
            message.raiseBlindTime = object.raiseBlindTime >>> 0;
        if (object.time != null)
            message.time = object.time >>> 0;
        if (object.tableInfo != null) {
            if (typeof object.tableInfo !== "object")
                throw TypeError(".CSTableGameInfo.tableInfo: object expected");
            message.tableInfo = $root.CSTableInfo.fromObject(object.tableInfo);
        }
        return message;
    };

    /**
     * Creates a plain object from a CSTableGameInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSTableGameInfo
     * @static
     * @param {CSTableGameInfo} message CSTableGameInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSTableGameInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.players = [];
            object.communityCards = [];
            object.pots = [];
        }
        if (options.defaults) {
            object.state = options.enums === String ? "EN_TABLE_STATE_WAIT_MIN_PLAYER" : 0;
            object.roundCount = 0;
            object.buttonIndex = 0;
            object.smallBlindsIndex = 0;
            object.smallBlindsNum = 0;
            object.bigBlindsIndex = 0;
            object.bigBlindsNum = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.minBuyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.minBuyIn = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.maxBuyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.maxBuyIn = options.longs === String ? "0" : 0;
            object.actionTime = 0;
            object.actionTimeout = 0;
            object.actionIndex = 0;
            object.tableType = options.enums === String ? "EN_TABLE_CREATE_NORMAL" : 0;
            object.tableId = 0;
            object.maxPlayer = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.ownerUid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ownerUid = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.gameDraw = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.gameDraw = options.longs === String ? "0" : 0;
            object.name = "";
            object.createTime = 0;
            object.startTime = 0;
            object.raiseBlindTime = 0;
            object.time = 0;
            object.tableInfo = null;
        }
        if (message.players && message.players.length) {
            object.players = [];
            for (var j = 0; j < message.players.length; ++j)
                object.players[j] = $root.CSTablePlayer.toObject(message.players[j], options);
        }
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.ENTableState[message.state] : message.state;
        if (message.roundCount != null && message.hasOwnProperty("roundCount"))
            object.roundCount = message.roundCount;
        if (message.buttonIndex != null && message.hasOwnProperty("buttonIndex"))
            object.buttonIndex = message.buttonIndex;
        if (message.smallBlindsIndex != null && message.hasOwnProperty("smallBlindsIndex"))
            object.smallBlindsIndex = message.smallBlindsIndex;
        if (message.smallBlindsNum != null && message.hasOwnProperty("smallBlindsNum"))
            object.smallBlindsNum = message.smallBlindsNum;
        if (message.bigBlindsIndex != null && message.hasOwnProperty("bigBlindsIndex"))
            object.bigBlindsIndex = message.bigBlindsIndex;
        if (message.bigBlindsNum != null && message.hasOwnProperty("bigBlindsNum"))
            object.bigBlindsNum = message.bigBlindsNum;
        if (message.communityCards && message.communityCards.length) {
            object.communityCards = [];
            for (var j = 0; j < message.communityCards.length; ++j)
                object.communityCards[j] = message.communityCards[j];
        }
        if (message.pots && message.pots.length) {
            object.pots = [];
            for (var j = 0; j < message.pots.length; ++j)
                object.pots[j] = $root.CSTablePot.toObject(message.pots[j], options);
        }
        if (message.minBuyIn != null && message.hasOwnProperty("minBuyIn"))
            if (typeof message.minBuyIn === "number")
                object.minBuyIn = options.longs === String ? String(message.minBuyIn) : message.minBuyIn;
            else
                object.minBuyIn = options.longs === String ? $util.Long.prototype.toString.call(message.minBuyIn) : options.longs === Number ? new $util.LongBits(message.minBuyIn.low >>> 0, message.minBuyIn.high >>> 0).toNumber(true) : message.minBuyIn;
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            if (typeof message.maxBuyIn === "number")
                object.maxBuyIn = options.longs === String ? String(message.maxBuyIn) : message.maxBuyIn;
            else
                object.maxBuyIn = options.longs === String ? $util.Long.prototype.toString.call(message.maxBuyIn) : options.longs === Number ? new $util.LongBits(message.maxBuyIn.low >>> 0, message.maxBuyIn.high >>> 0).toNumber(true) : message.maxBuyIn;
        if (message.actionTime != null && message.hasOwnProperty("actionTime"))
            object.actionTime = message.actionTime;
        if (message.actionTimeout != null && message.hasOwnProperty("actionTimeout"))
            object.actionTimeout = message.actionTimeout;
        if (message.actionIndex != null && message.hasOwnProperty("actionIndex"))
            object.actionIndex = message.actionIndex;
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            object.tableType = options.enums === String ? $root.ENTableType[message.tableType] : message.tableType;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            object.maxPlayer = message.maxPlayer;
        if (message.ownerUid != null && message.hasOwnProperty("ownerUid"))
            if (typeof message.ownerUid === "number")
                object.ownerUid = options.longs === String ? String(message.ownerUid) : message.ownerUid;
            else
                object.ownerUid = options.longs === String ? $util.Long.prototype.toString.call(message.ownerUid) : options.longs === Number ? new $util.LongBits(message.ownerUid.low >>> 0, message.ownerUid.high >>> 0).toNumber(true) : message.ownerUid;
        if (message.gameDraw != null && message.hasOwnProperty("gameDraw"))
            if (typeof message.gameDraw === "number")
                object.gameDraw = options.longs === String ? String(message.gameDraw) : message.gameDraw;
            else
                object.gameDraw = options.longs === String ? $util.Long.prototype.toString.call(message.gameDraw) : options.longs === Number ? new $util.LongBits(message.gameDraw.low >>> 0, message.gameDraw.high >>> 0).toNumber(true) : message.gameDraw;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            object.createTime = message.createTime;
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            object.startTime = message.startTime;
        if (message.raiseBlindTime != null && message.hasOwnProperty("raiseBlindTime"))
            object.raiseBlindTime = message.raiseBlindTime;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        if (message.tableInfo != null && message.hasOwnProperty("tableInfo"))
            object.tableInfo = $root.CSTableInfo.toObject(message.tableInfo, options);
        return object;
    };

    /**
     * Converts this CSTableGameInfo to JSON.
     * @function toJSON
     * @memberof CSTableGameInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSTableGameInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSTableGameInfo;
})();

$root.CSRequestEnterTable = (function() {

    /**
     * Properties of a CSRequestEnterTable.
     * @exports ICSRequestEnterTable
     * @interface ICSRequestEnterTable
     * @property {number} [tableId] CSRequestEnterTable tableId
     */

    /**
     * Constructs a new CSRequestEnterTable.
     * @exports CSRequestEnterTable
     * @classdesc Represents a CSRequestEnterTable.
     * @constructor
     * @param {ICSRequestEnterTable=} [properties] Properties to set
     */
    function CSRequestEnterTable(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestEnterTable tableId.
     * @member {number}tableId
     * @memberof CSRequestEnterTable
     * @instance
     */
    CSRequestEnterTable.prototype.tableId = 0;

    /**
     * Creates a new CSRequestEnterTable instance using the specified properties.
     * @function create
     * @memberof CSRequestEnterTable
     * @static
     * @param {ICSRequestEnterTable=} [properties] Properties to set
     * @returns {CSRequestEnterTable} CSRequestEnterTable instance
     */
    CSRequestEnterTable.create = function create(properties) {
        return new CSRequestEnterTable(properties);
    };

    /**
     * Encodes the specified CSRequestEnterTable message. Does not implicitly {@link CSRequestEnterTable.verify|verify} messages.
     * @function encode
     * @memberof CSRequestEnterTable
     * @static
     * @param {ICSRequestEnterTable} message CSRequestEnterTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestEnterTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tableId);
        return writer;
    };

    /**
     * Encodes the specified CSRequestEnterTable message, length delimited. Does not implicitly {@link CSRequestEnterTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestEnterTable
     * @static
     * @param {ICSRequestEnterTable} message CSRequestEnterTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestEnterTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestEnterTable message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestEnterTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestEnterTable} CSRequestEnterTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestEnterTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestEnterTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.tableId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestEnterTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestEnterTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestEnterTable} CSRequestEnterTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestEnterTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestEnterTable message.
     * @function verify
     * @memberof CSRequestEnterTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestEnterTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        return null;
    };

    /**
     * Creates a CSRequestEnterTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestEnterTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestEnterTable} CSRequestEnterTable
     */
    CSRequestEnterTable.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestEnterTable)
            return object;
        var message = new $root.CSRequestEnterTable();
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSRequestEnterTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestEnterTable
     * @static
     * @param {CSRequestEnterTable} message CSRequestEnterTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestEnterTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.tableId = 0;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        return object;
    };

    /**
     * Converts this CSRequestEnterTable to JSON.
     * @function toJSON
     * @memberof CSRequestEnterTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestEnterTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestEnterTable;
})();

$root.CSResponseEnterTable = (function() {

    /**
     * Properties of a CSResponseEnterTable.
     * @exports ICSResponseEnterTable
     * @interface ICSResponseEnterTable
     * @property {ENMessageError} [result] CSResponseEnterTable result
     * @property {ICSTableGameInfo} [gameInfo] CSResponseEnterTable gameInfo
     * @property {boolean} [useHeartBeat] CSResponseEnterTable useHeartBeat
     * @property {number|Long} [chipOnSit] CSResponseEnterTable chipOnSit
     * @property {ICSPlayerInfo} [playerInfo] CSResponseEnterTable playerInfo
     */

    /**
     * Constructs a new CSResponseEnterTable.
     * @exports CSResponseEnterTable
     * @classdesc Represents a CSResponseEnterTable.
     * @constructor
     * @param {ICSResponseEnterTable=} [properties] Properties to set
     */
    function CSResponseEnterTable(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseEnterTable result.
     * @member {ENMessageError}result
     * @memberof CSResponseEnterTable
     * @instance
     */
    CSResponseEnterTable.prototype.result = 0;

    /**
     * CSResponseEnterTable gameInfo.
     * @member {(ICSTableGameInfo|null|undefined)}gameInfo
     * @memberof CSResponseEnterTable
     * @instance
     */
    CSResponseEnterTable.prototype.gameInfo = null;

    /**
     * CSResponseEnterTable useHeartBeat.
     * @member {boolean}useHeartBeat
     * @memberof CSResponseEnterTable
     * @instance
     */
    CSResponseEnterTable.prototype.useHeartBeat = false;

    /**
     * CSResponseEnterTable chipOnSit.
     * @member {number|Long}chipOnSit
     * @memberof CSResponseEnterTable
     * @instance
     */
    CSResponseEnterTable.prototype.chipOnSit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSResponseEnterTable playerInfo.
     * @member {(ICSPlayerInfo|null|undefined)}playerInfo
     * @memberof CSResponseEnterTable
     * @instance
     */
    CSResponseEnterTable.prototype.playerInfo = null;

    /**
     * Creates a new CSResponseEnterTable instance using the specified properties.
     * @function create
     * @memberof CSResponseEnterTable
     * @static
     * @param {ICSResponseEnterTable=} [properties] Properties to set
     * @returns {CSResponseEnterTable} CSResponseEnterTable instance
     */
    CSResponseEnterTable.create = function create(properties) {
        return new CSResponseEnterTable(properties);
    };

    /**
     * Encodes the specified CSResponseEnterTable message. Does not implicitly {@link CSResponseEnterTable.verify|verify} messages.
     * @function encode
     * @memberof CSResponseEnterTable
     * @static
     * @param {ICSResponseEnterTable} message CSResponseEnterTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseEnterTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.gameInfo != null && message.hasOwnProperty("gameInfo"))
            $root.CSTableGameInfo.encode(message.gameInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.useHeartBeat != null && message.hasOwnProperty("useHeartBeat"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.useHeartBeat);
        if (message.chipOnSit != null && message.hasOwnProperty("chipOnSit"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.chipOnSit);
        if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
            $root.CSPlayerInfo.encode(message.playerInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSResponseEnterTable message, length delimited. Does not implicitly {@link CSResponseEnterTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseEnterTable
     * @static
     * @param {ICSResponseEnterTable} message CSResponseEnterTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseEnterTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseEnterTable message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseEnterTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseEnterTable} CSResponseEnterTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseEnterTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseEnterTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.gameInfo = $root.CSTableGameInfo.decode(reader, reader.uint32());
                break;
            case 3:
                message.useHeartBeat = reader.bool();
                break;
            case 4:
                message.chipOnSit = reader.uint64();
                break;
            case 5:
                message.playerInfo = $root.CSPlayerInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseEnterTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseEnterTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseEnterTable} CSResponseEnterTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseEnterTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseEnterTable message.
     * @function verify
     * @memberof CSResponseEnterTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseEnterTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.gameInfo != null && message.hasOwnProperty("gameInfo")) {
            var error = $root.CSTableGameInfo.verify(message.gameInfo);
            if (error)
                return "gameInfo." + error;
        }
        if (message.useHeartBeat != null && message.hasOwnProperty("useHeartBeat"))
            if (typeof message.useHeartBeat !== "boolean")
                return "useHeartBeat: boolean expected";
        if (message.chipOnSit != null && message.hasOwnProperty("chipOnSit"))
            if (!$util.isInteger(message.chipOnSit) && !(message.chipOnSit && $util.isInteger(message.chipOnSit.low) && $util.isInteger(message.chipOnSit.high)))
                return "chipOnSit: integer|Long expected";
        if (message.playerInfo != null && message.hasOwnProperty("playerInfo")) {
            error = $root.CSPlayerInfo.verify(message.playerInfo);
            if (error)
                return "playerInfo." + error;
        }
        return null;
    };

    /**
     * Creates a CSResponseEnterTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseEnterTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseEnterTable} CSResponseEnterTable
     */
    CSResponseEnterTable.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseEnterTable)
            return object;
        var message = new $root.CSResponseEnterTable();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.gameInfo != null) {
            if (typeof object.gameInfo !== "object")
                throw TypeError(".CSResponseEnterTable.gameInfo: object expected");
            message.gameInfo = $root.CSTableGameInfo.fromObject(object.gameInfo);
        }
        if (object.useHeartBeat != null)
            message.useHeartBeat = Boolean(object.useHeartBeat);
        if (object.chipOnSit != null)
            if ($util.Long)
                (message.chipOnSit = $util.Long.fromValue(object.chipOnSit)).unsigned = true;
            else if (typeof object.chipOnSit === "string")
                message.chipOnSit = parseInt(object.chipOnSit, 10);
            else if (typeof object.chipOnSit === "number")
                message.chipOnSit = object.chipOnSit;
            else if (typeof object.chipOnSit === "object")
                message.chipOnSit = new $util.LongBits(object.chipOnSit.low >>> 0, object.chipOnSit.high >>> 0).toNumber(true);
        if (object.playerInfo != null) {
            if (typeof object.playerInfo !== "object")
                throw TypeError(".CSResponseEnterTable.playerInfo: object expected");
            message.playerInfo = $root.CSPlayerInfo.fromObject(object.playerInfo);
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseEnterTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseEnterTable
     * @static
     * @param {CSResponseEnterTable} message CSResponseEnterTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseEnterTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.gameInfo = null;
            object.useHeartBeat = false;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.chipOnSit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.chipOnSit = options.longs === String ? "0" : 0;
            object.playerInfo = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.gameInfo != null && message.hasOwnProperty("gameInfo"))
            object.gameInfo = $root.CSTableGameInfo.toObject(message.gameInfo, options);
        if (message.useHeartBeat != null && message.hasOwnProperty("useHeartBeat"))
            object.useHeartBeat = message.useHeartBeat;
        if (message.chipOnSit != null && message.hasOwnProperty("chipOnSit"))
            if (typeof message.chipOnSit === "number")
                object.chipOnSit = options.longs === String ? String(message.chipOnSit) : message.chipOnSit;
            else
                object.chipOnSit = options.longs === String ? $util.Long.prototype.toString.call(message.chipOnSit) : options.longs === Number ? new $util.LongBits(message.chipOnSit.low >>> 0, message.chipOnSit.high >>> 0).toNumber(true) : message.chipOnSit;
        if (message.playerInfo != null && message.hasOwnProperty("playerInfo"))
            object.playerInfo = $root.CSPlayerInfo.toObject(message.playerInfo, options);
        return object;
    };

    /**
     * Converts this CSResponseEnterTable to JSON.
     * @function toJSON
     * @memberof CSResponseEnterTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseEnterTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseEnterTable;
})();

$root.CSRequestExitTable = (function() {

    /**
     * Properties of a CSRequestExitTable.
     * @exports ICSRequestExitTable
     * @interface ICSRequestExitTable
     */

    /**
     * Constructs a new CSRequestExitTable.
     * @exports CSRequestExitTable
     * @classdesc Represents a CSRequestExitTable.
     * @constructor
     * @param {ICSRequestExitTable=} [properties] Properties to set
     */
    function CSRequestExitTable(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CSRequestExitTable instance using the specified properties.
     * @function create
     * @memberof CSRequestExitTable
     * @static
     * @param {ICSRequestExitTable=} [properties] Properties to set
     * @returns {CSRequestExitTable} CSRequestExitTable instance
     */
    CSRequestExitTable.create = function create(properties) {
        return new CSRequestExitTable(properties);
    };

    /**
     * Encodes the specified CSRequestExitTable message. Does not implicitly {@link CSRequestExitTable.verify|verify} messages.
     * @function encode
     * @memberof CSRequestExitTable
     * @static
     * @param {ICSRequestExitTable} message CSRequestExitTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestExitTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CSRequestExitTable message, length delimited. Does not implicitly {@link CSRequestExitTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestExitTable
     * @static
     * @param {ICSRequestExitTable} message CSRequestExitTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestExitTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestExitTable message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestExitTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestExitTable} CSRequestExitTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestExitTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestExitTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestExitTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestExitTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestExitTable} CSRequestExitTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestExitTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestExitTable message.
     * @function verify
     * @memberof CSRequestExitTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestExitTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CSRequestExitTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestExitTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestExitTable} CSRequestExitTable
     */
    CSRequestExitTable.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestExitTable)
            return object;
        return new $root.CSRequestExitTable();
    };

    /**
     * Creates a plain object from a CSRequestExitTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestExitTable
     * @static
     * @param {CSRequestExitTable} message CSRequestExitTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestExitTable.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CSRequestExitTable to JSON.
     * @function toJSON
     * @memberof CSRequestExitTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestExitTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestExitTable;
})();

$root.CSResponseExitTable = (function() {

    /**
     * Properties of a CSResponseExitTable.
     * @exports ICSResponseExitTable
     * @interface ICSResponseExitTable
     * @property {ENMessageError} [result] CSResponseExitTable result
     * @property {ENLogoutType} [reason] CSResponseExitTable reason
     */

    /**
     * Constructs a new CSResponseExitTable.
     * @exports CSResponseExitTable
     * @classdesc Represents a CSResponseExitTable.
     * @constructor
     * @param {ICSResponseExitTable=} [properties] Properties to set
     */
    function CSResponseExitTable(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseExitTable result.
     * @member {ENMessageError}result
     * @memberof CSResponseExitTable
     * @instance
     */
    CSResponseExitTable.prototype.result = 0;

    /**
     * CSResponseExitTable reason.
     * @member {ENLogoutType}reason
     * @memberof CSResponseExitTable
     * @instance
     */
    CSResponseExitTable.prototype.reason = 0;

    /**
     * Creates a new CSResponseExitTable instance using the specified properties.
     * @function create
     * @memberof CSResponseExitTable
     * @static
     * @param {ICSResponseExitTable=} [properties] Properties to set
     * @returns {CSResponseExitTable} CSResponseExitTable instance
     */
    CSResponseExitTable.create = function create(properties) {
        return new CSResponseExitTable(properties);
    };

    /**
     * Encodes the specified CSResponseExitTable message. Does not implicitly {@link CSResponseExitTable.verify|verify} messages.
     * @function encode
     * @memberof CSResponseExitTable
     * @static
     * @param {ICSResponseExitTable} message CSResponseExitTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseExitTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.reason != null && message.hasOwnProperty("reason"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reason);
        return writer;
    };

    /**
     * Encodes the specified CSResponseExitTable message, length delimited. Does not implicitly {@link CSResponseExitTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseExitTable
     * @static
     * @param {ICSResponseExitTable} message CSResponseExitTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseExitTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseExitTable message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseExitTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseExitTable} CSResponseExitTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseExitTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseExitTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.reason = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseExitTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseExitTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseExitTable} CSResponseExitTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseExitTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseExitTable message.
     * @function verify
     * @memberof CSResponseExitTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseExitTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.reason != null && message.hasOwnProperty("reason"))
            switch (message.reason) {
            default:
                return "reason: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        return null;
    };

    /**
     * Creates a CSResponseExitTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseExitTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseExitTable} CSResponseExitTable
     */
    CSResponseExitTable.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseExitTable)
            return object;
        var message = new $root.CSResponseExitTable();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        switch (object.reason) {
        case "EN_LOGOUT_TYPE_CONFLICT_BY_OTHER":
        case 0:
            message.reason = 0;
            break;
        case "EN_LOGOUT_TYPE_HEART_BEAT_TIMEOUT":
        case 1:
            message.reason = 1;
            break;
        case "EN_LOGOUT_TYPE_TABLE_RELEASE":
        case 2:
            message.reason = 2;
            break;
        case "EN_LOGOUT_TYPE_CLIENT_DISCONN":
        case 3:
            message.reason = 3;
            break;
        case "EN_LOGOUT_TYPE_STAY_IN_TABLE_TOO_LONG":
        case 4:
            message.reason = 4;
            break;
        case "EN_LOGOUT_TYPE_REQUEST_LEAVE":
        case 5:
            message.reason = 5;
            break;
        case "EN_LOGOUT_TYPE_BY_GM":
        case 6:
            message.reason = 6;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseExitTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseExitTable
     * @static
     * @param {CSResponseExitTable} message CSResponseExitTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseExitTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.reason = options.enums === String ? "EN_LOGOUT_TYPE_CONFLICT_BY_OTHER" : 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.reason != null && message.hasOwnProperty("reason"))
            object.reason = options.enums === String ? $root.ENLogoutType[message.reason] : message.reason;
        return object;
    };

    /**
     * Converts this CSResponseExitTable to JSON.
     * @function toJSON
     * @memberof CSResponseExitTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseExitTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseExitTable;
})();

$root.CSRequestSitDown = (function() {

    /**
     * Properties of a CSRequestSitDown.
     * @exports ICSRequestSitDown
     * @interface ICSRequestSitDown
     * @property {number} [playerIndex] CSRequestSitDown playerIndex
     * @property {number|Long} [buyIn] CSRequestSitDown buyIn
     * @property {number} [tableId] CSRequestSitDown tableId
     * @property {number|Long} [realBuyIn] CSRequestSitDown realBuyIn
     */

    /**
     * Constructs a new CSRequestSitDown.
     * @exports CSRequestSitDown
     * @classdesc Represents a CSRequestSitDown.
     * @constructor
     * @param {ICSRequestSitDown=} [properties] Properties to set
     */
    function CSRequestSitDown(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestSitDown playerIndex.
     * @member {number}playerIndex
     * @memberof CSRequestSitDown
     * @instance
     */
    CSRequestSitDown.prototype.playerIndex = 0;

    /**
     * CSRequestSitDown buyIn.
     * @member {number|Long}buyIn
     * @memberof CSRequestSitDown
     * @instance
     */
    CSRequestSitDown.prototype.buyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSRequestSitDown tableId.
     * @member {number}tableId
     * @memberof CSRequestSitDown
     * @instance
     */
    CSRequestSitDown.prototype.tableId = 0;

    /**
     * CSRequestSitDown realBuyIn.
     * @member {number|Long}realBuyIn
     * @memberof CSRequestSitDown
     * @instance
     */
    CSRequestSitDown.prototype.realBuyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSRequestSitDown instance using the specified properties.
     * @function create
     * @memberof CSRequestSitDown
     * @static
     * @param {ICSRequestSitDown=} [properties] Properties to set
     * @returns {CSRequestSitDown} CSRequestSitDown instance
     */
    CSRequestSitDown.create = function create(properties) {
        return new CSRequestSitDown(properties);
    };

    /**
     * Encodes the specified CSRequestSitDown message. Does not implicitly {@link CSRequestSitDown.verify|verify} messages.
     * @function encode
     * @memberof CSRequestSitDown
     * @static
     * @param {ICSRequestSitDown} message CSRequestSitDown message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestSitDown.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.playerIndex != null && message.hasOwnProperty("playerIndex"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.playerIndex);
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.buyIn);
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tableId);
        if (message.realBuyIn != null && message.hasOwnProperty("realBuyIn"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.realBuyIn);
        return writer;
    };

    /**
     * Encodes the specified CSRequestSitDown message, length delimited. Does not implicitly {@link CSRequestSitDown.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestSitDown
     * @static
     * @param {ICSRequestSitDown} message CSRequestSitDown message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestSitDown.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestSitDown message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestSitDown
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestSitDown} CSRequestSitDown
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestSitDown.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestSitDown();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.playerIndex = reader.uint32();
                break;
            case 2:
                message.buyIn = reader.uint64();
                break;
            case 3:
                message.tableId = reader.uint32();
                break;
            case 4:
                message.realBuyIn = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestSitDown message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestSitDown
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestSitDown} CSRequestSitDown
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestSitDown.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestSitDown message.
     * @function verify
     * @memberof CSRequestSitDown
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestSitDown.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.playerIndex != null && message.hasOwnProperty("playerIndex"))
            if (!$util.isInteger(message.playerIndex))
                return "playerIndex: integer expected";
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            if (!$util.isInteger(message.buyIn) && !(message.buyIn && $util.isInteger(message.buyIn.low) && $util.isInteger(message.buyIn.high)))
                return "buyIn: integer|Long expected";
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        if (message.realBuyIn != null && message.hasOwnProperty("realBuyIn"))
            if (!$util.isInteger(message.realBuyIn) && !(message.realBuyIn && $util.isInteger(message.realBuyIn.low) && $util.isInteger(message.realBuyIn.high)))
                return "realBuyIn: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSRequestSitDown message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestSitDown
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestSitDown} CSRequestSitDown
     */
    CSRequestSitDown.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestSitDown)
            return object;
        var message = new $root.CSRequestSitDown();
        if (object.playerIndex != null)
            message.playerIndex = object.playerIndex >>> 0;
        if (object.buyIn != null)
            if ($util.Long)
                (message.buyIn = $util.Long.fromValue(object.buyIn)).unsigned = true;
            else if (typeof object.buyIn === "string")
                message.buyIn = parseInt(object.buyIn, 10);
            else if (typeof object.buyIn === "number")
                message.buyIn = object.buyIn;
            else if (typeof object.buyIn === "object")
                message.buyIn = new $util.LongBits(object.buyIn.low >>> 0, object.buyIn.high >>> 0).toNumber(true);
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        if (object.realBuyIn != null)
            if ($util.Long)
                (message.realBuyIn = $util.Long.fromValue(object.realBuyIn)).unsigned = true;
            else if (typeof object.realBuyIn === "string")
                message.realBuyIn = parseInt(object.realBuyIn, 10);
            else if (typeof object.realBuyIn === "number")
                message.realBuyIn = object.realBuyIn;
            else if (typeof object.realBuyIn === "object")
                message.realBuyIn = new $util.LongBits(object.realBuyIn.low >>> 0, object.realBuyIn.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSRequestSitDown message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestSitDown
     * @static
     * @param {CSRequestSitDown} message CSRequestSitDown
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestSitDown.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.playerIndex = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.buyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.buyIn = options.longs === String ? "0" : 0;
            object.tableId = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.realBuyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.realBuyIn = options.longs === String ? "0" : 0;
        }
        if (message.playerIndex != null && message.hasOwnProperty("playerIndex"))
            object.playerIndex = message.playerIndex;
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            if (typeof message.buyIn === "number")
                object.buyIn = options.longs === String ? String(message.buyIn) : message.buyIn;
            else
                object.buyIn = options.longs === String ? $util.Long.prototype.toString.call(message.buyIn) : options.longs === Number ? new $util.LongBits(message.buyIn.low >>> 0, message.buyIn.high >>> 0).toNumber(true) : message.buyIn;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message.realBuyIn != null && message.hasOwnProperty("realBuyIn"))
            if (typeof message.realBuyIn === "number")
                object.realBuyIn = options.longs === String ? String(message.realBuyIn) : message.realBuyIn;
            else
                object.realBuyIn = options.longs === String ? $util.Long.prototype.toString.call(message.realBuyIn) : options.longs === Number ? new $util.LongBits(message.realBuyIn.low >>> 0, message.realBuyIn.high >>> 0).toNumber(true) : message.realBuyIn;
        return object;
    };

    /**
     * Converts this CSRequestSitDown to JSON.
     * @function toJSON
     * @memberof CSRequestSitDown
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestSitDown.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestSitDown;
})();

$root.CSResponseSitDown = (function() {

    /**
     * Properties of a CSResponseSitDown.
     * @exports ICSResponseSitDown
     * @interface ICSResponseSitDown
     * @property {ENMessageError} [result] CSResponseSitDown result
     */

    /**
     * Constructs a new CSResponseSitDown.
     * @exports CSResponseSitDown
     * @classdesc Represents a CSResponseSitDown.
     * @constructor
     * @param {ICSResponseSitDown=} [properties] Properties to set
     */
    function CSResponseSitDown(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseSitDown result.
     * @member {ENMessageError}result
     * @memberof CSResponseSitDown
     * @instance
     */
    CSResponseSitDown.prototype.result = 0;

    /**
     * Creates a new CSResponseSitDown instance using the specified properties.
     * @function create
     * @memberof CSResponseSitDown
     * @static
     * @param {ICSResponseSitDown=} [properties] Properties to set
     * @returns {CSResponseSitDown} CSResponseSitDown instance
     */
    CSResponseSitDown.create = function create(properties) {
        return new CSResponseSitDown(properties);
    };

    /**
     * Encodes the specified CSResponseSitDown message. Does not implicitly {@link CSResponseSitDown.verify|verify} messages.
     * @function encode
     * @memberof CSResponseSitDown
     * @static
     * @param {ICSResponseSitDown} message CSResponseSitDown message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseSitDown.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified CSResponseSitDown message, length delimited. Does not implicitly {@link CSResponseSitDown.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseSitDown
     * @static
     * @param {ICSResponseSitDown} message CSResponseSitDown message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseSitDown.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseSitDown message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseSitDown
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseSitDown} CSResponseSitDown
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseSitDown.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseSitDown();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseSitDown message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseSitDown
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseSitDown} CSResponseSitDown
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseSitDown.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseSitDown message.
     * @function verify
     * @memberof CSResponseSitDown
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseSitDown.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        return null;
    };

    /**
     * Creates a CSResponseSitDown message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseSitDown
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseSitDown} CSResponseSitDown
     */
    CSResponseSitDown.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseSitDown)
            return object;
        var message = new $root.CSResponseSitDown();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseSitDown message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseSitDown
     * @static
     * @param {CSResponseSitDown} message CSResponseSitDown
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseSitDown.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        return object;
    };

    /**
     * Converts this CSResponseSitDown to JSON.
     * @function toJSON
     * @memberof CSResponseSitDown
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseSitDown.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseSitDown;
})();

$root.CSRequestSitUp = (function() {

    /**
     * Properties of a CSRequestSitUp.
     * @exports ICSRequestSitUp
     * @interface ICSRequestSitUp
     */

    /**
     * Constructs a new CSRequestSitUp.
     * @exports CSRequestSitUp
     * @classdesc Represents a CSRequestSitUp.
     * @constructor
     * @param {ICSRequestSitUp=} [properties] Properties to set
     */
    function CSRequestSitUp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CSRequestSitUp instance using the specified properties.
     * @function create
     * @memberof CSRequestSitUp
     * @static
     * @param {ICSRequestSitUp=} [properties] Properties to set
     * @returns {CSRequestSitUp} CSRequestSitUp instance
     */
    CSRequestSitUp.create = function create(properties) {
        return new CSRequestSitUp(properties);
    };

    /**
     * Encodes the specified CSRequestSitUp message. Does not implicitly {@link CSRequestSitUp.verify|verify} messages.
     * @function encode
     * @memberof CSRequestSitUp
     * @static
     * @param {ICSRequestSitUp} message CSRequestSitUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestSitUp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CSRequestSitUp message, length delimited. Does not implicitly {@link CSRequestSitUp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestSitUp
     * @static
     * @param {ICSRequestSitUp} message CSRequestSitUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestSitUp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestSitUp message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestSitUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestSitUp} CSRequestSitUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestSitUp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestSitUp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestSitUp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestSitUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestSitUp} CSRequestSitUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestSitUp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestSitUp message.
     * @function verify
     * @memberof CSRequestSitUp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestSitUp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CSRequestSitUp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestSitUp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestSitUp} CSRequestSitUp
     */
    CSRequestSitUp.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestSitUp)
            return object;
        return new $root.CSRequestSitUp();
    };

    /**
     * Creates a plain object from a CSRequestSitUp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestSitUp
     * @static
     * @param {CSRequestSitUp} message CSRequestSitUp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestSitUp.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CSRequestSitUp to JSON.
     * @function toJSON
     * @memberof CSRequestSitUp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestSitUp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestSitUp;
})();

$root.CSResponseSitUp = (function() {

    /**
     * Properties of a CSResponseSitUp.
     * @exports ICSResponseSitUp
     * @interface ICSResponseSitUp
     * @property {ENMessageError} [result] CSResponseSitUp result
     */

    /**
     * Constructs a new CSResponseSitUp.
     * @exports CSResponseSitUp
     * @classdesc Represents a CSResponseSitUp.
     * @constructor
     * @param {ICSResponseSitUp=} [properties] Properties to set
     */
    function CSResponseSitUp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseSitUp result.
     * @member {ENMessageError}result
     * @memberof CSResponseSitUp
     * @instance
     */
    CSResponseSitUp.prototype.result = 0;

    /**
     * Creates a new CSResponseSitUp instance using the specified properties.
     * @function create
     * @memberof CSResponseSitUp
     * @static
     * @param {ICSResponseSitUp=} [properties] Properties to set
     * @returns {CSResponseSitUp} CSResponseSitUp instance
     */
    CSResponseSitUp.create = function create(properties) {
        return new CSResponseSitUp(properties);
    };

    /**
     * Encodes the specified CSResponseSitUp message. Does not implicitly {@link CSResponseSitUp.verify|verify} messages.
     * @function encode
     * @memberof CSResponseSitUp
     * @static
     * @param {ICSResponseSitUp} message CSResponseSitUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseSitUp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified CSResponseSitUp message, length delimited. Does not implicitly {@link CSResponseSitUp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseSitUp
     * @static
     * @param {ICSResponseSitUp} message CSResponseSitUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseSitUp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseSitUp message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseSitUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseSitUp} CSResponseSitUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseSitUp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseSitUp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseSitUp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseSitUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseSitUp} CSResponseSitUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseSitUp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseSitUp message.
     * @function verify
     * @memberof CSResponseSitUp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseSitUp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        return null;
    };

    /**
     * Creates a CSResponseSitUp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseSitUp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseSitUp} CSResponseSitUp
     */
    CSResponseSitUp.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseSitUp)
            return object;
        var message = new $root.CSResponseSitUp();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseSitUp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseSitUp
     * @static
     * @param {CSResponseSitUp} message CSResponseSitUp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseSitUp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        return object;
    };

    /**
     * Converts this CSResponseSitUp to JSON.
     * @function toJSON
     * @memberof CSResponseSitUp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseSitUp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseSitUp;
})();

$root.CSNotifySitDown = (function() {

    /**
     * Properties of a CSNotifySitDown.
     * @exports ICSNotifySitDown
     * @interface ICSNotifySitDown
     * @property {ICSTablePlayer} [player] CSNotifySitDown player
     */

    /**
     * Constructs a new CSNotifySitDown.
     * @exports CSNotifySitDown
     * @classdesc Represents a CSNotifySitDown.
     * @constructor
     * @param {ICSNotifySitDown=} [properties] Properties to set
     */
    function CSNotifySitDown(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifySitDown player.
     * @member {(ICSTablePlayer|null|undefined)}player
     * @memberof CSNotifySitDown
     * @instance
     */
    CSNotifySitDown.prototype.player = null;

    /**
     * Creates a new CSNotifySitDown instance using the specified properties.
     * @function create
     * @memberof CSNotifySitDown
     * @static
     * @param {ICSNotifySitDown=} [properties] Properties to set
     * @returns {CSNotifySitDown} CSNotifySitDown instance
     */
    CSNotifySitDown.create = function create(properties) {
        return new CSNotifySitDown(properties);
    };

    /**
     * Encodes the specified CSNotifySitDown message. Does not implicitly {@link CSNotifySitDown.verify|verify} messages.
     * @function encode
     * @memberof CSNotifySitDown
     * @static
     * @param {ICSNotifySitDown} message CSNotifySitDown message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifySitDown.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.player != null && message.hasOwnProperty("player"))
            $root.CSTablePlayer.encode(message.player, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSNotifySitDown message, length delimited. Does not implicitly {@link CSNotifySitDown.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifySitDown
     * @static
     * @param {ICSNotifySitDown} message CSNotifySitDown message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifySitDown.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifySitDown message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifySitDown
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifySitDown} CSNotifySitDown
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifySitDown.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifySitDown();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.player = $root.CSTablePlayer.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifySitDown message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifySitDown
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifySitDown} CSNotifySitDown
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifySitDown.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifySitDown message.
     * @function verify
     * @memberof CSNotifySitDown
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifySitDown.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.player != null && message.hasOwnProperty("player")) {
            var error = $root.CSTablePlayer.verify(message.player);
            if (error)
                return "player." + error;
        }
        return null;
    };

    /**
     * Creates a CSNotifySitDown message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifySitDown
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifySitDown} CSNotifySitDown
     */
    CSNotifySitDown.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifySitDown)
            return object;
        var message = new $root.CSNotifySitDown();
        if (object.player != null) {
            if (typeof object.player !== "object")
                throw TypeError(".CSNotifySitDown.player: object expected");
            message.player = $root.CSTablePlayer.fromObject(object.player);
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifySitDown message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifySitDown
     * @static
     * @param {CSNotifySitDown} message CSNotifySitDown
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifySitDown.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.player = null;
        if (message.player != null && message.hasOwnProperty("player"))
            object.player = $root.CSTablePlayer.toObject(message.player, options);
        return object;
    };

    /**
     * Converts this CSNotifySitDown to JSON.
     * @function toJSON
     * @memberof CSNotifySitDown
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifySitDown.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifySitDown;
})();

/**
 * ENSitUpReason enum.
 * @exports ENSitUpReason
 * @enum {string}
 * @property {number} EN_STANDUP_UNKNOWN=0 EN_STANDUP_UNKNOWN value
 * @property {number} EN_STANDUP_Request=1 EN_STANDUP_Request value
 * @property {number} EN_STANDUP_TuoGuan=2 EN_STANDUP_TuoGuan value
 * @property {number} EN_STANDUP_NoChip=3 EN_STANDUP_NoChip value
 * @property {number} EN_STANDUP_MultiTable=4 EN_STANDUP_MultiTable value
 * @property {number} EN_STANDUP_SNG_Rank=5 EN_STANDUP_SNG_Rank value
 * @property {number} EN_STANDUP_TableClose=6 EN_STANDUP_TableClose value
 */
$root.ENSitUpReason = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_STANDUP_UNKNOWN"] = 0;
    values[valuesById[1] = "EN_STANDUP_Request"] = 1;
    values[valuesById[2] = "EN_STANDUP_TuoGuan"] = 2;
    values[valuesById[3] = "EN_STANDUP_NoChip"] = 3;
    values[valuesById[4] = "EN_STANDUP_MultiTable"] = 4;
    values[valuesById[5] = "EN_STANDUP_SNG_Rank"] = 5;
    values[valuesById[6] = "EN_STANDUP_TableClose"] = 6;
    return values;
})();

$root.CSNotifySitUp = (function() {

    /**
     * Properties of a CSNotifySitUp.
     * @exports ICSNotifySitUp
     * @interface ICSNotifySitUp
     * @property {number} [index] CSNotifySitUp index
     * @property {ENSitUpReason} [reason] CSNotifySitUp reason
     * @property {number|Long} [chip] CSNotifySitUp chip
     * @property {number|Long} [uid] CSNotifySitUp uid
     * @property {number} [sngRank] CSNotifySitUp sngRank
     */

    /**
     * Constructs a new CSNotifySitUp.
     * @exports CSNotifySitUp
     * @classdesc Represents a CSNotifySitUp.
     * @constructor
     * @param {ICSNotifySitUp=} [properties] Properties to set
     */
    function CSNotifySitUp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifySitUp index.
     * @member {number}index
     * @memberof CSNotifySitUp
     * @instance
     */
    CSNotifySitUp.prototype.index = 0;

    /**
     * CSNotifySitUp reason.
     * @member {ENSitUpReason}reason
     * @memberof CSNotifySitUp
     * @instance
     */
    CSNotifySitUp.prototype.reason = 0;

    /**
     * CSNotifySitUp chip.
     * @member {number|Long}chip
     * @memberof CSNotifySitUp
     * @instance
     */
    CSNotifySitUp.prototype.chip = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifySitUp uid.
     * @member {number|Long}uid
     * @memberof CSNotifySitUp
     * @instance
     */
    CSNotifySitUp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifySitUp sngRank.
     * @member {number}sngRank
     * @memberof CSNotifySitUp
     * @instance
     */
    CSNotifySitUp.prototype.sngRank = 0;

    /**
     * Creates a new CSNotifySitUp instance using the specified properties.
     * @function create
     * @memberof CSNotifySitUp
     * @static
     * @param {ICSNotifySitUp=} [properties] Properties to set
     * @returns {CSNotifySitUp} CSNotifySitUp instance
     */
    CSNotifySitUp.create = function create(properties) {
        return new CSNotifySitUp(properties);
    };

    /**
     * Encodes the specified CSNotifySitUp message. Does not implicitly {@link CSNotifySitUp.verify|verify} messages.
     * @function encode
     * @memberof CSNotifySitUp
     * @static
     * @param {ICSNotifySitUp} message CSNotifySitUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifySitUp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
        if (message.reason != null && message.hasOwnProperty("reason"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reason);
        if (message.chip != null && message.hasOwnProperty("chip"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chip);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.uid);
        if (message.sngRank != null && message.hasOwnProperty("sngRank"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.sngRank);
        return writer;
    };

    /**
     * Encodes the specified CSNotifySitUp message, length delimited. Does not implicitly {@link CSNotifySitUp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifySitUp
     * @static
     * @param {ICSNotifySitUp} message CSNotifySitUp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifySitUp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifySitUp message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifySitUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifySitUp} CSNotifySitUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifySitUp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifySitUp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.index = reader.uint32();
                break;
            case 2:
                message.reason = reader.int32();
                break;
            case 3:
                message.chip = reader.uint64();
                break;
            case 4:
                message.uid = reader.uint64();
                break;
            case 5:
                message.sngRank = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifySitUp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifySitUp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifySitUp} CSNotifySitUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifySitUp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifySitUp message.
     * @function verify
     * @memberof CSNotifySitUp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifySitUp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        if (message.reason != null && message.hasOwnProperty("reason"))
            switch (message.reason) {
            default:
                return "reason: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (!$util.isInteger(message.chip) && !(message.chip && $util.isInteger(message.chip.low) && $util.isInteger(message.chip.high)))
                return "chip: integer|Long expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.sngRank != null && message.hasOwnProperty("sngRank"))
            if (!$util.isInteger(message.sngRank))
                return "sngRank: integer expected";
        return null;
    };

    /**
     * Creates a CSNotifySitUp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifySitUp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifySitUp} CSNotifySitUp
     */
    CSNotifySitUp.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifySitUp)
            return object;
        var message = new $root.CSNotifySitUp();
        if (object.index != null)
            message.index = object.index >>> 0;
        switch (object.reason) {
        case "EN_STANDUP_UNKNOWN":
        case 0:
            message.reason = 0;
            break;
        case "EN_STANDUP_Request":
        case 1:
            message.reason = 1;
            break;
        case "EN_STANDUP_TuoGuan":
        case 2:
            message.reason = 2;
            break;
        case "EN_STANDUP_NoChip":
        case 3:
            message.reason = 3;
            break;
        case "EN_STANDUP_MultiTable":
        case 4:
            message.reason = 4;
            break;
        case "EN_STANDUP_SNG_Rank":
        case 5:
            message.reason = 5;
            break;
        case "EN_STANDUP_TableClose":
        case 6:
            message.reason = 6;
            break;
        }
        if (object.chip != null)
            if ($util.Long)
                (message.chip = $util.Long.fromValue(object.chip)).unsigned = true;
            else if (typeof object.chip === "string")
                message.chip = parseInt(object.chip, 10);
            else if (typeof object.chip === "number")
                message.chip = object.chip;
            else if (typeof object.chip === "object")
                message.chip = new $util.LongBits(object.chip.low >>> 0, object.chip.high >>> 0).toNumber(true);
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.sngRank != null)
            message.sngRank = object.sngRank >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSNotifySitUp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifySitUp
     * @static
     * @param {CSNotifySitUp} message CSNotifySitUp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifySitUp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.index = 0;
            object.reason = options.enums === String ? "EN_STANDUP_UNKNOWN" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.chip = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.chip = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
            object.sngRank = 0;
        }
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.reason != null && message.hasOwnProperty("reason"))
            object.reason = options.enums === String ? $root.ENSitUpReason[message.reason] : message.reason;
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (typeof message.chip === "number")
                object.chip = options.longs === String ? String(message.chip) : message.chip;
            else
                object.chip = options.longs === String ? $util.Long.prototype.toString.call(message.chip) : options.longs === Number ? new $util.LongBits(message.chip.low >>> 0, message.chip.high >>> 0).toNumber(true) : message.chip;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.sngRank != null && message.hasOwnProperty("sngRank"))
            object.sngRank = message.sngRank;
        return object;
    };

    /**
     * Converts this CSNotifySitUp to JSON.
     * @function toJSON
     * @memberof CSNotifySitUp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifySitUp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifySitUp;
})();

$root.CSNotifyGameStart = (function() {

    /**
     * Properties of a CSNotifyGameStart.
     * @exports ICSNotifyGameStart
     * @interface ICSNotifyGameStart
     * @property {ICSTableGameInfo} [gameInfo] CSNotifyGameStart gameInfo
     */

    /**
     * Constructs a new CSNotifyGameStart.
     * @exports CSNotifyGameStart
     * @classdesc Represents a CSNotifyGameStart.
     * @constructor
     * @param {ICSNotifyGameStart=} [properties] Properties to set
     */
    function CSNotifyGameStart(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyGameStart gameInfo.
     * @member {(ICSTableGameInfo|null|undefined)}gameInfo
     * @memberof CSNotifyGameStart
     * @instance
     */
    CSNotifyGameStart.prototype.gameInfo = null;

    /**
     * Creates a new CSNotifyGameStart instance using the specified properties.
     * @function create
     * @memberof CSNotifyGameStart
     * @static
     * @param {ICSNotifyGameStart=} [properties] Properties to set
     * @returns {CSNotifyGameStart} CSNotifyGameStart instance
     */
    CSNotifyGameStart.create = function create(properties) {
        return new CSNotifyGameStart(properties);
    };

    /**
     * Encodes the specified CSNotifyGameStart message. Does not implicitly {@link CSNotifyGameStart.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyGameStart
     * @static
     * @param {ICSNotifyGameStart} message CSNotifyGameStart message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyGameStart.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gameInfo != null && message.hasOwnProperty("gameInfo"))
            $root.CSTableGameInfo.encode(message.gameInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSNotifyGameStart message, length delimited. Does not implicitly {@link CSNotifyGameStart.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyGameStart
     * @static
     * @param {ICSNotifyGameStart} message CSNotifyGameStart message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyGameStart.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyGameStart message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyGameStart
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyGameStart} CSNotifyGameStart
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyGameStart.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyGameStart();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gameInfo = $root.CSTableGameInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyGameStart message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyGameStart
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyGameStart} CSNotifyGameStart
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyGameStart.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyGameStart message.
     * @function verify
     * @memberof CSNotifyGameStart
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyGameStart.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gameInfo != null && message.hasOwnProperty("gameInfo")) {
            var error = $root.CSTableGameInfo.verify(message.gameInfo);
            if (error)
                return "gameInfo." + error;
        }
        return null;
    };

    /**
     * Creates a CSNotifyGameStart message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyGameStart
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyGameStart} CSNotifyGameStart
     */
    CSNotifyGameStart.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyGameStart)
            return object;
        var message = new $root.CSNotifyGameStart();
        if (object.gameInfo != null) {
            if (typeof object.gameInfo !== "object")
                throw TypeError(".CSNotifyGameStart.gameInfo: object expected");
            message.gameInfo = $root.CSTableGameInfo.fromObject(object.gameInfo);
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyGameStart message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyGameStart
     * @static
     * @param {CSNotifyGameStart} message CSNotifyGameStart
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyGameStart.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.gameInfo = null;
        if (message.gameInfo != null && message.hasOwnProperty("gameInfo"))
            object.gameInfo = $root.CSTableGameInfo.toObject(message.gameInfo, options);
        return object;
    };

    /**
     * Converts this CSNotifyGameStart to JSON.
     * @function toJSON
     * @memberof CSNotifyGameStart
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyGameStart.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyGameStart;
})();

$root.CSNotifyHoleCard = (function() {

    /**
     * Properties of a CSNotifyHoleCard.
     * @exports ICSNotifyHoleCard
     * @interface ICSNotifyHoleCard
     * @property {Array.<number>} [holeCards] CSNotifyHoleCard holeCards
     */

    /**
     * Constructs a new CSNotifyHoleCard.
     * @exports CSNotifyHoleCard
     * @classdesc Represents a CSNotifyHoleCard.
     * @constructor
     * @param {ICSNotifyHoleCard=} [properties] Properties to set
     */
    function CSNotifyHoleCard(properties) {
        this.holeCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyHoleCard holeCards.
     * @member {Array.<number>}holeCards
     * @memberof CSNotifyHoleCard
     * @instance
     */
    CSNotifyHoleCard.prototype.holeCards = $util.emptyArray;

    /**
     * Creates a new CSNotifyHoleCard instance using the specified properties.
     * @function create
     * @memberof CSNotifyHoleCard
     * @static
     * @param {ICSNotifyHoleCard=} [properties] Properties to set
     * @returns {CSNotifyHoleCard} CSNotifyHoleCard instance
     */
    CSNotifyHoleCard.create = function create(properties) {
        return new CSNotifyHoleCard(properties);
    };

    /**
     * Encodes the specified CSNotifyHoleCard message. Does not implicitly {@link CSNotifyHoleCard.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyHoleCard
     * @static
     * @param {ICSNotifyHoleCard} message CSNotifyHoleCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyHoleCard.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.holeCards != null && message.holeCards.length)
            for (var i = 0; i < message.holeCards.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.holeCards[i]);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyHoleCard message, length delimited. Does not implicitly {@link CSNotifyHoleCard.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyHoleCard
     * @static
     * @param {ICSNotifyHoleCard} message CSNotifyHoleCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyHoleCard.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyHoleCard message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyHoleCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyHoleCard} CSNotifyHoleCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyHoleCard.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyHoleCard();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.holeCards && message.holeCards.length))
                    message.holeCards = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.holeCards.push(reader.uint32());
                } else
                    message.holeCards.push(reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyHoleCard message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyHoleCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyHoleCard} CSNotifyHoleCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyHoleCard.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyHoleCard message.
     * @function verify
     * @memberof CSNotifyHoleCard
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyHoleCard.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.holeCards != null && message.hasOwnProperty("holeCards")) {
            if (!Array.isArray(message.holeCards))
                return "holeCards: array expected";
            for (var i = 0; i < message.holeCards.length; ++i)
                if (!$util.isInteger(message.holeCards[i]))
                    return "holeCards: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a CSNotifyHoleCard message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyHoleCard
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyHoleCard} CSNotifyHoleCard
     */
    CSNotifyHoleCard.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyHoleCard)
            return object;
        var message = new $root.CSNotifyHoleCard();
        if (object.holeCards) {
            if (!Array.isArray(object.holeCards))
                throw TypeError(".CSNotifyHoleCard.holeCards: array expected");
            message.holeCards = [];
            for (var i = 0; i < object.holeCards.length; ++i)
                message.holeCards[i] = object.holeCards[i] >>> 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyHoleCard message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyHoleCard
     * @static
     * @param {CSNotifyHoleCard} message CSNotifyHoleCard
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyHoleCard.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.holeCards = [];
        if (message.holeCards && message.holeCards.length) {
            object.holeCards = [];
            for (var j = 0; j < message.holeCards.length; ++j)
                object.holeCards[j] = message.holeCards[j];
        }
        return object;
    };

    /**
     * Converts this CSNotifyHoleCard to JSON.
     * @function toJSON
     * @memberof CSNotifyHoleCard
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyHoleCard.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyHoleCard;
})();

$root.CSNotifyPotInfo = (function() {

    /**
     * Properties of a CSNotifyPotInfo.
     * @exports ICSNotifyPotInfo
     * @interface ICSNotifyPotInfo
     * @property {Array.<ICSTablePot>} [pots] CSNotifyPotInfo pots
     */

    /**
     * Constructs a new CSNotifyPotInfo.
     * @exports CSNotifyPotInfo
     * @classdesc Represents a CSNotifyPotInfo.
     * @constructor
     * @param {ICSNotifyPotInfo=} [properties] Properties to set
     */
    function CSNotifyPotInfo(properties) {
        this.pots = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyPotInfo pots.
     * @member {Array.<ICSTablePot>}pots
     * @memberof CSNotifyPotInfo
     * @instance
     */
    CSNotifyPotInfo.prototype.pots = $util.emptyArray;

    /**
     * Creates a new CSNotifyPotInfo instance using the specified properties.
     * @function create
     * @memberof CSNotifyPotInfo
     * @static
     * @param {ICSNotifyPotInfo=} [properties] Properties to set
     * @returns {CSNotifyPotInfo} CSNotifyPotInfo instance
     */
    CSNotifyPotInfo.create = function create(properties) {
        return new CSNotifyPotInfo(properties);
    };

    /**
     * Encodes the specified CSNotifyPotInfo message. Does not implicitly {@link CSNotifyPotInfo.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyPotInfo
     * @static
     * @param {ICSNotifyPotInfo} message CSNotifyPotInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyPotInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.pots != null && message.pots.length)
            for (var i = 0; i < message.pots.length; ++i)
                $root.CSTablePot.encode(message.pots[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSNotifyPotInfo message, length delimited. Does not implicitly {@link CSNotifyPotInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyPotInfo
     * @static
     * @param {ICSNotifyPotInfo} message CSNotifyPotInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyPotInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyPotInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyPotInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyPotInfo} CSNotifyPotInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyPotInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyPotInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.pots && message.pots.length))
                    message.pots = [];
                message.pots.push($root.CSTablePot.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyPotInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyPotInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyPotInfo} CSNotifyPotInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyPotInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyPotInfo message.
     * @function verify
     * @memberof CSNotifyPotInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyPotInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.pots != null && message.hasOwnProperty("pots")) {
            if (!Array.isArray(message.pots))
                return "pots: array expected";
            for (var i = 0; i < message.pots.length; ++i) {
                var error = $root.CSTablePot.verify(message.pots[i]);
                if (error)
                    return "pots." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSNotifyPotInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyPotInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyPotInfo} CSNotifyPotInfo
     */
    CSNotifyPotInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyPotInfo)
            return object;
        var message = new $root.CSNotifyPotInfo();
        if (object.pots) {
            if (!Array.isArray(object.pots))
                throw TypeError(".CSNotifyPotInfo.pots: array expected");
            message.pots = [];
            for (var i = 0; i < object.pots.length; ++i) {
                if (typeof object.pots[i] !== "object")
                    throw TypeError(".CSNotifyPotInfo.pots: object expected");
                message.pots[i] = $root.CSTablePot.fromObject(object.pots[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyPotInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyPotInfo
     * @static
     * @param {CSNotifyPotInfo} message CSNotifyPotInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyPotInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.pots = [];
        if (message.pots && message.pots.length) {
            object.pots = [];
            for (var j = 0; j < message.pots.length; ++j)
                object.pots[j] = $root.CSTablePot.toObject(message.pots[j], options);
        }
        return object;
    };

    /**
     * Converts this CSNotifyPotInfo to JSON.
     * @function toJSON
     * @memberof CSNotifyPotInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyPotInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyPotInfo;
})();

$root.CSNotifyFlopCard = (function() {

    /**
     * Properties of a CSNotifyFlopCard.
     * @exports ICSNotifyFlopCard
     * @interface ICSNotifyFlopCard
     * @property {Array.<number>} [flopCards] CSNotifyFlopCard flopCards
     * @property {ENCardForm} [cardForm] CSNotifyFlopCard cardForm
     */

    /**
     * Constructs a new CSNotifyFlopCard.
     * @exports CSNotifyFlopCard
     * @classdesc Represents a CSNotifyFlopCard.
     * @constructor
     * @param {ICSNotifyFlopCard=} [properties] Properties to set
     */
    function CSNotifyFlopCard(properties) {
        this.flopCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyFlopCard flopCards.
     * @member {Array.<number>}flopCards
     * @memberof CSNotifyFlopCard
     * @instance
     */
    CSNotifyFlopCard.prototype.flopCards = $util.emptyArray;

    /**
     * CSNotifyFlopCard cardForm.
     * @member {ENCardForm}cardForm
     * @memberof CSNotifyFlopCard
     * @instance
     */
    CSNotifyFlopCard.prototype.cardForm = 0;

    /**
     * Creates a new CSNotifyFlopCard instance using the specified properties.
     * @function create
     * @memberof CSNotifyFlopCard
     * @static
     * @param {ICSNotifyFlopCard=} [properties] Properties to set
     * @returns {CSNotifyFlopCard} CSNotifyFlopCard instance
     */
    CSNotifyFlopCard.create = function create(properties) {
        return new CSNotifyFlopCard(properties);
    };

    /**
     * Encodes the specified CSNotifyFlopCard message. Does not implicitly {@link CSNotifyFlopCard.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyFlopCard
     * @static
     * @param {ICSNotifyFlopCard} message CSNotifyFlopCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyFlopCard.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.flopCards != null && message.flopCards.length)
            for (var i = 0; i < message.flopCards.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.flopCards[i]);
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cardForm);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyFlopCard message, length delimited. Does not implicitly {@link CSNotifyFlopCard.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyFlopCard
     * @static
     * @param {ICSNotifyFlopCard} message CSNotifyFlopCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyFlopCard.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyFlopCard message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyFlopCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyFlopCard} CSNotifyFlopCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyFlopCard.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyFlopCard();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.flopCards && message.flopCards.length))
                    message.flopCards = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.flopCards.push(reader.uint32());
                } else
                    message.flopCards.push(reader.uint32());
                break;
            case 2:
                message.cardForm = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyFlopCard message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyFlopCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyFlopCard} CSNotifyFlopCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyFlopCard.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyFlopCard message.
     * @function verify
     * @memberof CSNotifyFlopCard
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyFlopCard.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.flopCards != null && message.hasOwnProperty("flopCards")) {
            if (!Array.isArray(message.flopCards))
                return "flopCards: array expected";
            for (var i = 0; i < message.flopCards.length; ++i)
                if (!$util.isInteger(message.flopCards[i]))
                    return "flopCards: integer[] expected";
        }
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            switch (message.cardForm) {
            default:
                return "cardForm: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
        return null;
    };

    /**
     * Creates a CSNotifyFlopCard message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyFlopCard
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyFlopCard} CSNotifyFlopCard
     */
    CSNotifyFlopCard.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyFlopCard)
            return object;
        var message = new $root.CSNotifyFlopCard();
        if (object.flopCards) {
            if (!Array.isArray(object.flopCards))
                throw TypeError(".CSNotifyFlopCard.flopCards: array expected");
            message.flopCards = [];
            for (var i = 0; i < object.flopCards.length; ++i)
                message.flopCards[i] = object.flopCards[i] >>> 0;
        }
        switch (object.cardForm) {
        case "EN_CARD_FORM_UNKONWN":
        case 0:
            message.cardForm = 0;
            break;
        case "EN_CARD_FORM_HIGH_CARD":
        case 1:
            message.cardForm = 1;
            break;
        case "EN_CARD_FORM_ONE_PAIR":
        case 2:
            message.cardForm = 2;
            break;
        case "EN_CARD_FORM_TWO_PAIR":
        case 3:
            message.cardForm = 3;
            break;
        case "EN_CARD_FORM_THREE_OF_A_KING":
        case 4:
            message.cardForm = 4;
            break;
        case "EN_CARD_FORM_FLUSH":
        case 5:
            message.cardForm = 5;
            break;
        case "EN_CARD_FORM_STRAIGHT":
        case 6:
            message.cardForm = 6;
            break;
        case "EN_CARD_FORM_FULL_HOUSE":
        case 7:
            message.cardForm = 7;
            break;
        case "EN_CARD_FORM_FOUR_OF_A_KING":
        case 8:
            message.cardForm = 8;
            break;
        case "EN_CARD_FORM_STRAIGHT_FLUSH":
        case 9:
            message.cardForm = 9;
            break;
        case "EN_CARD_FORM_ROYAL_FLUSH":
        case 10:
            message.cardForm = 10;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyFlopCard message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyFlopCard
     * @static
     * @param {CSNotifyFlopCard} message CSNotifyFlopCard
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyFlopCard.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.flopCards = [];
        if (options.defaults)
            object.cardForm = options.enums === String ? "EN_CARD_FORM_UNKONWN" : 0;
        if (message.flopCards && message.flopCards.length) {
            object.flopCards = [];
            for (var j = 0; j < message.flopCards.length; ++j)
                object.flopCards[j] = message.flopCards[j];
        }
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            object.cardForm = options.enums === String ? $root.ENCardForm[message.cardForm] : message.cardForm;
        return object;
    };

    /**
     * Converts this CSNotifyFlopCard to JSON.
     * @function toJSON
     * @memberof CSNotifyFlopCard
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyFlopCard.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyFlopCard;
})();

$root.CSNotifyTurnCard = (function() {

    /**
     * Properties of a CSNotifyTurnCard.
     * @exports ICSNotifyTurnCard
     * @interface ICSNotifyTurnCard
     * @property {number} [turnCard] CSNotifyTurnCard turnCard
     * @property {ENCardForm} [cardForm] CSNotifyTurnCard cardForm
     */

    /**
     * Constructs a new CSNotifyTurnCard.
     * @exports CSNotifyTurnCard
     * @classdesc Represents a CSNotifyTurnCard.
     * @constructor
     * @param {ICSNotifyTurnCard=} [properties] Properties to set
     */
    function CSNotifyTurnCard(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyTurnCard turnCard.
     * @member {number}turnCard
     * @memberof CSNotifyTurnCard
     * @instance
     */
    CSNotifyTurnCard.prototype.turnCard = 0;

    /**
     * CSNotifyTurnCard cardForm.
     * @member {ENCardForm}cardForm
     * @memberof CSNotifyTurnCard
     * @instance
     */
    CSNotifyTurnCard.prototype.cardForm = 0;

    /**
     * Creates a new CSNotifyTurnCard instance using the specified properties.
     * @function create
     * @memberof CSNotifyTurnCard
     * @static
     * @param {ICSNotifyTurnCard=} [properties] Properties to set
     * @returns {CSNotifyTurnCard} CSNotifyTurnCard instance
     */
    CSNotifyTurnCard.create = function create(properties) {
        return new CSNotifyTurnCard(properties);
    };

    /**
     * Encodes the specified CSNotifyTurnCard message. Does not implicitly {@link CSNotifyTurnCard.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyTurnCard
     * @static
     * @param {ICSNotifyTurnCard} message CSNotifyTurnCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyTurnCard.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.turnCard != null && message.hasOwnProperty("turnCard"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.turnCard);
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cardForm);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyTurnCard message, length delimited. Does not implicitly {@link CSNotifyTurnCard.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyTurnCard
     * @static
     * @param {ICSNotifyTurnCard} message CSNotifyTurnCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyTurnCard.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyTurnCard message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyTurnCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyTurnCard} CSNotifyTurnCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyTurnCard.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyTurnCard();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.turnCard = reader.uint32();
                break;
            case 2:
                message.cardForm = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyTurnCard message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyTurnCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyTurnCard} CSNotifyTurnCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyTurnCard.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyTurnCard message.
     * @function verify
     * @memberof CSNotifyTurnCard
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyTurnCard.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.turnCard != null && message.hasOwnProperty("turnCard"))
            if (!$util.isInteger(message.turnCard))
                return "turnCard: integer expected";
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            switch (message.cardForm) {
            default:
                return "cardForm: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
        return null;
    };

    /**
     * Creates a CSNotifyTurnCard message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyTurnCard
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyTurnCard} CSNotifyTurnCard
     */
    CSNotifyTurnCard.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyTurnCard)
            return object;
        var message = new $root.CSNotifyTurnCard();
        if (object.turnCard != null)
            message.turnCard = object.turnCard >>> 0;
        switch (object.cardForm) {
        case "EN_CARD_FORM_UNKONWN":
        case 0:
            message.cardForm = 0;
            break;
        case "EN_CARD_FORM_HIGH_CARD":
        case 1:
            message.cardForm = 1;
            break;
        case "EN_CARD_FORM_ONE_PAIR":
        case 2:
            message.cardForm = 2;
            break;
        case "EN_CARD_FORM_TWO_PAIR":
        case 3:
            message.cardForm = 3;
            break;
        case "EN_CARD_FORM_THREE_OF_A_KING":
        case 4:
            message.cardForm = 4;
            break;
        case "EN_CARD_FORM_FLUSH":
        case 5:
            message.cardForm = 5;
            break;
        case "EN_CARD_FORM_STRAIGHT":
        case 6:
            message.cardForm = 6;
            break;
        case "EN_CARD_FORM_FULL_HOUSE":
        case 7:
            message.cardForm = 7;
            break;
        case "EN_CARD_FORM_FOUR_OF_A_KING":
        case 8:
            message.cardForm = 8;
            break;
        case "EN_CARD_FORM_STRAIGHT_FLUSH":
        case 9:
            message.cardForm = 9;
            break;
        case "EN_CARD_FORM_ROYAL_FLUSH":
        case 10:
            message.cardForm = 10;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyTurnCard message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyTurnCard
     * @static
     * @param {CSNotifyTurnCard} message CSNotifyTurnCard
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyTurnCard.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.turnCard = 0;
            object.cardForm = options.enums === String ? "EN_CARD_FORM_UNKONWN" : 0;
        }
        if (message.turnCard != null && message.hasOwnProperty("turnCard"))
            object.turnCard = message.turnCard;
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            object.cardForm = options.enums === String ? $root.ENCardForm[message.cardForm] : message.cardForm;
        return object;
    };

    /**
     * Converts this CSNotifyTurnCard to JSON.
     * @function toJSON
     * @memberof CSNotifyTurnCard
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyTurnCard.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyTurnCard;
})();

$root.CSNotifyRiverCard = (function() {

    /**
     * Properties of a CSNotifyRiverCard.
     * @exports ICSNotifyRiverCard
     * @interface ICSNotifyRiverCard
     * @property {number} [riverCard] CSNotifyRiverCard riverCard
     * @property {ENCardForm} [cardForm] CSNotifyRiverCard cardForm
     */

    /**
     * Constructs a new CSNotifyRiverCard.
     * @exports CSNotifyRiverCard
     * @classdesc Represents a CSNotifyRiverCard.
     * @constructor
     * @param {ICSNotifyRiverCard=} [properties] Properties to set
     */
    function CSNotifyRiverCard(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyRiverCard riverCard.
     * @member {number}riverCard
     * @memberof CSNotifyRiverCard
     * @instance
     */
    CSNotifyRiverCard.prototype.riverCard = 0;

    /**
     * CSNotifyRiverCard cardForm.
     * @member {ENCardForm}cardForm
     * @memberof CSNotifyRiverCard
     * @instance
     */
    CSNotifyRiverCard.prototype.cardForm = 0;

    /**
     * Creates a new CSNotifyRiverCard instance using the specified properties.
     * @function create
     * @memberof CSNotifyRiverCard
     * @static
     * @param {ICSNotifyRiverCard=} [properties] Properties to set
     * @returns {CSNotifyRiverCard} CSNotifyRiverCard instance
     */
    CSNotifyRiverCard.create = function create(properties) {
        return new CSNotifyRiverCard(properties);
    };

    /**
     * Encodes the specified CSNotifyRiverCard message. Does not implicitly {@link CSNotifyRiverCard.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyRiverCard
     * @static
     * @param {ICSNotifyRiverCard} message CSNotifyRiverCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyRiverCard.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.riverCard != null && message.hasOwnProperty("riverCard"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.riverCard);
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cardForm);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyRiverCard message, length delimited. Does not implicitly {@link CSNotifyRiverCard.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyRiverCard
     * @static
     * @param {ICSNotifyRiverCard} message CSNotifyRiverCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyRiverCard.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyRiverCard message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyRiverCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyRiverCard} CSNotifyRiverCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyRiverCard.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyRiverCard();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.riverCard = reader.uint32();
                break;
            case 2:
                message.cardForm = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyRiverCard message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyRiverCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyRiverCard} CSNotifyRiverCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyRiverCard.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyRiverCard message.
     * @function verify
     * @memberof CSNotifyRiverCard
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyRiverCard.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.riverCard != null && message.hasOwnProperty("riverCard"))
            if (!$util.isInteger(message.riverCard))
                return "riverCard: integer expected";
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            switch (message.cardForm) {
            default:
                return "cardForm: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
        return null;
    };

    /**
     * Creates a CSNotifyRiverCard message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyRiverCard
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyRiverCard} CSNotifyRiverCard
     */
    CSNotifyRiverCard.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyRiverCard)
            return object;
        var message = new $root.CSNotifyRiverCard();
        if (object.riverCard != null)
            message.riverCard = object.riverCard >>> 0;
        switch (object.cardForm) {
        case "EN_CARD_FORM_UNKONWN":
        case 0:
            message.cardForm = 0;
            break;
        case "EN_CARD_FORM_HIGH_CARD":
        case 1:
            message.cardForm = 1;
            break;
        case "EN_CARD_FORM_ONE_PAIR":
        case 2:
            message.cardForm = 2;
            break;
        case "EN_CARD_FORM_TWO_PAIR":
        case 3:
            message.cardForm = 3;
            break;
        case "EN_CARD_FORM_THREE_OF_A_KING":
        case 4:
            message.cardForm = 4;
            break;
        case "EN_CARD_FORM_FLUSH":
        case 5:
            message.cardForm = 5;
            break;
        case "EN_CARD_FORM_STRAIGHT":
        case 6:
            message.cardForm = 6;
            break;
        case "EN_CARD_FORM_FULL_HOUSE":
        case 7:
            message.cardForm = 7;
            break;
        case "EN_CARD_FORM_FOUR_OF_A_KING":
        case 8:
            message.cardForm = 8;
            break;
        case "EN_CARD_FORM_STRAIGHT_FLUSH":
        case 9:
            message.cardForm = 9;
            break;
        case "EN_CARD_FORM_ROYAL_FLUSH":
        case 10:
            message.cardForm = 10;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyRiverCard message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyRiverCard
     * @static
     * @param {CSNotifyRiverCard} message CSNotifyRiverCard
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyRiverCard.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.riverCard = 0;
            object.cardForm = options.enums === String ? "EN_CARD_FORM_UNKONWN" : 0;
        }
        if (message.riverCard != null && message.hasOwnProperty("riverCard"))
            object.riverCard = message.riverCard;
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            object.cardForm = options.enums === String ? $root.ENCardForm[message.cardForm] : message.cardForm;
        return object;
    };

    /**
     * Converts this CSNotifyRiverCard to JSON.
     * @function toJSON
     * @memberof CSNotifyRiverCard
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyRiverCard.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyRiverCard;
})();

$root.CSNotifyDoAction = (function() {

    /**
     * Properties of a CSNotifyDoAction.
     * @exports ICSNotifyDoAction
     * @interface ICSNotifyDoAction
     * @property {number|Long} [playerUid] CSNotifyDoAction playerUid
     * @property {number} [playerIndex] CSNotifyDoAction playerIndex
     * @property {Array.<ENPlayerAction>} [allowActions] CSNotifyDoAction allowActions
     * @property {number|Long} [betMin] CSNotifyDoAction betMin
     * @property {number|Long} [betMax] CSNotifyDoAction betMax
     * @property {number|Long} [callNum] CSNotifyDoAction callNum
     * @property {number|Long} [timeout] CSNotifyDoAction timeout
     * @property {boolean} [isUnderGun] CSNotifyDoAction isUnderGun
     * @property {number|Long} [chip] CSNotifyDoAction chip
     */

    /**
     * Constructs a new CSNotifyDoAction.
     * @exports CSNotifyDoAction
     * @classdesc Represents a CSNotifyDoAction.
     * @constructor
     * @param {ICSNotifyDoAction=} [properties] Properties to set
     */
    function CSNotifyDoAction(properties) {
        this.allowActions = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyDoAction playerUid.
     * @member {number|Long}playerUid
     * @memberof CSNotifyDoAction
     * @instance
     */
    CSNotifyDoAction.prototype.playerUid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyDoAction playerIndex.
     * @member {number}playerIndex
     * @memberof CSNotifyDoAction
     * @instance
     */
    CSNotifyDoAction.prototype.playerIndex = 0;

    /**
     * CSNotifyDoAction allowActions.
     * @member {Array.<ENPlayerAction>}allowActions
     * @memberof CSNotifyDoAction
     * @instance
     */
    CSNotifyDoAction.prototype.allowActions = $util.emptyArray;

    /**
     * CSNotifyDoAction betMin.
     * @member {number|Long}betMin
     * @memberof CSNotifyDoAction
     * @instance
     */
    CSNotifyDoAction.prototype.betMin = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyDoAction betMax.
     * @member {number|Long}betMax
     * @memberof CSNotifyDoAction
     * @instance
     */
    CSNotifyDoAction.prototype.betMax = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyDoAction callNum.
     * @member {number|Long}callNum
     * @memberof CSNotifyDoAction
     * @instance
     */
    CSNotifyDoAction.prototype.callNum = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyDoAction timeout.
     * @member {number|Long}timeout
     * @memberof CSNotifyDoAction
     * @instance
     */
    CSNotifyDoAction.prototype.timeout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyDoAction isUnderGun.
     * @member {boolean}isUnderGun
     * @memberof CSNotifyDoAction
     * @instance
     */
    CSNotifyDoAction.prototype.isUnderGun = false;

    /**
     * CSNotifyDoAction chip.
     * @member {number|Long}chip
     * @memberof CSNotifyDoAction
     * @instance
     */
    CSNotifyDoAction.prototype.chip = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSNotifyDoAction instance using the specified properties.
     * @function create
     * @memberof CSNotifyDoAction
     * @static
     * @param {ICSNotifyDoAction=} [properties] Properties to set
     * @returns {CSNotifyDoAction} CSNotifyDoAction instance
     */
    CSNotifyDoAction.create = function create(properties) {
        return new CSNotifyDoAction(properties);
    };

    /**
     * Encodes the specified CSNotifyDoAction message. Does not implicitly {@link CSNotifyDoAction.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyDoAction
     * @static
     * @param {ICSNotifyDoAction} message CSNotifyDoAction message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyDoAction.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.playerUid);
        if (message.playerIndex != null && message.hasOwnProperty("playerIndex"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.playerIndex);
        if (message.allowActions != null && message.allowActions.length)
            for (var i = 0; i < message.allowActions.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.allowActions[i]);
        if (message.betMin != null && message.hasOwnProperty("betMin"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.betMin);
        if (message.betMax != null && message.hasOwnProperty("betMax"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.betMax);
        if (message.callNum != null && message.hasOwnProperty("callNum"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.callNum);
        if (message.timeout != null && message.hasOwnProperty("timeout"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.timeout);
        if (message.isUnderGun != null && message.hasOwnProperty("isUnderGun"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.isUnderGun);
        if (message.chip != null && message.hasOwnProperty("chip"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.chip);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyDoAction message, length delimited. Does not implicitly {@link CSNotifyDoAction.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyDoAction
     * @static
     * @param {ICSNotifyDoAction} message CSNotifyDoAction message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyDoAction.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyDoAction message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyDoAction
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyDoAction} CSNotifyDoAction
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyDoAction.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyDoAction();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.playerUid = reader.uint64();
                break;
            case 2:
                message.playerIndex = reader.uint32();
                break;
            case 3:
                if (!(message.allowActions && message.allowActions.length))
                    message.allowActions = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.allowActions.push(reader.int32());
                } else
                    message.allowActions.push(reader.int32());
                break;
            case 4:
                message.betMin = reader.uint64();
                break;
            case 5:
                message.betMax = reader.uint64();
                break;
            case 6:
                message.callNum = reader.uint64();
                break;
            case 7:
                message.timeout = reader.uint64();
                break;
            case 8:
                message.isUnderGun = reader.bool();
                break;
            case 9:
                message.chip = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyDoAction message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyDoAction
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyDoAction} CSNotifyDoAction
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyDoAction.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyDoAction message.
     * @function verify
     * @memberof CSNotifyDoAction
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyDoAction.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            if (!$util.isInteger(message.playerUid) && !(message.playerUid && $util.isInteger(message.playerUid.low) && $util.isInteger(message.playerUid.high)))
                return "playerUid: integer|Long expected";
        if (message.playerIndex != null && message.hasOwnProperty("playerIndex"))
            if (!$util.isInteger(message.playerIndex))
                return "playerIndex: integer expected";
        if (message.allowActions != null && message.hasOwnProperty("allowActions")) {
            if (!Array.isArray(message.allowActions))
                return "allowActions: array expected";
            for (var i = 0; i < message.allowActions.length; ++i)
                switch (message.allowActions[i]) {
                default:
                    return "allowActions: enum value[] expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    break;
                }
        }
        if (message.betMin != null && message.hasOwnProperty("betMin"))
            if (!$util.isInteger(message.betMin) && !(message.betMin && $util.isInteger(message.betMin.low) && $util.isInteger(message.betMin.high)))
                return "betMin: integer|Long expected";
        if (message.betMax != null && message.hasOwnProperty("betMax"))
            if (!$util.isInteger(message.betMax) && !(message.betMax && $util.isInteger(message.betMax.low) && $util.isInteger(message.betMax.high)))
                return "betMax: integer|Long expected";
        if (message.callNum != null && message.hasOwnProperty("callNum"))
            if (!$util.isInteger(message.callNum) && !(message.callNum && $util.isInteger(message.callNum.low) && $util.isInteger(message.callNum.high)))
                return "callNum: integer|Long expected";
        if (message.timeout != null && message.hasOwnProperty("timeout"))
            if (!$util.isInteger(message.timeout) && !(message.timeout && $util.isInteger(message.timeout.low) && $util.isInteger(message.timeout.high)))
                return "timeout: integer|Long expected";
        if (message.isUnderGun != null && message.hasOwnProperty("isUnderGun"))
            if (typeof message.isUnderGun !== "boolean")
                return "isUnderGun: boolean expected";
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (!$util.isInteger(message.chip) && !(message.chip && $util.isInteger(message.chip.low) && $util.isInteger(message.chip.high)))
                return "chip: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSNotifyDoAction message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyDoAction
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyDoAction} CSNotifyDoAction
     */
    CSNotifyDoAction.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyDoAction)
            return object;
        var message = new $root.CSNotifyDoAction();
        if (object.playerUid != null)
            if ($util.Long)
                (message.playerUid = $util.Long.fromValue(object.playerUid)).unsigned = true;
            else if (typeof object.playerUid === "string")
                message.playerUid = parseInt(object.playerUid, 10);
            else if (typeof object.playerUid === "number")
                message.playerUid = object.playerUid;
            else if (typeof object.playerUid === "object")
                message.playerUid = new $util.LongBits(object.playerUid.low >>> 0, object.playerUid.high >>> 0).toNumber(true);
        if (object.playerIndex != null)
            message.playerIndex = object.playerIndex >>> 0;
        if (object.allowActions) {
            if (!Array.isArray(object.allowActions))
                throw TypeError(".CSNotifyDoAction.allowActions: array expected");
            message.allowActions = [];
            for (var i = 0; i < object.allowActions.length; ++i)
                switch (object.allowActions[i]) {
                default:
                case "EN_PLAYER_ACTION_BET":
                case 0:
                    message.allowActions[i] = 0;
                    break;
                case "EN_PLAYER_ACTION_CALL":
                case 1:
                    message.allowActions[i] = 1;
                    break;
                case "EN_PLAYER_ACTION_CHECK":
                case 2:
                    message.allowActions[i] = 2;
                    break;
                case "EN_PLAYER_ACTION_FOLD":
                case 3:
                    message.allowActions[i] = 3;
                    break;
                case "EN_PLAYER_ACTION_RAISE":
                case 4:
                    message.allowActions[i] = 4;
                    break;
                case "EN_PLAYER_ACTION_ALL_IN":
                case 5:
                    message.allowActions[i] = 5;
                    break;
                case "EN_PLAYER_ACTION_PRE_BET":
                case 6:
                    message.allowActions[i] = 6;
                    break;
                case "EN_PLAYER_ACTION_NONE":
                case 7:
                    message.allowActions[i] = 7;
                    break;
                }
        }
        if (object.betMin != null)
            if ($util.Long)
                (message.betMin = $util.Long.fromValue(object.betMin)).unsigned = true;
            else if (typeof object.betMin === "string")
                message.betMin = parseInt(object.betMin, 10);
            else if (typeof object.betMin === "number")
                message.betMin = object.betMin;
            else if (typeof object.betMin === "object")
                message.betMin = new $util.LongBits(object.betMin.low >>> 0, object.betMin.high >>> 0).toNumber(true);
        if (object.betMax != null)
            if ($util.Long)
                (message.betMax = $util.Long.fromValue(object.betMax)).unsigned = true;
            else if (typeof object.betMax === "string")
                message.betMax = parseInt(object.betMax, 10);
            else if (typeof object.betMax === "number")
                message.betMax = object.betMax;
            else if (typeof object.betMax === "object")
                message.betMax = new $util.LongBits(object.betMax.low >>> 0, object.betMax.high >>> 0).toNumber(true);
        if (object.callNum != null)
            if ($util.Long)
                (message.callNum = $util.Long.fromValue(object.callNum)).unsigned = true;
            else if (typeof object.callNum === "string")
                message.callNum = parseInt(object.callNum, 10);
            else if (typeof object.callNum === "number")
                message.callNum = object.callNum;
            else if (typeof object.callNum === "object")
                message.callNum = new $util.LongBits(object.callNum.low >>> 0, object.callNum.high >>> 0).toNumber(true);
        if (object.timeout != null)
            if ($util.Long)
                (message.timeout = $util.Long.fromValue(object.timeout)).unsigned = true;
            else if (typeof object.timeout === "string")
                message.timeout = parseInt(object.timeout, 10);
            else if (typeof object.timeout === "number")
                message.timeout = object.timeout;
            else if (typeof object.timeout === "object")
                message.timeout = new $util.LongBits(object.timeout.low >>> 0, object.timeout.high >>> 0).toNumber(true);
        if (object.isUnderGun != null)
            message.isUnderGun = Boolean(object.isUnderGun);
        if (object.chip != null)
            if ($util.Long)
                (message.chip = $util.Long.fromValue(object.chip)).unsigned = true;
            else if (typeof object.chip === "string")
                message.chip = parseInt(object.chip, 10);
            else if (typeof object.chip === "number")
                message.chip = object.chip;
            else if (typeof object.chip === "object")
                message.chip = new $util.LongBits(object.chip.low >>> 0, object.chip.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyDoAction message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyDoAction
     * @static
     * @param {CSNotifyDoAction} message CSNotifyDoAction
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyDoAction.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.allowActions = [];
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.playerUid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.playerUid = options.longs === String ? "0" : 0;
            object.playerIndex = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.betMin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.betMin = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.betMax = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.betMax = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.callNum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.callNum = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.timeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timeout = options.longs === String ? "0" : 0;
            object.isUnderGun = false;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.chip = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.chip = options.longs === String ? "0" : 0;
        }
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            if (typeof message.playerUid === "number")
                object.playerUid = options.longs === String ? String(message.playerUid) : message.playerUid;
            else
                object.playerUid = options.longs === String ? $util.Long.prototype.toString.call(message.playerUid) : options.longs === Number ? new $util.LongBits(message.playerUid.low >>> 0, message.playerUid.high >>> 0).toNumber(true) : message.playerUid;
        if (message.playerIndex != null && message.hasOwnProperty("playerIndex"))
            object.playerIndex = message.playerIndex;
        if (message.allowActions && message.allowActions.length) {
            object.allowActions = [];
            for (var j = 0; j < message.allowActions.length; ++j)
                object.allowActions[j] = options.enums === String ? $root.ENPlayerAction[message.allowActions[j]] : message.allowActions[j];
        }
        if (message.betMin != null && message.hasOwnProperty("betMin"))
            if (typeof message.betMin === "number")
                object.betMin = options.longs === String ? String(message.betMin) : message.betMin;
            else
                object.betMin = options.longs === String ? $util.Long.prototype.toString.call(message.betMin) : options.longs === Number ? new $util.LongBits(message.betMin.low >>> 0, message.betMin.high >>> 0).toNumber(true) : message.betMin;
        if (message.betMax != null && message.hasOwnProperty("betMax"))
            if (typeof message.betMax === "number")
                object.betMax = options.longs === String ? String(message.betMax) : message.betMax;
            else
                object.betMax = options.longs === String ? $util.Long.prototype.toString.call(message.betMax) : options.longs === Number ? new $util.LongBits(message.betMax.low >>> 0, message.betMax.high >>> 0).toNumber(true) : message.betMax;
        if (message.callNum != null && message.hasOwnProperty("callNum"))
            if (typeof message.callNum === "number")
                object.callNum = options.longs === String ? String(message.callNum) : message.callNum;
            else
                object.callNum = options.longs === String ? $util.Long.prototype.toString.call(message.callNum) : options.longs === Number ? new $util.LongBits(message.callNum.low >>> 0, message.callNum.high >>> 0).toNumber(true) : message.callNum;
        if (message.timeout != null && message.hasOwnProperty("timeout"))
            if (typeof message.timeout === "number")
                object.timeout = options.longs === String ? String(message.timeout) : message.timeout;
            else
                object.timeout = options.longs === String ? $util.Long.prototype.toString.call(message.timeout) : options.longs === Number ? new $util.LongBits(message.timeout.low >>> 0, message.timeout.high >>> 0).toNumber(true) : message.timeout;
        if (message.isUnderGun != null && message.hasOwnProperty("isUnderGun"))
            object.isUnderGun = message.isUnderGun;
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (typeof message.chip === "number")
                object.chip = options.longs === String ? String(message.chip) : message.chip;
            else
                object.chip = options.longs === String ? $util.Long.prototype.toString.call(message.chip) : options.longs === Number ? new $util.LongBits(message.chip.low >>> 0, message.chip.high >>> 0).toNumber(true) : message.chip;
        return object;
    };

    /**
     * Converts this CSNotifyDoAction to JSON.
     * @function toJSON
     * @memberof CSNotifyDoAction
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyDoAction.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyDoAction;
})();

$root.CSNotifyGameEnd = (function() {

    /**
     * Properties of a CSNotifyGameEnd.
     * @exports ICSNotifyGameEnd
     * @interface ICSNotifyGameEnd
     */

    /**
     * Constructs a new CSNotifyGameEnd.
     * @exports CSNotifyGameEnd
     * @classdesc Represents a CSNotifyGameEnd.
     * @constructor
     * @param {ICSNotifyGameEnd=} [properties] Properties to set
     */
    function CSNotifyGameEnd(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CSNotifyGameEnd instance using the specified properties.
     * @function create
     * @memberof CSNotifyGameEnd
     * @static
     * @param {ICSNotifyGameEnd=} [properties] Properties to set
     * @returns {CSNotifyGameEnd} CSNotifyGameEnd instance
     */
    CSNotifyGameEnd.create = function create(properties) {
        return new CSNotifyGameEnd(properties);
    };

    /**
     * Encodes the specified CSNotifyGameEnd message. Does not implicitly {@link CSNotifyGameEnd.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyGameEnd
     * @static
     * @param {ICSNotifyGameEnd} message CSNotifyGameEnd message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyGameEnd.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CSNotifyGameEnd message, length delimited. Does not implicitly {@link CSNotifyGameEnd.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyGameEnd
     * @static
     * @param {ICSNotifyGameEnd} message CSNotifyGameEnd message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyGameEnd.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyGameEnd message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyGameEnd
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyGameEnd} CSNotifyGameEnd
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyGameEnd.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyGameEnd();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyGameEnd message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyGameEnd
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyGameEnd} CSNotifyGameEnd
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyGameEnd.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyGameEnd message.
     * @function verify
     * @memberof CSNotifyGameEnd
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyGameEnd.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CSNotifyGameEnd message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyGameEnd
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyGameEnd} CSNotifyGameEnd
     */
    CSNotifyGameEnd.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyGameEnd)
            return object;
        return new $root.CSNotifyGameEnd();
    };

    /**
     * Creates a plain object from a CSNotifyGameEnd message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyGameEnd
     * @static
     * @param {CSNotifyGameEnd} message CSNotifyGameEnd
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyGameEnd.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CSNotifyGameEnd to JSON.
     * @function toJSON
     * @memberof CSNotifyGameEnd
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyGameEnd.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyGameEnd;
})();

$root.CSRequestDoAction = (function() {

    /**
     * Properties of a CSRequestDoAction.
     * @exports ICSRequestDoAction
     * @interface ICSRequestDoAction
     * @property {ENPlayerAction} [actionType] CSRequestDoAction actionType
     * @property {number|Long} [actionNum] CSRequestDoAction actionNum
     */

    /**
     * Constructs a new CSRequestDoAction.
     * @exports CSRequestDoAction
     * @classdesc Represents a CSRequestDoAction.
     * @constructor
     * @param {ICSRequestDoAction=} [properties] Properties to set
     */
    function CSRequestDoAction(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestDoAction actionType.
     * @member {ENPlayerAction}actionType
     * @memberof CSRequestDoAction
     * @instance
     */
    CSRequestDoAction.prototype.actionType = 0;

    /**
     * CSRequestDoAction actionNum.
     * @member {number|Long}actionNum
     * @memberof CSRequestDoAction
     * @instance
     */
    CSRequestDoAction.prototype.actionNum = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSRequestDoAction instance using the specified properties.
     * @function create
     * @memberof CSRequestDoAction
     * @static
     * @param {ICSRequestDoAction=} [properties] Properties to set
     * @returns {CSRequestDoAction} CSRequestDoAction instance
     */
    CSRequestDoAction.create = function create(properties) {
        return new CSRequestDoAction(properties);
    };

    /**
     * Encodes the specified CSRequestDoAction message. Does not implicitly {@link CSRequestDoAction.verify|verify} messages.
     * @function encode
     * @memberof CSRequestDoAction
     * @static
     * @param {ICSRequestDoAction} message CSRequestDoAction message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestDoAction.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.actionType != null && message.hasOwnProperty("actionType"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.actionType);
        if (message.actionNum != null && message.hasOwnProperty("actionNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.actionNum);
        return writer;
    };

    /**
     * Encodes the specified CSRequestDoAction message, length delimited. Does not implicitly {@link CSRequestDoAction.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestDoAction
     * @static
     * @param {ICSRequestDoAction} message CSRequestDoAction message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestDoAction.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestDoAction message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestDoAction
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestDoAction} CSRequestDoAction
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestDoAction.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestDoAction();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.actionType = reader.int32();
                break;
            case 2:
                message.actionNum = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestDoAction message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestDoAction
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestDoAction} CSRequestDoAction
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestDoAction.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestDoAction message.
     * @function verify
     * @memberof CSRequestDoAction
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestDoAction.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.actionType != null && message.hasOwnProperty("actionType"))
            switch (message.actionType) {
            default:
                return "actionType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                break;
            }
        if (message.actionNum != null && message.hasOwnProperty("actionNum"))
            if (!$util.isInteger(message.actionNum) && !(message.actionNum && $util.isInteger(message.actionNum.low) && $util.isInteger(message.actionNum.high)))
                return "actionNum: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSRequestDoAction message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestDoAction
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestDoAction} CSRequestDoAction
     */
    CSRequestDoAction.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestDoAction)
            return object;
        var message = new $root.CSRequestDoAction();
        switch (object.actionType) {
        case "EN_PLAYER_ACTION_BET":
        case 0:
            message.actionType = 0;
            break;
        case "EN_PLAYER_ACTION_CALL":
        case 1:
            message.actionType = 1;
            break;
        case "EN_PLAYER_ACTION_CHECK":
        case 2:
            message.actionType = 2;
            break;
        case "EN_PLAYER_ACTION_FOLD":
        case 3:
            message.actionType = 3;
            break;
        case "EN_PLAYER_ACTION_RAISE":
        case 4:
            message.actionType = 4;
            break;
        case "EN_PLAYER_ACTION_ALL_IN":
        case 5:
            message.actionType = 5;
            break;
        case "EN_PLAYER_ACTION_PRE_BET":
        case 6:
            message.actionType = 6;
            break;
        case "EN_PLAYER_ACTION_NONE":
        case 7:
            message.actionType = 7;
            break;
        }
        if (object.actionNum != null)
            if ($util.Long)
                (message.actionNum = $util.Long.fromValue(object.actionNum)).unsigned = true;
            else if (typeof object.actionNum === "string")
                message.actionNum = parseInt(object.actionNum, 10);
            else if (typeof object.actionNum === "number")
                message.actionNum = object.actionNum;
            else if (typeof object.actionNum === "object")
                message.actionNum = new $util.LongBits(object.actionNum.low >>> 0, object.actionNum.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSRequestDoAction message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestDoAction
     * @static
     * @param {CSRequestDoAction} message CSRequestDoAction
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestDoAction.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.actionType = options.enums === String ? "EN_PLAYER_ACTION_BET" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.actionNum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.actionNum = options.longs === String ? "0" : 0;
        }
        if (message.actionType != null && message.hasOwnProperty("actionType"))
            object.actionType = options.enums === String ? $root.ENPlayerAction[message.actionType] : message.actionType;
        if (message.actionNum != null && message.hasOwnProperty("actionNum"))
            if (typeof message.actionNum === "number")
                object.actionNum = options.longs === String ? String(message.actionNum) : message.actionNum;
            else
                object.actionNum = options.longs === String ? $util.Long.prototype.toString.call(message.actionNum) : options.longs === Number ? new $util.LongBits(message.actionNum.low >>> 0, message.actionNum.high >>> 0).toNumber(true) : message.actionNum;
        return object;
    };

    /**
     * Converts this CSRequestDoAction to JSON.
     * @function toJSON
     * @memberof CSRequestDoAction
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestDoAction.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestDoAction;
})();

$root.CSResponseDoAction = (function() {

    /**
     * Properties of a CSResponseDoAction.
     * @exports ICSResponseDoAction
     * @interface ICSResponseDoAction
     * @property {ENMessageError} [result] CSResponseDoAction result
     */

    /**
     * Constructs a new CSResponseDoAction.
     * @exports CSResponseDoAction
     * @classdesc Represents a CSResponseDoAction.
     * @constructor
     * @param {ICSResponseDoAction=} [properties] Properties to set
     */
    function CSResponseDoAction(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseDoAction result.
     * @member {ENMessageError}result
     * @memberof CSResponseDoAction
     * @instance
     */
    CSResponseDoAction.prototype.result = 0;

    /**
     * Creates a new CSResponseDoAction instance using the specified properties.
     * @function create
     * @memberof CSResponseDoAction
     * @static
     * @param {ICSResponseDoAction=} [properties] Properties to set
     * @returns {CSResponseDoAction} CSResponseDoAction instance
     */
    CSResponseDoAction.create = function create(properties) {
        return new CSResponseDoAction(properties);
    };

    /**
     * Encodes the specified CSResponseDoAction message. Does not implicitly {@link CSResponseDoAction.verify|verify} messages.
     * @function encode
     * @memberof CSResponseDoAction
     * @static
     * @param {ICSResponseDoAction} message CSResponseDoAction message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseDoAction.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified CSResponseDoAction message, length delimited. Does not implicitly {@link CSResponseDoAction.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseDoAction
     * @static
     * @param {ICSResponseDoAction} message CSResponseDoAction message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseDoAction.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseDoAction message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseDoAction
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseDoAction} CSResponseDoAction
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseDoAction.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseDoAction();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseDoAction message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseDoAction
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseDoAction} CSResponseDoAction
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseDoAction.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseDoAction message.
     * @function verify
     * @memberof CSResponseDoAction
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseDoAction.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        return null;
    };

    /**
     * Creates a CSResponseDoAction message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseDoAction
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseDoAction} CSResponseDoAction
     */
    CSResponseDoAction.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseDoAction)
            return object;
        var message = new $root.CSResponseDoAction();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseDoAction message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseDoAction
     * @static
     * @param {CSResponseDoAction} message CSResponseDoAction
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseDoAction.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        return object;
    };

    /**
     * Converts this CSResponseDoAction to JSON.
     * @function toJSON
     * @memberof CSResponseDoAction
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseDoAction.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseDoAction;
})();

$root.CSNotifyActionResult = (function() {

    /**
     * Properties of a CSNotifyActionResult.
     * @exports ICSNotifyActionResult
     * @interface ICSNotifyActionResult
     * @property {number|Long} [playerId] CSNotifyActionResult playerId
     * @property {number} [playerIndex] CSNotifyActionResult playerIndex
     * @property {ENPlayerState} [state] CSNotifyActionResult state
     * @property {ENPlayerAction} [actionType] CSNotifyActionResult actionType
     * @property {number|Long} [actionNum] CSNotifyActionResult actionNum
     * @property {number|Long} [chips] CSNotifyActionResult chips
     * @property {number|Long} [betChips] CSNotifyActionResult betChips
     */

    /**
     * Constructs a new CSNotifyActionResult.
     * @exports CSNotifyActionResult
     * @classdesc Represents a CSNotifyActionResult.
     * @constructor
     * @param {ICSNotifyActionResult=} [properties] Properties to set
     */
    function CSNotifyActionResult(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyActionResult playerId.
     * @member {number|Long}playerId
     * @memberof CSNotifyActionResult
     * @instance
     */
    CSNotifyActionResult.prototype.playerId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyActionResult playerIndex.
     * @member {number}playerIndex
     * @memberof CSNotifyActionResult
     * @instance
     */
    CSNotifyActionResult.prototype.playerIndex = 0;

    /**
     * CSNotifyActionResult state.
     * @member {ENPlayerState}state
     * @memberof CSNotifyActionResult
     * @instance
     */
    CSNotifyActionResult.prototype.state = 0;

    /**
     * CSNotifyActionResult actionType.
     * @member {ENPlayerAction}actionType
     * @memberof CSNotifyActionResult
     * @instance
     */
    CSNotifyActionResult.prototype.actionType = 0;

    /**
     * CSNotifyActionResult actionNum.
     * @member {number|Long}actionNum
     * @memberof CSNotifyActionResult
     * @instance
     */
    CSNotifyActionResult.prototype.actionNum = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyActionResult chips.
     * @member {number|Long}chips
     * @memberof CSNotifyActionResult
     * @instance
     */
    CSNotifyActionResult.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyActionResult betChips.
     * @member {number|Long}betChips
     * @memberof CSNotifyActionResult
     * @instance
     */
    CSNotifyActionResult.prototype.betChips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSNotifyActionResult instance using the specified properties.
     * @function create
     * @memberof CSNotifyActionResult
     * @static
     * @param {ICSNotifyActionResult=} [properties] Properties to set
     * @returns {CSNotifyActionResult} CSNotifyActionResult instance
     */
    CSNotifyActionResult.create = function create(properties) {
        return new CSNotifyActionResult(properties);
    };

    /**
     * Encodes the specified CSNotifyActionResult message. Does not implicitly {@link CSNotifyActionResult.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyActionResult
     * @static
     * @param {ICSNotifyActionResult} message CSNotifyActionResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyActionResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.playerId != null && message.hasOwnProperty("playerId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.playerId);
        if (message.playerIndex != null && message.hasOwnProperty("playerIndex"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.playerIndex);
        if (message.actionType != null && message.hasOwnProperty("actionType"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.actionType);
        if (message.actionNum != null && message.hasOwnProperty("actionNum"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.actionNum);
        if (message.chips != null && message.hasOwnProperty("chips"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.chips);
        if (message.betChips != null && message.hasOwnProperty("betChips"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.betChips);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.state);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyActionResult message, length delimited. Does not implicitly {@link CSNotifyActionResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyActionResult
     * @static
     * @param {ICSNotifyActionResult} message CSNotifyActionResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyActionResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyActionResult message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyActionResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyActionResult} CSNotifyActionResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyActionResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyActionResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.playerId = reader.uint64();
                break;
            case 2:
                message.playerIndex = reader.uint32();
                break;
            case 7:
                message.state = reader.int32();
                break;
            case 3:
                message.actionType = reader.int32();
                break;
            case 4:
                message.actionNum = reader.uint64();
                break;
            case 5:
                message.chips = reader.uint64();
                break;
            case 6:
                message.betChips = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyActionResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyActionResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyActionResult} CSNotifyActionResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyActionResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyActionResult message.
     * @function verify
     * @memberof CSNotifyActionResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyActionResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.playerId != null && message.hasOwnProperty("playerId"))
            if (!$util.isInteger(message.playerId) && !(message.playerId && $util.isInteger(message.playerId.low) && $util.isInteger(message.playerId.high)))
                return "playerId: integer|Long expected";
        if (message.playerIndex != null && message.hasOwnProperty("playerIndex"))
            if (!$util.isInteger(message.playerIndex))
                return "playerIndex: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.actionType != null && message.hasOwnProperty("actionType"))
            switch (message.actionType) {
            default:
                return "actionType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                break;
            }
        if (message.actionNum != null && message.hasOwnProperty("actionNum"))
            if (!$util.isInteger(message.actionNum) && !(message.actionNum && $util.isInteger(message.actionNum.low) && $util.isInteger(message.actionNum.high)))
                return "actionNum: integer|Long expected";
        if (message.chips != null && message.hasOwnProperty("chips"))
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
        if (message.betChips != null && message.hasOwnProperty("betChips"))
            if (!$util.isInteger(message.betChips) && !(message.betChips && $util.isInteger(message.betChips.low) && $util.isInteger(message.betChips.high)))
                return "betChips: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSNotifyActionResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyActionResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyActionResult} CSNotifyActionResult
     */
    CSNotifyActionResult.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyActionResult)
            return object;
        var message = new $root.CSNotifyActionResult();
        if (object.playerId != null)
            if ($util.Long)
                (message.playerId = $util.Long.fromValue(object.playerId)).unsigned = true;
            else if (typeof object.playerId === "string")
                message.playerId = parseInt(object.playerId, 10);
            else if (typeof object.playerId === "number")
                message.playerId = object.playerId;
            else if (typeof object.playerId === "object")
                message.playerId = new $util.LongBits(object.playerId.low >>> 0, object.playerId.high >>> 0).toNumber(true);
        if (object.playerIndex != null)
            message.playerIndex = object.playerIndex >>> 0;
        switch (object.state) {
        case "EN_PLAYER_STATE_NO_PLAYER":
        case 0:
            message.state = 0;
            break;
        case "EN_PLAYER_STATE_PRE_SITDOWN":
        case 1:
            message.state = 1;
            break;
        case "EN_PLAYER_STATE_WAIT_FOR_NEXT_ONE_GAME":
        case 2:
            message.state = 2;
            break;
        case "EN_PLAYER_STATE_PLAYING":
        case 3:
            message.state = 3;
            break;
        case "EN_PLAYER_STATE_ALL_IN":
        case 4:
            message.state = 4;
            break;
        case "EN_PLAYER_STATE_FOLD":
        case 5:
            message.state = 5;
            break;
        }
        switch (object.actionType) {
        case "EN_PLAYER_ACTION_BET":
        case 0:
            message.actionType = 0;
            break;
        case "EN_PLAYER_ACTION_CALL":
        case 1:
            message.actionType = 1;
            break;
        case "EN_PLAYER_ACTION_CHECK":
        case 2:
            message.actionType = 2;
            break;
        case "EN_PLAYER_ACTION_FOLD":
        case 3:
            message.actionType = 3;
            break;
        case "EN_PLAYER_ACTION_RAISE":
        case 4:
            message.actionType = 4;
            break;
        case "EN_PLAYER_ACTION_ALL_IN":
        case 5:
            message.actionType = 5;
            break;
        case "EN_PLAYER_ACTION_PRE_BET":
        case 6:
            message.actionType = 6;
            break;
        case "EN_PLAYER_ACTION_NONE":
        case 7:
            message.actionType = 7;
            break;
        }
        if (object.actionNum != null)
            if ($util.Long)
                (message.actionNum = $util.Long.fromValue(object.actionNum)).unsigned = true;
            else if (typeof object.actionNum === "string")
                message.actionNum = parseInt(object.actionNum, 10);
            else if (typeof object.actionNum === "number")
                message.actionNum = object.actionNum;
            else if (typeof object.actionNum === "object")
                message.actionNum = new $util.LongBits(object.actionNum.low >>> 0, object.actionNum.high >>> 0).toNumber(true);
        if (object.chips != null)
            if ($util.Long)
                (message.chips = $util.Long.fromValue(object.chips)).unsigned = true;
            else if (typeof object.chips === "string")
                message.chips = parseInt(object.chips, 10);
            else if (typeof object.chips === "number")
                message.chips = object.chips;
            else if (typeof object.chips === "object")
                message.chips = new $util.LongBits(object.chips.low >>> 0, object.chips.high >>> 0).toNumber(true);
        if (object.betChips != null)
            if ($util.Long)
                (message.betChips = $util.Long.fromValue(object.betChips)).unsigned = true;
            else if (typeof object.betChips === "string")
                message.betChips = parseInt(object.betChips, 10);
            else if (typeof object.betChips === "number")
                message.betChips = object.betChips;
            else if (typeof object.betChips === "object")
                message.betChips = new $util.LongBits(object.betChips.low >>> 0, object.betChips.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyActionResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyActionResult
     * @static
     * @param {CSNotifyActionResult} message CSNotifyActionResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyActionResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.playerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.playerId = options.longs === String ? "0" : 0;
            object.playerIndex = 0;
            object.actionType = options.enums === String ? "EN_PLAYER_ACTION_BET" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.actionNum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.actionNum = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.chips = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.chips = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.betChips = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.betChips = options.longs === String ? "0" : 0;
            object.state = options.enums === String ? "EN_PLAYER_STATE_NO_PLAYER" : 0;
        }
        if (message.playerId != null && message.hasOwnProperty("playerId"))
            if (typeof message.playerId === "number")
                object.playerId = options.longs === String ? String(message.playerId) : message.playerId;
            else
                object.playerId = options.longs === String ? $util.Long.prototype.toString.call(message.playerId) : options.longs === Number ? new $util.LongBits(message.playerId.low >>> 0, message.playerId.high >>> 0).toNumber(true) : message.playerId;
        if (message.playerIndex != null && message.hasOwnProperty("playerIndex"))
            object.playerIndex = message.playerIndex;
        if (message.actionType != null && message.hasOwnProperty("actionType"))
            object.actionType = options.enums === String ? $root.ENPlayerAction[message.actionType] : message.actionType;
        if (message.actionNum != null && message.hasOwnProperty("actionNum"))
            if (typeof message.actionNum === "number")
                object.actionNum = options.longs === String ? String(message.actionNum) : message.actionNum;
            else
                object.actionNum = options.longs === String ? $util.Long.prototype.toString.call(message.actionNum) : options.longs === Number ? new $util.LongBits(message.actionNum.low >>> 0, message.actionNum.high >>> 0).toNumber(true) : message.actionNum;
        if (message.chips != null && message.hasOwnProperty("chips"))
            if (typeof message.chips === "number")
                object.chips = options.longs === String ? String(message.chips) : message.chips;
            else
                object.chips = options.longs === String ? $util.Long.prototype.toString.call(message.chips) : options.longs === Number ? new $util.LongBits(message.chips.low >>> 0, message.chips.high >>> 0).toNumber(true) : message.chips;
        if (message.betChips != null && message.hasOwnProperty("betChips"))
            if (typeof message.betChips === "number")
                object.betChips = options.longs === String ? String(message.betChips) : message.betChips;
            else
                object.betChips = options.longs === String ? $util.Long.prototype.toString.call(message.betChips) : options.longs === Number ? new $util.LongBits(message.betChips.low >>> 0, message.betChips.high >>> 0).toNumber(true) : message.betChips;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.ENPlayerState[message.state] : message.state;
        return object;
    };

    /**
     * Converts this CSNotifyActionResult to JSON.
     * @function toJSON
     * @memberof CSNotifyActionResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyActionResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyActionResult;
})();

$root.CSNotifyGameResult = (function() {

    /**
     * Properties of a CSNotifyGameResult.
     * @exports ICSNotifyGameResult
     * @interface ICSNotifyGameResult
     * @property {Array.<ICSTablePlayerResult>} [playerResults] CSNotifyGameResult playerResults
     * @property {Array.<ICSTablePotResult>} [potResults] CSNotifyGameResult potResults
     */

    /**
     * Constructs a new CSNotifyGameResult.
     * @exports CSNotifyGameResult
     * @classdesc Represents a CSNotifyGameResult.
     * @constructor
     * @param {ICSNotifyGameResult=} [properties] Properties to set
     */
    function CSNotifyGameResult(properties) {
        this.playerResults = [];
        this.potResults = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyGameResult playerResults.
     * @member {Array.<ICSTablePlayerResult>}playerResults
     * @memberof CSNotifyGameResult
     * @instance
     */
    CSNotifyGameResult.prototype.playerResults = $util.emptyArray;

    /**
     * CSNotifyGameResult potResults.
     * @member {Array.<ICSTablePotResult>}potResults
     * @memberof CSNotifyGameResult
     * @instance
     */
    CSNotifyGameResult.prototype.potResults = $util.emptyArray;

    /**
     * Creates a new CSNotifyGameResult instance using the specified properties.
     * @function create
     * @memberof CSNotifyGameResult
     * @static
     * @param {ICSNotifyGameResult=} [properties] Properties to set
     * @returns {CSNotifyGameResult} CSNotifyGameResult instance
     */
    CSNotifyGameResult.create = function create(properties) {
        return new CSNotifyGameResult(properties);
    };

    /**
     * Encodes the specified CSNotifyGameResult message. Does not implicitly {@link CSNotifyGameResult.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyGameResult
     * @static
     * @param {ICSNotifyGameResult} message CSNotifyGameResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyGameResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.playerResults != null && message.playerResults.length)
            for (var i = 0; i < message.playerResults.length; ++i)
                $root.CSTablePlayerResult.encode(message.playerResults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.potResults != null && message.potResults.length)
            for (var i = 0; i < message.potResults.length; ++i)
                $root.CSTablePotResult.encode(message.potResults[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSNotifyGameResult message, length delimited. Does not implicitly {@link CSNotifyGameResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyGameResult
     * @static
     * @param {ICSNotifyGameResult} message CSNotifyGameResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyGameResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyGameResult message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyGameResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyGameResult} CSNotifyGameResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyGameResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyGameResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.playerResults && message.playerResults.length))
                    message.playerResults = [];
                message.playerResults.push($root.CSTablePlayerResult.decode(reader, reader.uint32()));
                break;
            case 2:
                if (!(message.potResults && message.potResults.length))
                    message.potResults = [];
                message.potResults.push($root.CSTablePotResult.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyGameResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyGameResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyGameResult} CSNotifyGameResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyGameResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyGameResult message.
     * @function verify
     * @memberof CSNotifyGameResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyGameResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.playerResults != null && message.hasOwnProperty("playerResults")) {
            if (!Array.isArray(message.playerResults))
                return "playerResults: array expected";
            for (var i = 0; i < message.playerResults.length; ++i) {
                var error = $root.CSTablePlayerResult.verify(message.playerResults[i]);
                if (error)
                    return "playerResults." + error;
            }
        }
        if (message.potResults != null && message.hasOwnProperty("potResults")) {
            if (!Array.isArray(message.potResults))
                return "potResults: array expected";
            for (var i = 0; i < message.potResults.length; ++i) {
                error = $root.CSTablePotResult.verify(message.potResults[i]);
                if (error)
                    return "potResults." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSNotifyGameResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyGameResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyGameResult} CSNotifyGameResult
     */
    CSNotifyGameResult.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyGameResult)
            return object;
        var message = new $root.CSNotifyGameResult();
        if (object.playerResults) {
            if (!Array.isArray(object.playerResults))
                throw TypeError(".CSNotifyGameResult.playerResults: array expected");
            message.playerResults = [];
            for (var i = 0; i < object.playerResults.length; ++i) {
                if (typeof object.playerResults[i] !== "object")
                    throw TypeError(".CSNotifyGameResult.playerResults: object expected");
                message.playerResults[i] = $root.CSTablePlayerResult.fromObject(object.playerResults[i]);
            }
        }
        if (object.potResults) {
            if (!Array.isArray(object.potResults))
                throw TypeError(".CSNotifyGameResult.potResults: array expected");
            message.potResults = [];
            for (var i = 0; i < object.potResults.length; ++i) {
                if (typeof object.potResults[i] !== "object")
                    throw TypeError(".CSNotifyGameResult.potResults: object expected");
                message.potResults[i] = $root.CSTablePotResult.fromObject(object.potResults[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyGameResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyGameResult
     * @static
     * @param {CSNotifyGameResult} message CSNotifyGameResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyGameResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.playerResults = [];
            object.potResults = [];
        }
        if (message.playerResults && message.playerResults.length) {
            object.playerResults = [];
            for (var j = 0; j < message.playerResults.length; ++j)
                object.playerResults[j] = $root.CSTablePlayerResult.toObject(message.playerResults[j], options);
        }
        if (message.potResults && message.potResults.length) {
            object.potResults = [];
            for (var j = 0; j < message.potResults.length; ++j)
                object.potResults[j] = $root.CSTablePotResult.toObject(message.potResults[j], options);
        }
        return object;
    };

    /**
     * Converts this CSNotifyGameResult to JSON.
     * @function toJSON
     * @memberof CSNotifyGameResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyGameResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyGameResult;
})();

$root.CSNotifyTableClose = (function() {

    /**
     * Properties of a CSNotifyTableClose.
     * @exports ICSNotifyTableClose
     * @interface ICSNotifyTableClose
     * @property {Array.<ICSTableStat>} [tableStats] CSNotifyTableClose tableStats
     * @property {Array.<number|Long>} [rankUids] CSNotifyTableClose rankUids
     * @property {Array.<IPBReward>} [sngRewards] CSNotifyTableClose sngRewards
     */

    /**
     * Constructs a new CSNotifyTableClose.
     * @exports CSNotifyTableClose
     * @classdesc Represents a CSNotifyTableClose.
     * @constructor
     * @param {ICSNotifyTableClose=} [properties] Properties to set
     */
    function CSNotifyTableClose(properties) {
        this.tableStats = [];
        this.rankUids = [];
        this.sngRewards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyTableClose tableStats.
     * @member {Array.<ICSTableStat>}tableStats
     * @memberof CSNotifyTableClose
     * @instance
     */
    CSNotifyTableClose.prototype.tableStats = $util.emptyArray;

    /**
     * CSNotifyTableClose rankUids.
     * @member {Array.<number|Long>}rankUids
     * @memberof CSNotifyTableClose
     * @instance
     */
    CSNotifyTableClose.prototype.rankUids = $util.emptyArray;

    /**
     * CSNotifyTableClose sngRewards.
     * @member {Array.<IPBReward>}sngRewards
     * @memberof CSNotifyTableClose
     * @instance
     */
    CSNotifyTableClose.prototype.sngRewards = $util.emptyArray;

    /**
     * Creates a new CSNotifyTableClose instance using the specified properties.
     * @function create
     * @memberof CSNotifyTableClose
     * @static
     * @param {ICSNotifyTableClose=} [properties] Properties to set
     * @returns {CSNotifyTableClose} CSNotifyTableClose instance
     */
    CSNotifyTableClose.create = function create(properties) {
        return new CSNotifyTableClose(properties);
    };

    /**
     * Encodes the specified CSNotifyTableClose message. Does not implicitly {@link CSNotifyTableClose.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyTableClose
     * @static
     * @param {ICSNotifyTableClose} message CSNotifyTableClose message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyTableClose.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tableStats != null && message.tableStats.length)
            for (var i = 0; i < message.tableStats.length; ++i)
                $root.CSTableStat.encode(message.tableStats[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.rankUids != null && message.rankUids.length)
            for (var i = 0; i < message.rankUids.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.rankUids[i]);
        if (message.sngRewards != null && message.sngRewards.length)
            for (var i = 0; i < message.sngRewards.length; ++i)
                $root.PBReward.encode(message.sngRewards[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSNotifyTableClose message, length delimited. Does not implicitly {@link CSNotifyTableClose.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyTableClose
     * @static
     * @param {ICSNotifyTableClose} message CSNotifyTableClose message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyTableClose.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyTableClose message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyTableClose
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyTableClose} CSNotifyTableClose
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyTableClose.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyTableClose();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.tableStats && message.tableStats.length))
                    message.tableStats = [];
                message.tableStats.push($root.CSTableStat.decode(reader, reader.uint32()));
                break;
            case 2:
                if (!(message.rankUids && message.rankUids.length))
                    message.rankUids = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.rankUids.push(reader.uint64());
                } else
                    message.rankUids.push(reader.uint64());
                break;
            case 3:
                if (!(message.sngRewards && message.sngRewards.length))
                    message.sngRewards = [];
                message.sngRewards.push($root.PBReward.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyTableClose message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyTableClose
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyTableClose} CSNotifyTableClose
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyTableClose.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyTableClose message.
     * @function verify
     * @memberof CSNotifyTableClose
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyTableClose.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tableStats != null && message.hasOwnProperty("tableStats")) {
            if (!Array.isArray(message.tableStats))
                return "tableStats: array expected";
            for (var i = 0; i < message.tableStats.length; ++i) {
                var error = $root.CSTableStat.verify(message.tableStats[i]);
                if (error)
                    return "tableStats." + error;
            }
        }
        if (message.rankUids != null && message.hasOwnProperty("rankUids")) {
            if (!Array.isArray(message.rankUids))
                return "rankUids: array expected";
            for (var i = 0; i < message.rankUids.length; ++i)
                if (!$util.isInteger(message.rankUids[i]) && !(message.rankUids[i] && $util.isInteger(message.rankUids[i].low) && $util.isInteger(message.rankUids[i].high)))
                    return "rankUids: integer|Long[] expected";
        }
        if (message.sngRewards != null && message.hasOwnProperty("sngRewards")) {
            if (!Array.isArray(message.sngRewards))
                return "sngRewards: array expected";
            for (var i = 0; i < message.sngRewards.length; ++i) {
                error = $root.PBReward.verify(message.sngRewards[i]);
                if (error)
                    return "sngRewards." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSNotifyTableClose message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyTableClose
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyTableClose} CSNotifyTableClose
     */
    CSNotifyTableClose.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyTableClose)
            return object;
        var message = new $root.CSNotifyTableClose();
        if (object.tableStats) {
            if (!Array.isArray(object.tableStats))
                throw TypeError(".CSNotifyTableClose.tableStats: array expected");
            message.tableStats = [];
            for (var i = 0; i < object.tableStats.length; ++i) {
                if (typeof object.tableStats[i] !== "object")
                    throw TypeError(".CSNotifyTableClose.tableStats: object expected");
                message.tableStats[i] = $root.CSTableStat.fromObject(object.tableStats[i]);
            }
        }
        if (object.rankUids) {
            if (!Array.isArray(object.rankUids))
                throw TypeError(".CSNotifyTableClose.rankUids: array expected");
            message.rankUids = [];
            for (var i = 0; i < object.rankUids.length; ++i)
                if ($util.Long)
                    (message.rankUids[i] = $util.Long.fromValue(object.rankUids[i])).unsigned = true;
                else if (typeof object.rankUids[i] === "string")
                    message.rankUids[i] = parseInt(object.rankUids[i], 10);
                else if (typeof object.rankUids[i] === "number")
                    message.rankUids[i] = object.rankUids[i];
                else if (typeof object.rankUids[i] === "object")
                    message.rankUids[i] = new $util.LongBits(object.rankUids[i].low >>> 0, object.rankUids[i].high >>> 0).toNumber(true);
        }
        if (object.sngRewards) {
            if (!Array.isArray(object.sngRewards))
                throw TypeError(".CSNotifyTableClose.sngRewards: array expected");
            message.sngRewards = [];
            for (var i = 0; i < object.sngRewards.length; ++i) {
                if (typeof object.sngRewards[i] !== "object")
                    throw TypeError(".CSNotifyTableClose.sngRewards: object expected");
                message.sngRewards[i] = $root.PBReward.fromObject(object.sngRewards[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyTableClose message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyTableClose
     * @static
     * @param {CSNotifyTableClose} message CSNotifyTableClose
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyTableClose.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.tableStats = [];
            object.rankUids = [];
            object.sngRewards = [];
        }
        if (message.tableStats && message.tableStats.length) {
            object.tableStats = [];
            for (var j = 0; j < message.tableStats.length; ++j)
                object.tableStats[j] = $root.CSTableStat.toObject(message.tableStats[j], options);
        }
        if (message.rankUids && message.rankUids.length) {
            object.rankUids = [];
            for (var j = 0; j < message.rankUids.length; ++j)
                if (typeof message.rankUids[j] === "number")
                    object.rankUids[j] = options.longs === String ? String(message.rankUids[j]) : message.rankUids[j];
                else
                    object.rankUids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.rankUids[j]) : options.longs === Number ? new $util.LongBits(message.rankUids[j].low >>> 0, message.rankUids[j].high >>> 0).toNumber(true) : message.rankUids[j];
        }
        if (message.sngRewards && message.sngRewards.length) {
            object.sngRewards = [];
            for (var j = 0; j < message.sngRewards.length; ++j)
                object.sngRewards[j] = $root.PBReward.toObject(message.sngRewards[j], options);
        }
        return object;
    };

    /**
     * Converts this CSNotifyTableClose to JSON.
     * @function toJSON
     * @memberof CSNotifyTableClose
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyTableClose.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyTableClose;
})();

$root.CSRequestStartGame = (function() {

    /**
     * Properties of a CSRequestStartGame.
     * @exports ICSRequestStartGame
     * @interface ICSRequestStartGame
     */

    /**
     * Constructs a new CSRequestStartGame.
     * @exports CSRequestStartGame
     * @classdesc Represents a CSRequestStartGame.
     * @constructor
     * @param {ICSRequestStartGame=} [properties] Properties to set
     */
    function CSRequestStartGame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CSRequestStartGame instance using the specified properties.
     * @function create
     * @memberof CSRequestStartGame
     * @static
     * @param {ICSRequestStartGame=} [properties] Properties to set
     * @returns {CSRequestStartGame} CSRequestStartGame instance
     */
    CSRequestStartGame.create = function create(properties) {
        return new CSRequestStartGame(properties);
    };

    /**
     * Encodes the specified CSRequestStartGame message. Does not implicitly {@link CSRequestStartGame.verify|verify} messages.
     * @function encode
     * @memberof CSRequestStartGame
     * @static
     * @param {ICSRequestStartGame} message CSRequestStartGame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestStartGame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CSRequestStartGame message, length delimited. Does not implicitly {@link CSRequestStartGame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestStartGame
     * @static
     * @param {ICSRequestStartGame} message CSRequestStartGame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestStartGame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestStartGame message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestStartGame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestStartGame} CSRequestStartGame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestStartGame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestStartGame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestStartGame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestStartGame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestStartGame} CSRequestStartGame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestStartGame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestStartGame message.
     * @function verify
     * @memberof CSRequestStartGame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestStartGame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CSRequestStartGame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestStartGame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestStartGame} CSRequestStartGame
     */
    CSRequestStartGame.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestStartGame)
            return object;
        return new $root.CSRequestStartGame();
    };

    /**
     * Creates a plain object from a CSRequestStartGame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestStartGame
     * @static
     * @param {CSRequestStartGame} message CSRequestStartGame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestStartGame.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CSRequestStartGame to JSON.
     * @function toJSON
     * @memberof CSRequestStartGame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestStartGame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestStartGame;
})();

$root.CSNotifyStartGame = (function() {

    /**
     * Properties of a CSNotifyStartGame.
     * @exports ICSNotifyStartGame
     * @interface ICSNotifyStartGame
     */

    /**
     * Constructs a new CSNotifyStartGame.
     * @exports CSNotifyStartGame
     * @classdesc Represents a CSNotifyStartGame.
     * @constructor
     * @param {ICSNotifyStartGame=} [properties] Properties to set
     */
    function CSNotifyStartGame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CSNotifyStartGame instance using the specified properties.
     * @function create
     * @memberof CSNotifyStartGame
     * @static
     * @param {ICSNotifyStartGame=} [properties] Properties to set
     * @returns {CSNotifyStartGame} CSNotifyStartGame instance
     */
    CSNotifyStartGame.create = function create(properties) {
        return new CSNotifyStartGame(properties);
    };

    /**
     * Encodes the specified CSNotifyStartGame message. Does not implicitly {@link CSNotifyStartGame.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyStartGame
     * @static
     * @param {ICSNotifyStartGame} message CSNotifyStartGame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyStartGame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CSNotifyStartGame message, length delimited. Does not implicitly {@link CSNotifyStartGame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyStartGame
     * @static
     * @param {ICSNotifyStartGame} message CSNotifyStartGame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyStartGame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyStartGame message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyStartGame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyStartGame} CSNotifyStartGame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyStartGame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyStartGame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyStartGame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyStartGame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyStartGame} CSNotifyStartGame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyStartGame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyStartGame message.
     * @function verify
     * @memberof CSNotifyStartGame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyStartGame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CSNotifyStartGame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyStartGame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyStartGame} CSNotifyStartGame
     */
    CSNotifyStartGame.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyStartGame)
            return object;
        return new $root.CSNotifyStartGame();
    };

    /**
     * Creates a plain object from a CSNotifyStartGame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyStartGame
     * @static
     * @param {CSNotifyStartGame} message CSNotifyStartGame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyStartGame.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CSNotifyStartGame to JSON.
     * @function toJSON
     * @memberof CSNotifyStartGame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyStartGame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyStartGame;
})();

$root.CSRequestChat = (function() {

    /**
     * Properties of a CSRequestChat.
     * @exports ICSRequestChat
     * @interface ICSRequestChat
     * @property {string} [content] CSRequestChat content
     * @property {ENChatType} [type] CSRequestChat type
     */

    /**
     * Constructs a new CSRequestChat.
     * @exports CSRequestChat
     * @classdesc Represents a CSRequestChat.
     * @constructor
     * @param {ICSRequestChat=} [properties] Properties to set
     */
    function CSRequestChat(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestChat content.
     * @member {string}content
     * @memberof CSRequestChat
     * @instance
     */
    CSRequestChat.prototype.content = "";

    /**
     * CSRequestChat type.
     * @member {ENChatType}type
     * @memberof CSRequestChat
     * @instance
     */
    CSRequestChat.prototype.type = 1;

    /**
     * Creates a new CSRequestChat instance using the specified properties.
     * @function create
     * @memberof CSRequestChat
     * @static
     * @param {ICSRequestChat=} [properties] Properties to set
     * @returns {CSRequestChat} CSRequestChat instance
     */
    CSRequestChat.create = function create(properties) {
        return new CSRequestChat(properties);
    };

    /**
     * Encodes the specified CSRequestChat message. Does not implicitly {@link CSRequestChat.verify|verify} messages.
     * @function encode
     * @memberof CSRequestChat
     * @static
     * @param {ICSRequestChat} message CSRequestChat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestChat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.content != null && message.hasOwnProperty("content"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        return writer;
    };

    /**
     * Encodes the specified CSRequestChat message, length delimited. Does not implicitly {@link CSRequestChat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestChat
     * @static
     * @param {ICSRequestChat} message CSRequestChat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestChat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestChat message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestChat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestChat} CSRequestChat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestChat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestChat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.content = reader.string();
                break;
            case 2:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestChat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestChat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestChat} CSRequestChat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestChat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestChat message.
     * @function verify
     * @memberof CSRequestChat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestChat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.content != null && message.hasOwnProperty("content"))
            if (!$util.isString(message.content))
                return "content: string expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
            case 2:
            case 3:
                break;
            }
        return null;
    };

    /**
     * Creates a CSRequestChat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestChat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestChat} CSRequestChat
     */
    CSRequestChat.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestChat)
            return object;
        var message = new $root.CSRequestChat();
        if (object.content != null)
            message.content = String(object.content);
        switch (object.type) {
        case "EN_CHAT_TEXT":
        case 1:
            message.type = 1;
            break;
        case "EN_CHAT_VOICE":
        case 2:
            message.type = 2;
            break;
        case "EN_CHAT_EMOJI":
        case 3:
            message.type = 3;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSRequestChat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestChat
     * @static
     * @param {CSRequestChat} message CSRequestChat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestChat.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.content = "";
            object.type = options.enums === String ? "EN_CHAT_TEXT" : 1;
        }
        if (message.content != null && message.hasOwnProperty("content"))
            object.content = message.content;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ENChatType[message.type] : message.type;
        return object;
    };

    /**
     * Converts this CSRequestChat to JSON.
     * @function toJSON
     * @memberof CSRequestChat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestChat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestChat;
})();

$root.CSResponseChat = (function() {

    /**
     * Properties of a CSResponseChat.
     * @exports ICSResponseChat
     * @interface ICSResponseChat
     * @property {ENMessageError} [result] CSResponseChat result
     */

    /**
     * Constructs a new CSResponseChat.
     * @exports CSResponseChat
     * @classdesc Represents a CSResponseChat.
     * @constructor
     * @param {ICSResponseChat=} [properties] Properties to set
     */
    function CSResponseChat(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseChat result.
     * @member {ENMessageError}result
     * @memberof CSResponseChat
     * @instance
     */
    CSResponseChat.prototype.result = 0;

    /**
     * Creates a new CSResponseChat instance using the specified properties.
     * @function create
     * @memberof CSResponseChat
     * @static
     * @param {ICSResponseChat=} [properties] Properties to set
     * @returns {CSResponseChat} CSResponseChat instance
     */
    CSResponseChat.create = function create(properties) {
        return new CSResponseChat(properties);
    };

    /**
     * Encodes the specified CSResponseChat message. Does not implicitly {@link CSResponseChat.verify|verify} messages.
     * @function encode
     * @memberof CSResponseChat
     * @static
     * @param {ICSResponseChat} message CSResponseChat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseChat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified CSResponseChat message, length delimited. Does not implicitly {@link CSResponseChat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseChat
     * @static
     * @param {ICSResponseChat} message CSResponseChat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseChat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseChat message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseChat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseChat} CSResponseChat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseChat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseChat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseChat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseChat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseChat} CSResponseChat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseChat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseChat message.
     * @function verify
     * @memberof CSResponseChat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseChat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        return null;
    };

    /**
     * Creates a CSResponseChat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseChat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseChat} CSResponseChat
     */
    CSResponseChat.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseChat)
            return object;
        var message = new $root.CSResponseChat();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseChat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseChat
     * @static
     * @param {CSResponseChat} message CSResponseChat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseChat.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        return object;
    };

    /**
     * Converts this CSResponseChat to JSON.
     * @function toJSON
     * @memberof CSResponseChat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseChat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseChat;
})();

$root.CSNotifyChat = (function() {

    /**
     * Properties of a CSNotifyChat.
     * @exports ICSNotifyChat
     * @interface ICSNotifyChat
     * @property {number} [fromIndex] CSNotifyChat fromIndex
     * @property {string} [content] CSNotifyChat content
     * @property {ENChatType} [type] CSNotifyChat type
     */

    /**
     * Constructs a new CSNotifyChat.
     * @exports CSNotifyChat
     * @classdesc Represents a CSNotifyChat.
     * @constructor
     * @param {ICSNotifyChat=} [properties] Properties to set
     */
    function CSNotifyChat(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyChat fromIndex.
     * @member {number}fromIndex
     * @memberof CSNotifyChat
     * @instance
     */
    CSNotifyChat.prototype.fromIndex = 0;

    /**
     * CSNotifyChat content.
     * @member {string}content
     * @memberof CSNotifyChat
     * @instance
     */
    CSNotifyChat.prototype.content = "";

    /**
     * CSNotifyChat type.
     * @member {ENChatType}type
     * @memberof CSNotifyChat
     * @instance
     */
    CSNotifyChat.prototype.type = 1;

    /**
     * Creates a new CSNotifyChat instance using the specified properties.
     * @function create
     * @memberof CSNotifyChat
     * @static
     * @param {ICSNotifyChat=} [properties] Properties to set
     * @returns {CSNotifyChat} CSNotifyChat instance
     */
    CSNotifyChat.create = function create(properties) {
        return new CSNotifyChat(properties);
    };

    /**
     * Encodes the specified CSNotifyChat message. Does not implicitly {@link CSNotifyChat.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyChat
     * @static
     * @param {ICSNotifyChat} message CSNotifyChat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyChat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.fromIndex != null && message.hasOwnProperty("fromIndex"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fromIndex);
        if (message.content != null && message.hasOwnProperty("content"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyChat message, length delimited. Does not implicitly {@link CSNotifyChat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyChat
     * @static
     * @param {ICSNotifyChat} message CSNotifyChat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyChat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyChat message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyChat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyChat} CSNotifyChat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyChat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyChat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.fromIndex = reader.uint32();
                break;
            case 2:
                message.content = reader.string();
                break;
            case 3:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyChat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyChat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyChat} CSNotifyChat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyChat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyChat message.
     * @function verify
     * @memberof CSNotifyChat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyChat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.fromIndex != null && message.hasOwnProperty("fromIndex"))
            if (!$util.isInteger(message.fromIndex))
                return "fromIndex: integer expected";
        if (message.content != null && message.hasOwnProperty("content"))
            if (!$util.isString(message.content))
                return "content: string expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
            case 2:
            case 3:
                break;
            }
        return null;
    };

    /**
     * Creates a CSNotifyChat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyChat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyChat} CSNotifyChat
     */
    CSNotifyChat.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyChat)
            return object;
        var message = new $root.CSNotifyChat();
        if (object.fromIndex != null)
            message.fromIndex = object.fromIndex >>> 0;
        if (object.content != null)
            message.content = String(object.content);
        switch (object.type) {
        case "EN_CHAT_TEXT":
        case 1:
            message.type = 1;
            break;
        case "EN_CHAT_VOICE":
        case 2:
            message.type = 2;
            break;
        case "EN_CHAT_EMOJI":
        case 3:
            message.type = 3;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyChat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyChat
     * @static
     * @param {CSNotifyChat} message CSNotifyChat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyChat.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.fromIndex = 0;
            object.content = "";
            object.type = options.enums === String ? "EN_CHAT_TEXT" : 1;
        }
        if (message.fromIndex != null && message.hasOwnProperty("fromIndex"))
            object.fromIndex = message.fromIndex;
        if (message.content != null && message.hasOwnProperty("content"))
            object.content = message.content;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ENChatType[message.type] : message.type;
        return object;
    };

    /**
     * Converts this CSNotifyChat to JSON.
     * @function toJSON
     * @memberof CSNotifyChat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyChat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyChat;
})();

$root.CSNotifyReconn = (function() {

    /**
     * Properties of a CSNotifyReconn.
     * @exports ICSNotifyReconn
     * @interface ICSNotifyReconn
     * @property {ICSNotifyDoAction} [action] CSNotifyReconn action
     * @property {Array.<number>} [holeCards] CSNotifyReconn holeCards
     * @property {ENCardForm} [cardForm] CSNotifyReconn cardForm
     */

    /**
     * Constructs a new CSNotifyReconn.
     * @exports CSNotifyReconn
     * @classdesc Represents a CSNotifyReconn.
     * @constructor
     * @param {ICSNotifyReconn=} [properties] Properties to set
     */
    function CSNotifyReconn(properties) {
        this.holeCards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyReconn action.
     * @member {(ICSNotifyDoAction|null|undefined)}action
     * @memberof CSNotifyReconn
     * @instance
     */
    CSNotifyReconn.prototype.action = null;

    /**
     * CSNotifyReconn holeCards.
     * @member {Array.<number>}holeCards
     * @memberof CSNotifyReconn
     * @instance
     */
    CSNotifyReconn.prototype.holeCards = $util.emptyArray;

    /**
     * CSNotifyReconn cardForm.
     * @member {ENCardForm}cardForm
     * @memberof CSNotifyReconn
     * @instance
     */
    CSNotifyReconn.prototype.cardForm = 0;

    /**
     * Creates a new CSNotifyReconn instance using the specified properties.
     * @function create
     * @memberof CSNotifyReconn
     * @static
     * @param {ICSNotifyReconn=} [properties] Properties to set
     * @returns {CSNotifyReconn} CSNotifyReconn instance
     */
    CSNotifyReconn.create = function create(properties) {
        return new CSNotifyReconn(properties);
    };

    /**
     * Encodes the specified CSNotifyReconn message. Does not implicitly {@link CSNotifyReconn.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyReconn
     * @static
     * @param {ICSNotifyReconn} message CSNotifyReconn message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyReconn.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.action != null && message.hasOwnProperty("action"))
            $root.CSNotifyDoAction.encode(message.action, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.holeCards != null && message.holeCards.length)
            for (var i = 0; i < message.holeCards.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.holeCards[i]);
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cardForm);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyReconn message, length delimited. Does not implicitly {@link CSNotifyReconn.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyReconn
     * @static
     * @param {ICSNotifyReconn} message CSNotifyReconn message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyReconn.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyReconn message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyReconn
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyReconn} CSNotifyReconn
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyReconn.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyReconn();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.action = $root.CSNotifyDoAction.decode(reader, reader.uint32());
                break;
            case 2:
                if (!(message.holeCards && message.holeCards.length))
                    message.holeCards = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.holeCards.push(reader.uint32());
                } else
                    message.holeCards.push(reader.uint32());
                break;
            case 3:
                message.cardForm = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyReconn message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyReconn
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyReconn} CSNotifyReconn
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyReconn.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyReconn message.
     * @function verify
     * @memberof CSNotifyReconn
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyReconn.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.action != null && message.hasOwnProperty("action")) {
            var error = $root.CSNotifyDoAction.verify(message.action);
            if (error)
                return "action." + error;
        }
        if (message.holeCards != null && message.hasOwnProperty("holeCards")) {
            if (!Array.isArray(message.holeCards))
                return "holeCards: array expected";
            for (var i = 0; i < message.holeCards.length; ++i)
                if (!$util.isInteger(message.holeCards[i]))
                    return "holeCards: integer[] expected";
        }
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            switch (message.cardForm) {
            default:
                return "cardForm: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
        return null;
    };

    /**
     * Creates a CSNotifyReconn message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyReconn
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyReconn} CSNotifyReconn
     */
    CSNotifyReconn.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyReconn)
            return object;
        var message = new $root.CSNotifyReconn();
        if (object.action != null) {
            if (typeof object.action !== "object")
                throw TypeError(".CSNotifyReconn.action: object expected");
            message.action = $root.CSNotifyDoAction.fromObject(object.action);
        }
        if (object.holeCards) {
            if (!Array.isArray(object.holeCards))
                throw TypeError(".CSNotifyReconn.holeCards: array expected");
            message.holeCards = [];
            for (var i = 0; i < object.holeCards.length; ++i)
                message.holeCards[i] = object.holeCards[i] >>> 0;
        }
        switch (object.cardForm) {
        case "EN_CARD_FORM_UNKONWN":
        case 0:
            message.cardForm = 0;
            break;
        case "EN_CARD_FORM_HIGH_CARD":
        case 1:
            message.cardForm = 1;
            break;
        case "EN_CARD_FORM_ONE_PAIR":
        case 2:
            message.cardForm = 2;
            break;
        case "EN_CARD_FORM_TWO_PAIR":
        case 3:
            message.cardForm = 3;
            break;
        case "EN_CARD_FORM_THREE_OF_A_KING":
        case 4:
            message.cardForm = 4;
            break;
        case "EN_CARD_FORM_FLUSH":
        case 5:
            message.cardForm = 5;
            break;
        case "EN_CARD_FORM_STRAIGHT":
        case 6:
            message.cardForm = 6;
            break;
        case "EN_CARD_FORM_FULL_HOUSE":
        case 7:
            message.cardForm = 7;
            break;
        case "EN_CARD_FORM_FOUR_OF_A_KING":
        case 8:
            message.cardForm = 8;
            break;
        case "EN_CARD_FORM_STRAIGHT_FLUSH":
        case 9:
            message.cardForm = 9;
            break;
        case "EN_CARD_FORM_ROYAL_FLUSH":
        case 10:
            message.cardForm = 10;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyReconn message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyReconn
     * @static
     * @param {CSNotifyReconn} message CSNotifyReconn
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyReconn.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.holeCards = [];
        if (options.defaults) {
            object.action = null;
            object.cardForm = options.enums === String ? "EN_CARD_FORM_UNKONWN" : 0;
        }
        if (message.action != null && message.hasOwnProperty("action"))
            object.action = $root.CSNotifyDoAction.toObject(message.action, options);
        if (message.holeCards && message.holeCards.length) {
            object.holeCards = [];
            for (var j = 0; j < message.holeCards.length; ++j)
                object.holeCards[j] = message.holeCards[j];
        }
        if (message.cardForm != null && message.hasOwnProperty("cardForm"))
            object.cardForm = options.enums === String ? $root.ENCardForm[message.cardForm] : message.cardForm;
        return object;
    };

    /**
     * Converts this CSNotifyReconn to JSON.
     * @function toJSON
     * @memberof CSNotifyReconn
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyReconn.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyReconn;
})();

$root.CSRequestBuyChip = (function() {

    /**
     * Properties of a CSRequestBuyChip.
     * @exports ICSRequestBuyChip
     * @interface ICSRequestBuyChip
     * @property {number|Long} [buyIn] CSRequestBuyChip buyIn
     * @property {number} [tableId] CSRequestBuyChip tableId
     * @property {number|Long} [realBuyIn] CSRequestBuyChip realBuyIn
     */

    /**
     * Constructs a new CSRequestBuyChip.
     * @exports CSRequestBuyChip
     * @classdesc Represents a CSRequestBuyChip.
     * @constructor
     * @param {ICSRequestBuyChip=} [properties] Properties to set
     */
    function CSRequestBuyChip(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestBuyChip buyIn.
     * @member {number|Long}buyIn
     * @memberof CSRequestBuyChip
     * @instance
     */
    CSRequestBuyChip.prototype.buyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSRequestBuyChip tableId.
     * @member {number}tableId
     * @memberof CSRequestBuyChip
     * @instance
     */
    CSRequestBuyChip.prototype.tableId = 0;

    /**
     * CSRequestBuyChip realBuyIn.
     * @member {number|Long}realBuyIn
     * @memberof CSRequestBuyChip
     * @instance
     */
    CSRequestBuyChip.prototype.realBuyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSRequestBuyChip instance using the specified properties.
     * @function create
     * @memberof CSRequestBuyChip
     * @static
     * @param {ICSRequestBuyChip=} [properties] Properties to set
     * @returns {CSRequestBuyChip} CSRequestBuyChip instance
     */
    CSRequestBuyChip.create = function create(properties) {
        return new CSRequestBuyChip(properties);
    };

    /**
     * Encodes the specified CSRequestBuyChip message. Does not implicitly {@link CSRequestBuyChip.verify|verify} messages.
     * @function encode
     * @memberof CSRequestBuyChip
     * @static
     * @param {ICSRequestBuyChip} message CSRequestBuyChip message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestBuyChip.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.buyIn);
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tableId);
        if (message.realBuyIn != null && message.hasOwnProperty("realBuyIn"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.realBuyIn);
        return writer;
    };

    /**
     * Encodes the specified CSRequestBuyChip message, length delimited. Does not implicitly {@link CSRequestBuyChip.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestBuyChip
     * @static
     * @param {ICSRequestBuyChip} message CSRequestBuyChip message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestBuyChip.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestBuyChip message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestBuyChip
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestBuyChip} CSRequestBuyChip
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestBuyChip.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestBuyChip();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.buyIn = reader.uint64();
                break;
            case 2:
                message.tableId = reader.uint32();
                break;
            case 3:
                message.realBuyIn = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestBuyChip message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestBuyChip
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestBuyChip} CSRequestBuyChip
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestBuyChip.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestBuyChip message.
     * @function verify
     * @memberof CSRequestBuyChip
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestBuyChip.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            if (!$util.isInteger(message.buyIn) && !(message.buyIn && $util.isInteger(message.buyIn.low) && $util.isInteger(message.buyIn.high)))
                return "buyIn: integer|Long expected";
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        if (message.realBuyIn != null && message.hasOwnProperty("realBuyIn"))
            if (!$util.isInteger(message.realBuyIn) && !(message.realBuyIn && $util.isInteger(message.realBuyIn.low) && $util.isInteger(message.realBuyIn.high)))
                return "realBuyIn: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSRequestBuyChip message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestBuyChip
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestBuyChip} CSRequestBuyChip
     */
    CSRequestBuyChip.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestBuyChip)
            return object;
        var message = new $root.CSRequestBuyChip();
        if (object.buyIn != null)
            if ($util.Long)
                (message.buyIn = $util.Long.fromValue(object.buyIn)).unsigned = true;
            else if (typeof object.buyIn === "string")
                message.buyIn = parseInt(object.buyIn, 10);
            else if (typeof object.buyIn === "number")
                message.buyIn = object.buyIn;
            else if (typeof object.buyIn === "object")
                message.buyIn = new $util.LongBits(object.buyIn.low >>> 0, object.buyIn.high >>> 0).toNumber(true);
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        if (object.realBuyIn != null)
            if ($util.Long)
                (message.realBuyIn = $util.Long.fromValue(object.realBuyIn)).unsigned = true;
            else if (typeof object.realBuyIn === "string")
                message.realBuyIn = parseInt(object.realBuyIn, 10);
            else if (typeof object.realBuyIn === "number")
                message.realBuyIn = object.realBuyIn;
            else if (typeof object.realBuyIn === "object")
                message.realBuyIn = new $util.LongBits(object.realBuyIn.low >>> 0, object.realBuyIn.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSRequestBuyChip message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestBuyChip
     * @static
     * @param {CSRequestBuyChip} message CSRequestBuyChip
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestBuyChip.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.buyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.buyIn = options.longs === String ? "0" : 0;
            object.tableId = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.realBuyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.realBuyIn = options.longs === String ? "0" : 0;
        }
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            if (typeof message.buyIn === "number")
                object.buyIn = options.longs === String ? String(message.buyIn) : message.buyIn;
            else
                object.buyIn = options.longs === String ? $util.Long.prototype.toString.call(message.buyIn) : options.longs === Number ? new $util.LongBits(message.buyIn.low >>> 0, message.buyIn.high >>> 0).toNumber(true) : message.buyIn;
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message.realBuyIn != null && message.hasOwnProperty("realBuyIn"))
            if (typeof message.realBuyIn === "number")
                object.realBuyIn = options.longs === String ? String(message.realBuyIn) : message.realBuyIn;
            else
                object.realBuyIn = options.longs === String ? $util.Long.prototype.toString.call(message.realBuyIn) : options.longs === Number ? new $util.LongBits(message.realBuyIn.low >>> 0, message.realBuyIn.high >>> 0).toNumber(true) : message.realBuyIn;
        return object;
    };

    /**
     * Converts this CSRequestBuyChip to JSON.
     * @function toJSON
     * @memberof CSRequestBuyChip
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestBuyChip.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestBuyChip;
})();

$root.CSResponseBuyChip = (function() {

    /**
     * Properties of a CSResponseBuyChip.
     * @exports ICSResponseBuyChip
     * @interface ICSResponseBuyChip
     * @property {ENMessageError} [result] CSResponseBuyChip result
     */

    /**
     * Constructs a new CSResponseBuyChip.
     * @exports CSResponseBuyChip
     * @classdesc Represents a CSResponseBuyChip.
     * @constructor
     * @param {ICSResponseBuyChip=} [properties] Properties to set
     */
    function CSResponseBuyChip(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseBuyChip result.
     * @member {ENMessageError}result
     * @memberof CSResponseBuyChip
     * @instance
     */
    CSResponseBuyChip.prototype.result = 0;

    /**
     * Creates a new CSResponseBuyChip instance using the specified properties.
     * @function create
     * @memberof CSResponseBuyChip
     * @static
     * @param {ICSResponseBuyChip=} [properties] Properties to set
     * @returns {CSResponseBuyChip} CSResponseBuyChip instance
     */
    CSResponseBuyChip.create = function create(properties) {
        return new CSResponseBuyChip(properties);
    };

    /**
     * Encodes the specified CSResponseBuyChip message. Does not implicitly {@link CSResponseBuyChip.verify|verify} messages.
     * @function encode
     * @memberof CSResponseBuyChip
     * @static
     * @param {ICSResponseBuyChip} message CSResponseBuyChip message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseBuyChip.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified CSResponseBuyChip message, length delimited. Does not implicitly {@link CSResponseBuyChip.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseBuyChip
     * @static
     * @param {ICSResponseBuyChip} message CSResponseBuyChip message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseBuyChip.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseBuyChip message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseBuyChip
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseBuyChip} CSResponseBuyChip
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseBuyChip.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseBuyChip();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseBuyChip message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseBuyChip
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseBuyChip} CSResponseBuyChip
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseBuyChip.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseBuyChip message.
     * @function verify
     * @memberof CSResponseBuyChip
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseBuyChip.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        return null;
    };

    /**
     * Creates a CSResponseBuyChip message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseBuyChip
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseBuyChip} CSResponseBuyChip
     */
    CSResponseBuyChip.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseBuyChip)
            return object;
        var message = new $root.CSResponseBuyChip();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseBuyChip message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseBuyChip
     * @static
     * @param {CSResponseBuyChip} message CSResponseBuyChip
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseBuyChip.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        return object;
    };

    /**
     * Converts this CSResponseBuyChip to JSON.
     * @function toJSON
     * @memberof CSResponseBuyChip
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseBuyChip.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseBuyChip;
})();

$root.CSNotifyBuyChip = (function() {

    /**
     * Properties of a CSNotifyBuyChip.
     * @exports ICSNotifyBuyChip
     * @interface ICSNotifyBuyChip
     * @property {number} [tableIndex] CSNotifyBuyChip tableIndex
     * @property {number|Long} [playerUid] CSNotifyBuyChip playerUid
     * @property {number|Long} [playerChip] CSNotifyBuyChip playerChip
     * @property {number|Long} [buyNum] CSNotifyBuyChip buyNum
     * @property {ENMessageError} [result] CSNotifyBuyChip result
     */

    /**
     * Constructs a new CSNotifyBuyChip.
     * @exports CSNotifyBuyChip
     * @classdesc Represents a CSNotifyBuyChip.
     * @constructor
     * @param {ICSNotifyBuyChip=} [properties] Properties to set
     */
    function CSNotifyBuyChip(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyBuyChip tableIndex.
     * @member {number}tableIndex
     * @memberof CSNotifyBuyChip
     * @instance
     */
    CSNotifyBuyChip.prototype.tableIndex = 0;

    /**
     * CSNotifyBuyChip playerUid.
     * @member {number|Long}playerUid
     * @memberof CSNotifyBuyChip
     * @instance
     */
    CSNotifyBuyChip.prototype.playerUid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyBuyChip playerChip.
     * @member {number|Long}playerChip
     * @memberof CSNotifyBuyChip
     * @instance
     */
    CSNotifyBuyChip.prototype.playerChip = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyBuyChip buyNum.
     * @member {number|Long}buyNum
     * @memberof CSNotifyBuyChip
     * @instance
     */
    CSNotifyBuyChip.prototype.buyNum = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyBuyChip result.
     * @member {ENMessageError}result
     * @memberof CSNotifyBuyChip
     * @instance
     */
    CSNotifyBuyChip.prototype.result = 0;

    /**
     * Creates a new CSNotifyBuyChip instance using the specified properties.
     * @function create
     * @memberof CSNotifyBuyChip
     * @static
     * @param {ICSNotifyBuyChip=} [properties] Properties to set
     * @returns {CSNotifyBuyChip} CSNotifyBuyChip instance
     */
    CSNotifyBuyChip.create = function create(properties) {
        return new CSNotifyBuyChip(properties);
    };

    /**
     * Encodes the specified CSNotifyBuyChip message. Does not implicitly {@link CSNotifyBuyChip.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyBuyChip
     * @static
     * @param {ICSNotifyBuyChip} message CSNotifyBuyChip message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyBuyChip.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tableIndex != null && message.hasOwnProperty("tableIndex"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tableIndex);
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.playerUid);
        if (message.playerChip != null && message.hasOwnProperty("playerChip"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.playerChip);
        if (message.buyNum != null && message.hasOwnProperty("buyNum"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.buyNum);
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyBuyChip message, length delimited. Does not implicitly {@link CSNotifyBuyChip.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyBuyChip
     * @static
     * @param {ICSNotifyBuyChip} message CSNotifyBuyChip message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyBuyChip.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyBuyChip message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyBuyChip
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyBuyChip} CSNotifyBuyChip
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyBuyChip.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyBuyChip();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.tableIndex = reader.uint32();
                break;
            case 2:
                message.playerUid = reader.uint64();
                break;
            case 3:
                message.playerChip = reader.uint64();
                break;
            case 4:
                message.buyNum = reader.uint64();
                break;
            case 5:
                message.result = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyBuyChip message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyBuyChip
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyBuyChip} CSNotifyBuyChip
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyBuyChip.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyBuyChip message.
     * @function verify
     * @memberof CSNotifyBuyChip
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyBuyChip.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tableIndex != null && message.hasOwnProperty("tableIndex"))
            if (!$util.isInteger(message.tableIndex))
                return "tableIndex: integer expected";
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            if (!$util.isInteger(message.playerUid) && !(message.playerUid && $util.isInteger(message.playerUid.low) && $util.isInteger(message.playerUid.high)))
                return "playerUid: integer|Long expected";
        if (message.playerChip != null && message.hasOwnProperty("playerChip"))
            if (!$util.isInteger(message.playerChip) && !(message.playerChip && $util.isInteger(message.playerChip.low) && $util.isInteger(message.playerChip.high)))
                return "playerChip: integer|Long expected";
        if (message.buyNum != null && message.hasOwnProperty("buyNum"))
            if (!$util.isInteger(message.buyNum) && !(message.buyNum && $util.isInteger(message.buyNum.low) && $util.isInteger(message.buyNum.high)))
                return "buyNum: integer|Long expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        return null;
    };

    /**
     * Creates a CSNotifyBuyChip message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyBuyChip
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyBuyChip} CSNotifyBuyChip
     */
    CSNotifyBuyChip.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyBuyChip)
            return object;
        var message = new $root.CSNotifyBuyChip();
        if (object.tableIndex != null)
            message.tableIndex = object.tableIndex >>> 0;
        if (object.playerUid != null)
            if ($util.Long)
                (message.playerUid = $util.Long.fromValue(object.playerUid)).unsigned = true;
            else if (typeof object.playerUid === "string")
                message.playerUid = parseInt(object.playerUid, 10);
            else if (typeof object.playerUid === "number")
                message.playerUid = object.playerUid;
            else if (typeof object.playerUid === "object")
                message.playerUid = new $util.LongBits(object.playerUid.low >>> 0, object.playerUid.high >>> 0).toNumber(true);
        if (object.playerChip != null)
            if ($util.Long)
                (message.playerChip = $util.Long.fromValue(object.playerChip)).unsigned = true;
            else if (typeof object.playerChip === "string")
                message.playerChip = parseInt(object.playerChip, 10);
            else if (typeof object.playerChip === "number")
                message.playerChip = object.playerChip;
            else if (typeof object.playerChip === "object")
                message.playerChip = new $util.LongBits(object.playerChip.low >>> 0, object.playerChip.high >>> 0).toNumber(true);
        if (object.buyNum != null)
            if ($util.Long)
                (message.buyNum = $util.Long.fromValue(object.buyNum)).unsigned = true;
            else if (typeof object.buyNum === "string")
                message.buyNum = parseInt(object.buyNum, 10);
            else if (typeof object.buyNum === "number")
                message.buyNum = object.buyNum;
            else if (typeof object.buyNum === "object")
                message.buyNum = new $util.LongBits(object.buyNum.low >>> 0, object.buyNum.high >>> 0).toNumber(true);
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyBuyChip message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyBuyChip
     * @static
     * @param {CSNotifyBuyChip} message CSNotifyBuyChip
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyBuyChip.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.tableIndex = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.playerUid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.playerUid = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.playerChip = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.playerChip = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.buyNum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.buyNum = options.longs === String ? "0" : 0;
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
        }
        if (message.tableIndex != null && message.hasOwnProperty("tableIndex"))
            object.tableIndex = message.tableIndex;
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            if (typeof message.playerUid === "number")
                object.playerUid = options.longs === String ? String(message.playerUid) : message.playerUid;
            else
                object.playerUid = options.longs === String ? $util.Long.prototype.toString.call(message.playerUid) : options.longs === Number ? new $util.LongBits(message.playerUid.low >>> 0, message.playerUid.high >>> 0).toNumber(true) : message.playerUid;
        if (message.playerChip != null && message.hasOwnProperty("playerChip"))
            if (typeof message.playerChip === "number")
                object.playerChip = options.longs === String ? String(message.playerChip) : message.playerChip;
            else
                object.playerChip = options.longs === String ? $util.Long.prototype.toString.call(message.playerChip) : options.longs === Number ? new $util.LongBits(message.playerChip.low >>> 0, message.playerChip.high >>> 0).toNumber(true) : message.playerChip;
        if (message.buyNum != null && message.hasOwnProperty("buyNum"))
            if (typeof message.buyNum === "number")
                object.buyNum = options.longs === String ? String(message.buyNum) : message.buyNum;
            else
                object.buyNum = options.longs === String ? $util.Long.prototype.toString.call(message.buyNum) : options.longs === Number ? new $util.LongBits(message.buyNum.low >>> 0, message.buyNum.high >>> 0).toNumber(true) : message.buyNum;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        return object;
    };

    /**
     * Converts this CSNotifyBuyChip to JSON.
     * @function toJSON
     * @memberof CSNotifyBuyChip
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyBuyChip.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyBuyChip;
})();

$root.CSNotifyMaxBuyIn = (function() {

    /**
     * Properties of a CSNotifyMaxBuyIn.
     * @exports ICSNotifyMaxBuyIn
     * @interface ICSNotifyMaxBuyIn
     * @property {number|Long} [maxBuyIn] CSNotifyMaxBuyIn maxBuyIn
     */

    /**
     * Constructs a new CSNotifyMaxBuyIn.
     * @exports CSNotifyMaxBuyIn
     * @classdesc Represents a CSNotifyMaxBuyIn.
     * @constructor
     * @param {ICSNotifyMaxBuyIn=} [properties] Properties to set
     */
    function CSNotifyMaxBuyIn(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyMaxBuyIn maxBuyIn.
     * @member {number|Long}maxBuyIn
     * @memberof CSNotifyMaxBuyIn
     * @instance
     */
    CSNotifyMaxBuyIn.prototype.maxBuyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSNotifyMaxBuyIn instance using the specified properties.
     * @function create
     * @memberof CSNotifyMaxBuyIn
     * @static
     * @param {ICSNotifyMaxBuyIn=} [properties] Properties to set
     * @returns {CSNotifyMaxBuyIn} CSNotifyMaxBuyIn instance
     */
    CSNotifyMaxBuyIn.create = function create(properties) {
        return new CSNotifyMaxBuyIn(properties);
    };

    /**
     * Encodes the specified CSNotifyMaxBuyIn message. Does not implicitly {@link CSNotifyMaxBuyIn.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyMaxBuyIn
     * @static
     * @param {ICSNotifyMaxBuyIn} message CSNotifyMaxBuyIn message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyMaxBuyIn.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.maxBuyIn);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyMaxBuyIn message, length delimited. Does not implicitly {@link CSNotifyMaxBuyIn.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyMaxBuyIn
     * @static
     * @param {ICSNotifyMaxBuyIn} message CSNotifyMaxBuyIn message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyMaxBuyIn.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyMaxBuyIn message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyMaxBuyIn
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyMaxBuyIn} CSNotifyMaxBuyIn
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyMaxBuyIn.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyMaxBuyIn();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.maxBuyIn = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyMaxBuyIn message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyMaxBuyIn
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyMaxBuyIn} CSNotifyMaxBuyIn
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyMaxBuyIn.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyMaxBuyIn message.
     * @function verify
     * @memberof CSNotifyMaxBuyIn
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyMaxBuyIn.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            if (!$util.isInteger(message.maxBuyIn) && !(message.maxBuyIn && $util.isInteger(message.maxBuyIn.low) && $util.isInteger(message.maxBuyIn.high)))
                return "maxBuyIn: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSNotifyMaxBuyIn message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyMaxBuyIn
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyMaxBuyIn} CSNotifyMaxBuyIn
     */
    CSNotifyMaxBuyIn.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyMaxBuyIn)
            return object;
        var message = new $root.CSNotifyMaxBuyIn();
        if (object.maxBuyIn != null)
            if ($util.Long)
                (message.maxBuyIn = $util.Long.fromValue(object.maxBuyIn)).unsigned = true;
            else if (typeof object.maxBuyIn === "string")
                message.maxBuyIn = parseInt(object.maxBuyIn, 10);
            else if (typeof object.maxBuyIn === "number")
                message.maxBuyIn = object.maxBuyIn;
            else if (typeof object.maxBuyIn === "object")
                message.maxBuyIn = new $util.LongBits(object.maxBuyIn.low >>> 0, object.maxBuyIn.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyMaxBuyIn message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyMaxBuyIn
     * @static
     * @param {CSNotifyMaxBuyIn} message CSNotifyMaxBuyIn
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyMaxBuyIn.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.maxBuyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.maxBuyIn = options.longs === String ? "0" : 0;
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            if (typeof message.maxBuyIn === "number")
                object.maxBuyIn = options.longs === String ? String(message.maxBuyIn) : message.maxBuyIn;
            else
                object.maxBuyIn = options.longs === String ? $util.Long.prototype.toString.call(message.maxBuyIn) : options.longs === Number ? new $util.LongBits(message.maxBuyIn.low >>> 0, message.maxBuyIn.high >>> 0).toNumber(true) : message.maxBuyIn;
        return object;
    };

    /**
     * Converts this CSNotifyMaxBuyIn to JSON.
     * @function toJSON
     * @memberof CSNotifyMaxBuyIn
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyMaxBuyIn.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyMaxBuyIn;
})();

$root.CSTableStat = (function() {

    /**
     * Properties of a CSTableStat.
     * @exports ICSTableStat
     * @interface ICSTableStat
     * @property {number|Long} [uid] CSTableStat uid
     * @property {number|Long} [buyIn] CSTableStat buyIn
     * @property {number|Long} [winLose] CSTableStat winLose
     * @property {number|Long} [maxChip] CSTableStat maxChip
     * @property {number} [playCount] CSTableStat playCount
     */

    /**
     * Constructs a new CSTableStat.
     * @exports CSTableStat
     * @classdesc Represents a CSTableStat.
     * @constructor
     * @param {ICSTableStat=} [properties] Properties to set
     */
    function CSTableStat(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSTableStat uid.
     * @member {number|Long}uid
     * @memberof CSTableStat
     * @instance
     */
    CSTableStat.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableStat buyIn.
     * @member {number|Long}buyIn
     * @memberof CSTableStat
     * @instance
     */
    CSTableStat.prototype.buyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableStat winLose.
     * @member {number|Long}winLose
     * @memberof CSTableStat
     * @instance
     */
    CSTableStat.prototype.winLose = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * CSTableStat maxChip.
     * @member {number|Long}maxChip
     * @memberof CSTableStat
     * @instance
     */
    CSTableStat.prototype.maxChip = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSTableStat playCount.
     * @member {number}playCount
     * @memberof CSTableStat
     * @instance
     */
    CSTableStat.prototype.playCount = 0;

    /**
     * Creates a new CSTableStat instance using the specified properties.
     * @function create
     * @memberof CSTableStat
     * @static
     * @param {ICSTableStat=} [properties] Properties to set
     * @returns {CSTableStat} CSTableStat instance
     */
    CSTableStat.create = function create(properties) {
        return new CSTableStat(properties);
    };

    /**
     * Encodes the specified CSTableStat message. Does not implicitly {@link CSTableStat.verify|verify} messages.
     * @function encode
     * @memberof CSTableStat
     * @static
     * @param {ICSTableStat} message CSTableStat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTableStat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.buyIn);
        if (message.winLose != null && message.hasOwnProperty("winLose"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.winLose);
        if (message.maxChip != null && message.hasOwnProperty("maxChip"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.maxChip);
        if (message.playCount != null && message.hasOwnProperty("playCount"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.playCount);
        return writer;
    };

    /**
     * Encodes the specified CSTableStat message, length delimited. Does not implicitly {@link CSTableStat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSTableStat
     * @static
     * @param {ICSTableStat} message CSTableStat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSTableStat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSTableStat message from the specified reader or buffer.
     * @function decode
     * @memberof CSTableStat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSTableStat} CSTableStat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTableStat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSTableStat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            case 2:
                message.buyIn = reader.uint64();
                break;
            case 3:
                message.winLose = reader.int64();
                break;
            case 4:
                message.maxChip = reader.uint64();
                break;
            case 5:
                message.playCount = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSTableStat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSTableStat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSTableStat} CSTableStat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSTableStat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSTableStat message.
     * @function verify
     * @memberof CSTableStat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSTableStat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            if (!$util.isInteger(message.buyIn) && !(message.buyIn && $util.isInteger(message.buyIn.low) && $util.isInteger(message.buyIn.high)))
                return "buyIn: integer|Long expected";
        if (message.winLose != null && message.hasOwnProperty("winLose"))
            if (!$util.isInteger(message.winLose) && !(message.winLose && $util.isInteger(message.winLose.low) && $util.isInteger(message.winLose.high)))
                return "winLose: integer|Long expected";
        if (message.maxChip != null && message.hasOwnProperty("maxChip"))
            if (!$util.isInteger(message.maxChip) && !(message.maxChip && $util.isInteger(message.maxChip.low) && $util.isInteger(message.maxChip.high)))
                return "maxChip: integer|Long expected";
        if (message.playCount != null && message.hasOwnProperty("playCount"))
            if (!$util.isInteger(message.playCount))
                return "playCount: integer expected";
        return null;
    };

    /**
     * Creates a CSTableStat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSTableStat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSTableStat} CSTableStat
     */
    CSTableStat.fromObject = function fromObject(object) {
        if (object instanceof $root.CSTableStat)
            return object;
        var message = new $root.CSTableStat();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.buyIn != null)
            if ($util.Long)
                (message.buyIn = $util.Long.fromValue(object.buyIn)).unsigned = true;
            else if (typeof object.buyIn === "string")
                message.buyIn = parseInt(object.buyIn, 10);
            else if (typeof object.buyIn === "number")
                message.buyIn = object.buyIn;
            else if (typeof object.buyIn === "object")
                message.buyIn = new $util.LongBits(object.buyIn.low >>> 0, object.buyIn.high >>> 0).toNumber(true);
        if (object.winLose != null)
            if ($util.Long)
                (message.winLose = $util.Long.fromValue(object.winLose)).unsigned = false;
            else if (typeof object.winLose === "string")
                message.winLose = parseInt(object.winLose, 10);
            else if (typeof object.winLose === "number")
                message.winLose = object.winLose;
            else if (typeof object.winLose === "object")
                message.winLose = new $util.LongBits(object.winLose.low >>> 0, object.winLose.high >>> 0).toNumber();
        if (object.maxChip != null)
            if ($util.Long)
                (message.maxChip = $util.Long.fromValue(object.maxChip)).unsigned = true;
            else if (typeof object.maxChip === "string")
                message.maxChip = parseInt(object.maxChip, 10);
            else if (typeof object.maxChip === "number")
                message.maxChip = object.maxChip;
            else if (typeof object.maxChip === "object")
                message.maxChip = new $util.LongBits(object.maxChip.low >>> 0, object.maxChip.high >>> 0).toNumber(true);
        if (object.playCount != null)
            message.playCount = object.playCount >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSTableStat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSTableStat
     * @static
     * @param {CSTableStat} message CSTableStat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSTableStat.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.buyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.buyIn = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.winLose = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.winLose = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.maxChip = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.maxChip = options.longs === String ? "0" : 0;
            object.playCount = 0;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            if (typeof message.buyIn === "number")
                object.buyIn = options.longs === String ? String(message.buyIn) : message.buyIn;
            else
                object.buyIn = options.longs === String ? $util.Long.prototype.toString.call(message.buyIn) : options.longs === Number ? new $util.LongBits(message.buyIn.low >>> 0, message.buyIn.high >>> 0).toNumber(true) : message.buyIn;
        if (message.winLose != null && message.hasOwnProperty("winLose"))
            if (typeof message.winLose === "number")
                object.winLose = options.longs === String ? String(message.winLose) : message.winLose;
            else
                object.winLose = options.longs === String ? $util.Long.prototype.toString.call(message.winLose) : options.longs === Number ? new $util.LongBits(message.winLose.low >>> 0, message.winLose.high >>> 0).toNumber() : message.winLose;
        if (message.maxChip != null && message.hasOwnProperty("maxChip"))
            if (typeof message.maxChip === "number")
                object.maxChip = options.longs === String ? String(message.maxChip) : message.maxChip;
            else
                object.maxChip = options.longs === String ? $util.Long.prototype.toString.call(message.maxChip) : options.longs === Number ? new $util.LongBits(message.maxChip.low >>> 0, message.maxChip.high >>> 0).toNumber(true) : message.maxChip;
        if (message.playCount != null && message.hasOwnProperty("playCount"))
            object.playCount = message.playCount;
        return object;
    };

    /**
     * Converts this CSTableStat to JSON.
     * @function toJSON
     * @memberof CSTableStat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSTableStat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSTableStat;
})();

$root.CSRequestTableStat = (function() {

    /**
     * Properties of a CSRequestTableStat.
     * @exports ICSRequestTableStat
     * @interface ICSRequestTableStat
     */

    /**
     * Constructs a new CSRequestTableStat.
     * @exports CSRequestTableStat
     * @classdesc Represents a CSRequestTableStat.
     * @constructor
     * @param {ICSRequestTableStat=} [properties] Properties to set
     */
    function CSRequestTableStat(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CSRequestTableStat instance using the specified properties.
     * @function create
     * @memberof CSRequestTableStat
     * @static
     * @param {ICSRequestTableStat=} [properties] Properties to set
     * @returns {CSRequestTableStat} CSRequestTableStat instance
     */
    CSRequestTableStat.create = function create(properties) {
        return new CSRequestTableStat(properties);
    };

    /**
     * Encodes the specified CSRequestTableStat message. Does not implicitly {@link CSRequestTableStat.verify|verify} messages.
     * @function encode
     * @memberof CSRequestTableStat
     * @static
     * @param {ICSRequestTableStat} message CSRequestTableStat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTableStat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CSRequestTableStat message, length delimited. Does not implicitly {@link CSRequestTableStat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestTableStat
     * @static
     * @param {ICSRequestTableStat} message CSRequestTableStat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTableStat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestTableStat message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestTableStat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestTableStat} CSRequestTableStat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTableStat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestTableStat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestTableStat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestTableStat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestTableStat} CSRequestTableStat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTableStat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestTableStat message.
     * @function verify
     * @memberof CSRequestTableStat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestTableStat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CSRequestTableStat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestTableStat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestTableStat} CSRequestTableStat
     */
    CSRequestTableStat.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestTableStat)
            return object;
        return new $root.CSRequestTableStat();
    };

    /**
     * Creates a plain object from a CSRequestTableStat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestTableStat
     * @static
     * @param {CSRequestTableStat} message CSRequestTableStat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestTableStat.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CSRequestTableStat to JSON.
     * @function toJSON
     * @memberof CSRequestTableStat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestTableStat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestTableStat;
})();

$root.CSResponseTableStat = (function() {

    /**
     * Properties of a CSResponseTableStat.
     * @exports ICSResponseTableStat
     * @interface ICSResponseTableStat
     * @property {ENMessageError} [result] CSResponseTableStat result
     * @property {Array.<number|Long>} [obUids] CSResponseTableStat obUids
     * @property {Array.<ICSTableStat>} [tableStats] CSResponseTableStat tableStats
     */

    /**
     * Constructs a new CSResponseTableStat.
     * @exports CSResponseTableStat
     * @classdesc Represents a CSResponseTableStat.
     * @constructor
     * @param {ICSResponseTableStat=} [properties] Properties to set
     */
    function CSResponseTableStat(properties) {
        this.obUids = [];
        this.tableStats = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseTableStat result.
     * @member {ENMessageError}result
     * @memberof CSResponseTableStat
     * @instance
     */
    CSResponseTableStat.prototype.result = 0;

    /**
     * CSResponseTableStat obUids.
     * @member {Array.<number|Long>}obUids
     * @memberof CSResponseTableStat
     * @instance
     */
    CSResponseTableStat.prototype.obUids = $util.emptyArray;

    /**
     * CSResponseTableStat tableStats.
     * @member {Array.<ICSTableStat>}tableStats
     * @memberof CSResponseTableStat
     * @instance
     */
    CSResponseTableStat.prototype.tableStats = $util.emptyArray;

    /**
     * Creates a new CSResponseTableStat instance using the specified properties.
     * @function create
     * @memberof CSResponseTableStat
     * @static
     * @param {ICSResponseTableStat=} [properties] Properties to set
     * @returns {CSResponseTableStat} CSResponseTableStat instance
     */
    CSResponseTableStat.create = function create(properties) {
        return new CSResponseTableStat(properties);
    };

    /**
     * Encodes the specified CSResponseTableStat message. Does not implicitly {@link CSResponseTableStat.verify|verify} messages.
     * @function encode
     * @memberof CSResponseTableStat
     * @static
     * @param {ICSResponseTableStat} message CSResponseTableStat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTableStat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.obUids != null && message.obUids.length)
            for (var i = 0; i < message.obUids.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.obUids[i]);
        if (message.tableStats != null && message.tableStats.length)
            for (var i = 0; i < message.tableStats.length; ++i)
                $root.CSTableStat.encode(message.tableStats[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSResponseTableStat message, length delimited. Does not implicitly {@link CSResponseTableStat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseTableStat
     * @static
     * @param {ICSResponseTableStat} message CSResponseTableStat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTableStat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseTableStat message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseTableStat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseTableStat} CSResponseTableStat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTableStat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseTableStat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                if (!(message.obUids && message.obUids.length))
                    message.obUids = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.obUids.push(reader.uint64());
                } else
                    message.obUids.push(reader.uint64());
                break;
            case 3:
                if (!(message.tableStats && message.tableStats.length))
                    message.tableStats = [];
                message.tableStats.push($root.CSTableStat.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseTableStat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseTableStat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseTableStat} CSResponseTableStat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTableStat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseTableStat message.
     * @function verify
     * @memberof CSResponseTableStat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseTableStat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.obUids != null && message.hasOwnProperty("obUids")) {
            if (!Array.isArray(message.obUids))
                return "obUids: array expected";
            for (var i = 0; i < message.obUids.length; ++i)
                if (!$util.isInteger(message.obUids[i]) && !(message.obUids[i] && $util.isInteger(message.obUids[i].low) && $util.isInteger(message.obUids[i].high)))
                    return "obUids: integer|Long[] expected";
        }
        if (message.tableStats != null && message.hasOwnProperty("tableStats")) {
            if (!Array.isArray(message.tableStats))
                return "tableStats: array expected";
            for (var i = 0; i < message.tableStats.length; ++i) {
                var error = $root.CSTableStat.verify(message.tableStats[i]);
                if (error)
                    return "tableStats." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSResponseTableStat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseTableStat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseTableStat} CSResponseTableStat
     */
    CSResponseTableStat.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseTableStat)
            return object;
        var message = new $root.CSResponseTableStat();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.obUids) {
            if (!Array.isArray(object.obUids))
                throw TypeError(".CSResponseTableStat.obUids: array expected");
            message.obUids = [];
            for (var i = 0; i < object.obUids.length; ++i)
                if ($util.Long)
                    (message.obUids[i] = $util.Long.fromValue(object.obUids[i])).unsigned = true;
                else if (typeof object.obUids[i] === "string")
                    message.obUids[i] = parseInt(object.obUids[i], 10);
                else if (typeof object.obUids[i] === "number")
                    message.obUids[i] = object.obUids[i];
                else if (typeof object.obUids[i] === "object")
                    message.obUids[i] = new $util.LongBits(object.obUids[i].low >>> 0, object.obUids[i].high >>> 0).toNumber(true);
        }
        if (object.tableStats) {
            if (!Array.isArray(object.tableStats))
                throw TypeError(".CSResponseTableStat.tableStats: array expected");
            message.tableStats = [];
            for (var i = 0; i < object.tableStats.length; ++i) {
                if (typeof object.tableStats[i] !== "object")
                    throw TypeError(".CSResponseTableStat.tableStats: object expected");
                message.tableStats[i] = $root.CSTableStat.fromObject(object.tableStats[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseTableStat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseTableStat
     * @static
     * @param {CSResponseTableStat} message CSResponseTableStat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseTableStat.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.obUids = [];
            object.tableStats = [];
        }
        if (options.defaults)
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.obUids && message.obUids.length) {
            object.obUids = [];
            for (var j = 0; j < message.obUids.length; ++j)
                if (typeof message.obUids[j] === "number")
                    object.obUids[j] = options.longs === String ? String(message.obUids[j]) : message.obUids[j];
                else
                    object.obUids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.obUids[j]) : options.longs === Number ? new $util.LongBits(message.obUids[j].low >>> 0, message.obUids[j].high >>> 0).toNumber(true) : message.obUids[j];
        }
        if (message.tableStats && message.tableStats.length) {
            object.tableStats = [];
            for (var j = 0; j < message.tableStats.length; ++j)
                object.tableStats[j] = $root.CSTableStat.toObject(message.tableStats[j], options);
        }
        return object;
    };

    /**
     * Converts this CSResponseTableStat to JSON.
     * @function toJSON
     * @memberof CSResponseTableStat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseTableStat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseTableStat;
})();

$root.CSLastGameResult = (function() {

    /**
     * Properties of a CSLastGameResult.
     * @exports ICSLastGameResult
     * @interface ICSLastGameResult
     * @property {Array.<number>} [communityCards] CSLastGameResult communityCards
     * @property {Array.<ICSTablePlayerResult>} [playerResults] CSLastGameResult playerResults
     */

    /**
     * Constructs a new CSLastGameResult.
     * @exports CSLastGameResult
     * @classdesc Represents a CSLastGameResult.
     * @constructor
     * @param {ICSLastGameResult=} [properties] Properties to set
     */
    function CSLastGameResult(properties) {
        this.communityCards = [];
        this.playerResults = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSLastGameResult communityCards.
     * @member {Array.<number>}communityCards
     * @memberof CSLastGameResult
     * @instance
     */
    CSLastGameResult.prototype.communityCards = $util.emptyArray;

    /**
     * CSLastGameResult playerResults.
     * @member {Array.<ICSTablePlayerResult>}playerResults
     * @memberof CSLastGameResult
     * @instance
     */
    CSLastGameResult.prototype.playerResults = $util.emptyArray;

    /**
     * Creates a new CSLastGameResult instance using the specified properties.
     * @function create
     * @memberof CSLastGameResult
     * @static
     * @param {ICSLastGameResult=} [properties] Properties to set
     * @returns {CSLastGameResult} CSLastGameResult instance
     */
    CSLastGameResult.create = function create(properties) {
        return new CSLastGameResult(properties);
    };

    /**
     * Encodes the specified CSLastGameResult message. Does not implicitly {@link CSLastGameResult.verify|verify} messages.
     * @function encode
     * @memberof CSLastGameResult
     * @static
     * @param {ICSLastGameResult} message CSLastGameResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSLastGameResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.communityCards != null && message.communityCards.length)
            for (var i = 0; i < message.communityCards.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.communityCards[i]);
        if (message.playerResults != null && message.playerResults.length)
            for (var i = 0; i < message.playerResults.length; ++i)
                $root.CSTablePlayerResult.encode(message.playerResults[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSLastGameResult message, length delimited. Does not implicitly {@link CSLastGameResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSLastGameResult
     * @static
     * @param {ICSLastGameResult} message CSLastGameResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSLastGameResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSLastGameResult message from the specified reader or buffer.
     * @function decode
     * @memberof CSLastGameResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSLastGameResult} CSLastGameResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSLastGameResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSLastGameResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.communityCards && message.communityCards.length))
                    message.communityCards = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.communityCards.push(reader.uint32());
                } else
                    message.communityCards.push(reader.uint32());
                break;
            case 2:
                if (!(message.playerResults && message.playerResults.length))
                    message.playerResults = [];
                message.playerResults.push($root.CSTablePlayerResult.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSLastGameResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSLastGameResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSLastGameResult} CSLastGameResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSLastGameResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSLastGameResult message.
     * @function verify
     * @memberof CSLastGameResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSLastGameResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.communityCards != null && message.hasOwnProperty("communityCards")) {
            if (!Array.isArray(message.communityCards))
                return "communityCards: array expected";
            for (var i = 0; i < message.communityCards.length; ++i)
                if (!$util.isInteger(message.communityCards[i]))
                    return "communityCards: integer[] expected";
        }
        if (message.playerResults != null && message.hasOwnProperty("playerResults")) {
            if (!Array.isArray(message.playerResults))
                return "playerResults: array expected";
            for (var i = 0; i < message.playerResults.length; ++i) {
                var error = $root.CSTablePlayerResult.verify(message.playerResults[i]);
                if (error)
                    return "playerResults." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSLastGameResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSLastGameResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSLastGameResult} CSLastGameResult
     */
    CSLastGameResult.fromObject = function fromObject(object) {
        if (object instanceof $root.CSLastGameResult)
            return object;
        var message = new $root.CSLastGameResult();
        if (object.communityCards) {
            if (!Array.isArray(object.communityCards))
                throw TypeError(".CSLastGameResult.communityCards: array expected");
            message.communityCards = [];
            for (var i = 0; i < object.communityCards.length; ++i)
                message.communityCards[i] = object.communityCards[i] >>> 0;
        }
        if (object.playerResults) {
            if (!Array.isArray(object.playerResults))
                throw TypeError(".CSLastGameResult.playerResults: array expected");
            message.playerResults = [];
            for (var i = 0; i < object.playerResults.length; ++i) {
                if (typeof object.playerResults[i] !== "object")
                    throw TypeError(".CSLastGameResult.playerResults: object expected");
                message.playerResults[i] = $root.CSTablePlayerResult.fromObject(object.playerResults[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSLastGameResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSLastGameResult
     * @static
     * @param {CSLastGameResult} message CSLastGameResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSLastGameResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.communityCards = [];
            object.playerResults = [];
        }
        if (message.communityCards && message.communityCards.length) {
            object.communityCards = [];
            for (var j = 0; j < message.communityCards.length; ++j)
                object.communityCards[j] = message.communityCards[j];
        }
        if (message.playerResults && message.playerResults.length) {
            object.playerResults = [];
            for (var j = 0; j < message.playerResults.length; ++j)
                object.playerResults[j] = $root.CSTablePlayerResult.toObject(message.playerResults[j], options);
        }
        return object;
    };

    /**
     * Converts this CSLastGameResult to JSON.
     * @function toJSON
     * @memberof CSLastGameResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSLastGameResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSLastGameResult;
})();

$root.CSRequestLastGameResult = (function() {

    /**
     * Properties of a CSRequestLastGameResult.
     * @exports ICSRequestLastGameResult
     * @interface ICSRequestLastGameResult
     */

    /**
     * Constructs a new CSRequestLastGameResult.
     * @exports CSRequestLastGameResult
     * @classdesc Represents a CSRequestLastGameResult.
     * @constructor
     * @param {ICSRequestLastGameResult=} [properties] Properties to set
     */
    function CSRequestLastGameResult(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CSRequestLastGameResult instance using the specified properties.
     * @function create
     * @memberof CSRequestLastGameResult
     * @static
     * @param {ICSRequestLastGameResult=} [properties] Properties to set
     * @returns {CSRequestLastGameResult} CSRequestLastGameResult instance
     */
    CSRequestLastGameResult.create = function create(properties) {
        return new CSRequestLastGameResult(properties);
    };

    /**
     * Encodes the specified CSRequestLastGameResult message. Does not implicitly {@link CSRequestLastGameResult.verify|verify} messages.
     * @function encode
     * @memberof CSRequestLastGameResult
     * @static
     * @param {ICSRequestLastGameResult} message CSRequestLastGameResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestLastGameResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CSRequestLastGameResult message, length delimited. Does not implicitly {@link CSRequestLastGameResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestLastGameResult
     * @static
     * @param {ICSRequestLastGameResult} message CSRequestLastGameResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestLastGameResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestLastGameResult message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestLastGameResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestLastGameResult} CSRequestLastGameResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestLastGameResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestLastGameResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestLastGameResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestLastGameResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestLastGameResult} CSRequestLastGameResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestLastGameResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestLastGameResult message.
     * @function verify
     * @memberof CSRequestLastGameResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestLastGameResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CSRequestLastGameResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestLastGameResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestLastGameResult} CSRequestLastGameResult
     */
    CSRequestLastGameResult.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestLastGameResult)
            return object;
        return new $root.CSRequestLastGameResult();
    };

    /**
     * Creates a plain object from a CSRequestLastGameResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestLastGameResult
     * @static
     * @param {CSRequestLastGameResult} message CSRequestLastGameResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestLastGameResult.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CSRequestLastGameResult to JSON.
     * @function toJSON
     * @memberof CSRequestLastGameResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestLastGameResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestLastGameResult;
})();

$root.CSResponseLastGameResult = (function() {

    /**
     * Properties of a CSResponseLastGameResult.
     * @exports ICSResponseLastGameResult
     * @interface ICSResponseLastGameResult
     * @property {ENMessageError} [result] CSResponseLastGameResult result
     * @property {ICSLastGameResult} [gameResult] CSResponseLastGameResult gameResult
     */

    /**
     * Constructs a new CSResponseLastGameResult.
     * @exports CSResponseLastGameResult
     * @classdesc Represents a CSResponseLastGameResult.
     * @constructor
     * @param {ICSResponseLastGameResult=} [properties] Properties to set
     */
    function CSResponseLastGameResult(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseLastGameResult result.
     * @member {ENMessageError}result
     * @memberof CSResponseLastGameResult
     * @instance
     */
    CSResponseLastGameResult.prototype.result = 0;

    /**
     * CSResponseLastGameResult gameResult.
     * @member {(ICSLastGameResult|null|undefined)}gameResult
     * @memberof CSResponseLastGameResult
     * @instance
     */
    CSResponseLastGameResult.prototype.gameResult = null;

    /**
     * Creates a new CSResponseLastGameResult instance using the specified properties.
     * @function create
     * @memberof CSResponseLastGameResult
     * @static
     * @param {ICSResponseLastGameResult=} [properties] Properties to set
     * @returns {CSResponseLastGameResult} CSResponseLastGameResult instance
     */
    CSResponseLastGameResult.create = function create(properties) {
        return new CSResponseLastGameResult(properties);
    };

    /**
     * Encodes the specified CSResponseLastGameResult message. Does not implicitly {@link CSResponseLastGameResult.verify|verify} messages.
     * @function encode
     * @memberof CSResponseLastGameResult
     * @static
     * @param {ICSResponseLastGameResult} message CSResponseLastGameResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseLastGameResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.gameResult != null && message.hasOwnProperty("gameResult"))
            $root.CSLastGameResult.encode(message.gameResult, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSResponseLastGameResult message, length delimited. Does not implicitly {@link CSResponseLastGameResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseLastGameResult
     * @static
     * @param {ICSResponseLastGameResult} message CSResponseLastGameResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseLastGameResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseLastGameResult message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseLastGameResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseLastGameResult} CSResponseLastGameResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseLastGameResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseLastGameResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 2:
                message.gameResult = $root.CSLastGameResult.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseLastGameResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseLastGameResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseLastGameResult} CSResponseLastGameResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseLastGameResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseLastGameResult message.
     * @function verify
     * @memberof CSResponseLastGameResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseLastGameResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.gameResult != null && message.hasOwnProperty("gameResult")) {
            var error = $root.CSLastGameResult.verify(message.gameResult);
            if (error)
                return "gameResult." + error;
        }
        return null;
    };

    /**
     * Creates a CSResponseLastGameResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseLastGameResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseLastGameResult} CSResponseLastGameResult
     */
    CSResponseLastGameResult.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseLastGameResult)
            return object;
        var message = new $root.CSResponseLastGameResult();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.gameResult != null) {
            if (typeof object.gameResult !== "object")
                throw TypeError(".CSResponseLastGameResult.gameResult: object expected");
            message.gameResult = $root.CSLastGameResult.fromObject(object.gameResult);
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseLastGameResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseLastGameResult
     * @static
     * @param {CSResponseLastGameResult} message CSResponseLastGameResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseLastGameResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.gameResult = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.gameResult != null && message.hasOwnProperty("gameResult"))
            object.gameResult = $root.CSLastGameResult.toObject(message.gameResult, options);
        return object;
    };

    /**
     * Converts this CSResponseLastGameResult to JSON.
     * @function toJSON
     * @memberof CSResponseLastGameResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseLastGameResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseLastGameResult;
})();

$root.CSRequestGameInfo = (function() {

    /**
     * Properties of a CSRequestGameInfo.
     * @exports ICSRequestGameInfo
     * @interface ICSRequestGameInfo
     */

    /**
     * Constructs a new CSRequestGameInfo.
     * @exports CSRequestGameInfo
     * @classdesc Represents a CSRequestGameInfo.
     * @constructor
     * @param {ICSRequestGameInfo=} [properties] Properties to set
     */
    function CSRequestGameInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CSRequestGameInfo instance using the specified properties.
     * @function create
     * @memberof CSRequestGameInfo
     * @static
     * @param {ICSRequestGameInfo=} [properties] Properties to set
     * @returns {CSRequestGameInfo} CSRequestGameInfo instance
     */
    CSRequestGameInfo.create = function create(properties) {
        return new CSRequestGameInfo(properties);
    };

    /**
     * Encodes the specified CSRequestGameInfo message. Does not implicitly {@link CSRequestGameInfo.verify|verify} messages.
     * @function encode
     * @memberof CSRequestGameInfo
     * @static
     * @param {ICSRequestGameInfo} message CSRequestGameInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestGameInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CSRequestGameInfo message, length delimited. Does not implicitly {@link CSRequestGameInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestGameInfo
     * @static
     * @param {ICSRequestGameInfo} message CSRequestGameInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestGameInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestGameInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestGameInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestGameInfo} CSRequestGameInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestGameInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestGameInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestGameInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestGameInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestGameInfo} CSRequestGameInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestGameInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestGameInfo message.
     * @function verify
     * @memberof CSRequestGameInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestGameInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CSRequestGameInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestGameInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestGameInfo} CSRequestGameInfo
     */
    CSRequestGameInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestGameInfo)
            return object;
        return new $root.CSRequestGameInfo();
    };

    /**
     * Creates a plain object from a CSRequestGameInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestGameInfo
     * @static
     * @param {CSRequestGameInfo} message CSRequestGameInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestGameInfo.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CSRequestGameInfo to JSON.
     * @function toJSON
     * @memberof CSRequestGameInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestGameInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestGameInfo;
})();

$root.CSResponseGameInfo = (function() {

    /**
     * Properties of a CSResponseGameInfo.
     * @exports ICSResponseGameInfo
     * @interface ICSResponseGameInfo
     * @property {number} [playTableCount] CSResponseGameInfo playTableCount
     * @property {number} [playGameCount] CSResponseGameInfo playGameCount
     * @property {number} [winCount] CSResponseGameInfo winCount
     * @property {number} [betCount] CSResponseGameInfo betCount
     * @property {number|Long} [juniorTrainingCount] CSResponseGameInfo juniorTrainingCount
     * @property {number|Long} [middleTrainingCount] CSResponseGameInfo middleTrainingCount
     * @property {number|Long} [seniorTrainingCount] CSResponseGameInfo seniorTrainingCount
     */

    /**
     * Constructs a new CSResponseGameInfo.
     * @exports CSResponseGameInfo
     * @classdesc Represents a CSResponseGameInfo.
     * @constructor
     * @param {ICSResponseGameInfo=} [properties] Properties to set
     */
    function CSResponseGameInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseGameInfo playTableCount.
     * @member {number}playTableCount
     * @memberof CSResponseGameInfo
     * @instance
     */
    CSResponseGameInfo.prototype.playTableCount = 0;

    /**
     * CSResponseGameInfo playGameCount.
     * @member {number}playGameCount
     * @memberof CSResponseGameInfo
     * @instance
     */
    CSResponseGameInfo.prototype.playGameCount = 0;

    /**
     * CSResponseGameInfo winCount.
     * @member {number}winCount
     * @memberof CSResponseGameInfo
     * @instance
     */
    CSResponseGameInfo.prototype.winCount = 0;

    /**
     * CSResponseGameInfo betCount.
     * @member {number}betCount
     * @memberof CSResponseGameInfo
     * @instance
     */
    CSResponseGameInfo.prototype.betCount = 0;

    /**
     * CSResponseGameInfo juniorTrainingCount.
     * @member {number|Long}juniorTrainingCount
     * @memberof CSResponseGameInfo
     * @instance
     */
    CSResponseGameInfo.prototype.juniorTrainingCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSResponseGameInfo middleTrainingCount.
     * @member {number|Long}middleTrainingCount
     * @memberof CSResponseGameInfo
     * @instance
     */
    CSResponseGameInfo.prototype.middleTrainingCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSResponseGameInfo seniorTrainingCount.
     * @member {number|Long}seniorTrainingCount
     * @memberof CSResponseGameInfo
     * @instance
     */
    CSResponseGameInfo.prototype.seniorTrainingCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSResponseGameInfo instance using the specified properties.
     * @function create
     * @memberof CSResponseGameInfo
     * @static
     * @param {ICSResponseGameInfo=} [properties] Properties to set
     * @returns {CSResponseGameInfo} CSResponseGameInfo instance
     */
    CSResponseGameInfo.create = function create(properties) {
        return new CSResponseGameInfo(properties);
    };

    /**
     * Encodes the specified CSResponseGameInfo message. Does not implicitly {@link CSResponseGameInfo.verify|verify} messages.
     * @function encode
     * @memberof CSResponseGameInfo
     * @static
     * @param {ICSResponseGameInfo} message CSResponseGameInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseGameInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.playTableCount != null && message.hasOwnProperty("playTableCount"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.playTableCount);
        if (message.playGameCount != null && message.hasOwnProperty("playGameCount"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.playGameCount);
        if (message.winCount != null && message.hasOwnProperty("winCount"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.winCount);
        if (message.betCount != null && message.hasOwnProperty("betCount"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.betCount);
        if (message.juniorTrainingCount != null && message.hasOwnProperty("juniorTrainingCount"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.juniorTrainingCount);
        if (message.middleTrainingCount != null && message.hasOwnProperty("middleTrainingCount"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.middleTrainingCount);
        if (message.seniorTrainingCount != null && message.hasOwnProperty("seniorTrainingCount"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.seniorTrainingCount);
        return writer;
    };

    /**
     * Encodes the specified CSResponseGameInfo message, length delimited. Does not implicitly {@link CSResponseGameInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseGameInfo
     * @static
     * @param {ICSResponseGameInfo} message CSResponseGameInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseGameInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseGameInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseGameInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseGameInfo} CSResponseGameInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseGameInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseGameInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.playTableCount = reader.uint32();
                break;
            case 2:
                message.playGameCount = reader.uint32();
                break;
            case 3:
                message.winCount = reader.uint32();
                break;
            case 4:
                message.betCount = reader.uint32();
                break;
            case 5:
                message.juniorTrainingCount = reader.uint64();
                break;
            case 6:
                message.middleTrainingCount = reader.uint64();
                break;
            case 7:
                message.seniorTrainingCount = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseGameInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseGameInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseGameInfo} CSResponseGameInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseGameInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseGameInfo message.
     * @function verify
     * @memberof CSResponseGameInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseGameInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.playTableCount != null && message.hasOwnProperty("playTableCount"))
            if (!$util.isInteger(message.playTableCount))
                return "playTableCount: integer expected";
        if (message.playGameCount != null && message.hasOwnProperty("playGameCount"))
            if (!$util.isInteger(message.playGameCount))
                return "playGameCount: integer expected";
        if (message.winCount != null && message.hasOwnProperty("winCount"))
            if (!$util.isInteger(message.winCount))
                return "winCount: integer expected";
        if (message.betCount != null && message.hasOwnProperty("betCount"))
            if (!$util.isInteger(message.betCount))
                return "betCount: integer expected";
        if (message.juniorTrainingCount != null && message.hasOwnProperty("juniorTrainingCount"))
            if (!$util.isInteger(message.juniorTrainingCount) && !(message.juniorTrainingCount && $util.isInteger(message.juniorTrainingCount.low) && $util.isInteger(message.juniorTrainingCount.high)))
                return "juniorTrainingCount: integer|Long expected";
        if (message.middleTrainingCount != null && message.hasOwnProperty("middleTrainingCount"))
            if (!$util.isInteger(message.middleTrainingCount) && !(message.middleTrainingCount && $util.isInteger(message.middleTrainingCount.low) && $util.isInteger(message.middleTrainingCount.high)))
                return "middleTrainingCount: integer|Long expected";
        if (message.seniorTrainingCount != null && message.hasOwnProperty("seniorTrainingCount"))
            if (!$util.isInteger(message.seniorTrainingCount) && !(message.seniorTrainingCount && $util.isInteger(message.seniorTrainingCount.low) && $util.isInteger(message.seniorTrainingCount.high)))
                return "seniorTrainingCount: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSResponseGameInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseGameInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseGameInfo} CSResponseGameInfo
     */
    CSResponseGameInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseGameInfo)
            return object;
        var message = new $root.CSResponseGameInfo();
        if (object.playTableCount != null)
            message.playTableCount = object.playTableCount >>> 0;
        if (object.playGameCount != null)
            message.playGameCount = object.playGameCount >>> 0;
        if (object.winCount != null)
            message.winCount = object.winCount >>> 0;
        if (object.betCount != null)
            message.betCount = object.betCount >>> 0;
        if (object.juniorTrainingCount != null)
            if ($util.Long)
                (message.juniorTrainingCount = $util.Long.fromValue(object.juniorTrainingCount)).unsigned = true;
            else if (typeof object.juniorTrainingCount === "string")
                message.juniorTrainingCount = parseInt(object.juniorTrainingCount, 10);
            else if (typeof object.juniorTrainingCount === "number")
                message.juniorTrainingCount = object.juniorTrainingCount;
            else if (typeof object.juniorTrainingCount === "object")
                message.juniorTrainingCount = new $util.LongBits(object.juniorTrainingCount.low >>> 0, object.juniorTrainingCount.high >>> 0).toNumber(true);
        if (object.middleTrainingCount != null)
            if ($util.Long)
                (message.middleTrainingCount = $util.Long.fromValue(object.middleTrainingCount)).unsigned = true;
            else if (typeof object.middleTrainingCount === "string")
                message.middleTrainingCount = parseInt(object.middleTrainingCount, 10);
            else if (typeof object.middleTrainingCount === "number")
                message.middleTrainingCount = object.middleTrainingCount;
            else if (typeof object.middleTrainingCount === "object")
                message.middleTrainingCount = new $util.LongBits(object.middleTrainingCount.low >>> 0, object.middleTrainingCount.high >>> 0).toNumber(true);
        if (object.seniorTrainingCount != null)
            if ($util.Long)
                (message.seniorTrainingCount = $util.Long.fromValue(object.seniorTrainingCount)).unsigned = true;
            else if (typeof object.seniorTrainingCount === "string")
                message.seniorTrainingCount = parseInt(object.seniorTrainingCount, 10);
            else if (typeof object.seniorTrainingCount === "number")
                message.seniorTrainingCount = object.seniorTrainingCount;
            else if (typeof object.seniorTrainingCount === "object")
                message.seniorTrainingCount = new $util.LongBits(object.seniorTrainingCount.low >>> 0, object.seniorTrainingCount.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSResponseGameInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseGameInfo
     * @static
     * @param {CSResponseGameInfo} message CSResponseGameInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseGameInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.playTableCount = 0;
            object.playGameCount = 0;
            object.winCount = 0;
            object.betCount = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.juniorTrainingCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.juniorTrainingCount = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.middleTrainingCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.middleTrainingCount = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.seniorTrainingCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.seniorTrainingCount = options.longs === String ? "0" : 0;
        }
        if (message.playTableCount != null && message.hasOwnProperty("playTableCount"))
            object.playTableCount = message.playTableCount;
        if (message.playGameCount != null && message.hasOwnProperty("playGameCount"))
            object.playGameCount = message.playGameCount;
        if (message.winCount != null && message.hasOwnProperty("winCount"))
            object.winCount = message.winCount;
        if (message.betCount != null && message.hasOwnProperty("betCount"))
            object.betCount = message.betCount;
        if (message.juniorTrainingCount != null && message.hasOwnProperty("juniorTrainingCount"))
            if (typeof message.juniorTrainingCount === "number")
                object.juniorTrainingCount = options.longs === String ? String(message.juniorTrainingCount) : message.juniorTrainingCount;
            else
                object.juniorTrainingCount = options.longs === String ? $util.Long.prototype.toString.call(message.juniorTrainingCount) : options.longs === Number ? new $util.LongBits(message.juniorTrainingCount.low >>> 0, message.juniorTrainingCount.high >>> 0).toNumber(true) : message.juniorTrainingCount;
        if (message.middleTrainingCount != null && message.hasOwnProperty("middleTrainingCount"))
            if (typeof message.middleTrainingCount === "number")
                object.middleTrainingCount = options.longs === String ? String(message.middleTrainingCount) : message.middleTrainingCount;
            else
                object.middleTrainingCount = options.longs === String ? $util.Long.prototype.toString.call(message.middleTrainingCount) : options.longs === Number ? new $util.LongBits(message.middleTrainingCount.low >>> 0, message.middleTrainingCount.high >>> 0).toNumber(true) : message.middleTrainingCount;
        if (message.seniorTrainingCount != null && message.hasOwnProperty("seniorTrainingCount"))
            if (typeof message.seniorTrainingCount === "number")
                object.seniorTrainingCount = options.longs === String ? String(message.seniorTrainingCount) : message.seniorTrainingCount;
            else
                object.seniorTrainingCount = options.longs === String ? $util.Long.prototype.toString.call(message.seniorTrainingCount) : options.longs === Number ? new $util.LongBits(message.seniorTrainingCount.low >>> 0, message.seniorTrainingCount.high >>> 0).toNumber(true) : message.seniorTrainingCount;
        return object;
    };

    /**
     * Converts this CSResponseGameInfo to JSON.
     * @function toJSON
     * @memberof CSResponseGameInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseGameInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseGameInfo;
})();

$root.CSUserInfo = (function() {

    /**
     * Properties of a CSUserInfo.
     * @exports ICSUserInfo
     * @interface ICSUserInfo
     * @property {number|Long} [uid] CSUserInfo uid
     * @property {number|Long} [chip] CSUserInfo chip
     * @property {number} [playTableCount] CSUserInfo playTableCount
     * @property {number} [playGameCount] CSUserInfo playGameCount
     * @property {number} [winCount] CSUserInfo winCount
     * @property {number} [betCount] CSUserInfo betCount
     * @property {number|Long} [juniorTrainingCount] CSUserInfo juniorTrainingCount
     * @property {number|Long} [middleTrainingCount] CSUserInfo middleTrainingCount
     * @property {number|Long} [seniorTrainingCount] CSUserInfo seniorTrainingCount
     */

    /**
     * Constructs a new CSUserInfo.
     * @exports CSUserInfo
     * @classdesc Represents a CSUserInfo.
     * @constructor
     * @param {ICSUserInfo=} [properties] Properties to set
     */
    function CSUserInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSUserInfo uid.
     * @member {number|Long}uid
     * @memberof CSUserInfo
     * @instance
     */
    CSUserInfo.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSUserInfo chip.
     * @member {number|Long}chip
     * @memberof CSUserInfo
     * @instance
     */
    CSUserInfo.prototype.chip = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSUserInfo playTableCount.
     * @member {number}playTableCount
     * @memberof CSUserInfo
     * @instance
     */
    CSUserInfo.prototype.playTableCount = 0;

    /**
     * CSUserInfo playGameCount.
     * @member {number}playGameCount
     * @memberof CSUserInfo
     * @instance
     */
    CSUserInfo.prototype.playGameCount = 0;

    /**
     * CSUserInfo winCount.
     * @member {number}winCount
     * @memberof CSUserInfo
     * @instance
     */
    CSUserInfo.prototype.winCount = 0;

    /**
     * CSUserInfo betCount.
     * @member {number}betCount
     * @memberof CSUserInfo
     * @instance
     */
    CSUserInfo.prototype.betCount = 0;

    /**
     * CSUserInfo juniorTrainingCount.
     * @member {number|Long}juniorTrainingCount
     * @memberof CSUserInfo
     * @instance
     */
    CSUserInfo.prototype.juniorTrainingCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSUserInfo middleTrainingCount.
     * @member {number|Long}middleTrainingCount
     * @memberof CSUserInfo
     * @instance
     */
    CSUserInfo.prototype.middleTrainingCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSUserInfo seniorTrainingCount.
     * @member {number|Long}seniorTrainingCount
     * @memberof CSUserInfo
     * @instance
     */
    CSUserInfo.prototype.seniorTrainingCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSUserInfo instance using the specified properties.
     * @function create
     * @memberof CSUserInfo
     * @static
     * @param {ICSUserInfo=} [properties] Properties to set
     * @returns {CSUserInfo} CSUserInfo instance
     */
    CSUserInfo.create = function create(properties) {
        return new CSUserInfo(properties);
    };

    /**
     * Encodes the specified CSUserInfo message. Does not implicitly {@link CSUserInfo.verify|verify} messages.
     * @function encode
     * @memberof CSUserInfo
     * @static
     * @param {ICSUserInfo} message CSUserInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSUserInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.playTableCount != null && message.hasOwnProperty("playTableCount"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.playTableCount);
        if (message.playGameCount != null && message.hasOwnProperty("playGameCount"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.playGameCount);
        if (message.winCount != null && message.hasOwnProperty("winCount"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.winCount);
        if (message.betCount != null && message.hasOwnProperty("betCount"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.betCount);
        if (message.juniorTrainingCount != null && message.hasOwnProperty("juniorTrainingCount"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.juniorTrainingCount);
        if (message.middleTrainingCount != null && message.hasOwnProperty("middleTrainingCount"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.middleTrainingCount);
        if (message.seniorTrainingCount != null && message.hasOwnProperty("seniorTrainingCount"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.seniorTrainingCount);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.uid);
        if (message.chip != null && message.hasOwnProperty("chip"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.chip);
        return writer;
    };

    /**
     * Encodes the specified CSUserInfo message, length delimited. Does not implicitly {@link CSUserInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSUserInfo
     * @static
     * @param {ICSUserInfo} message CSUserInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSUserInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSUserInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSUserInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSUserInfo} CSUserInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSUserInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSUserInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 8:
                message.uid = reader.uint64();
                break;
            case 9:
                message.chip = reader.uint64();
                break;
            case 1:
                message.playTableCount = reader.uint32();
                break;
            case 2:
                message.playGameCount = reader.uint32();
                break;
            case 3:
                message.winCount = reader.uint32();
                break;
            case 4:
                message.betCount = reader.uint32();
                break;
            case 5:
                message.juniorTrainingCount = reader.uint64();
                break;
            case 6:
                message.middleTrainingCount = reader.uint64();
                break;
            case 7:
                message.seniorTrainingCount = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSUserInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSUserInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSUserInfo} CSUserInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSUserInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSUserInfo message.
     * @function verify
     * @memberof CSUserInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSUserInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (!$util.isInteger(message.chip) && !(message.chip && $util.isInteger(message.chip.low) && $util.isInteger(message.chip.high)))
                return "chip: integer|Long expected";
        if (message.playTableCount != null && message.hasOwnProperty("playTableCount"))
            if (!$util.isInteger(message.playTableCount))
                return "playTableCount: integer expected";
        if (message.playGameCount != null && message.hasOwnProperty("playGameCount"))
            if (!$util.isInteger(message.playGameCount))
                return "playGameCount: integer expected";
        if (message.winCount != null && message.hasOwnProperty("winCount"))
            if (!$util.isInteger(message.winCount))
                return "winCount: integer expected";
        if (message.betCount != null && message.hasOwnProperty("betCount"))
            if (!$util.isInteger(message.betCount))
                return "betCount: integer expected";
        if (message.juniorTrainingCount != null && message.hasOwnProperty("juniorTrainingCount"))
            if (!$util.isInteger(message.juniorTrainingCount) && !(message.juniorTrainingCount && $util.isInteger(message.juniorTrainingCount.low) && $util.isInteger(message.juniorTrainingCount.high)))
                return "juniorTrainingCount: integer|Long expected";
        if (message.middleTrainingCount != null && message.hasOwnProperty("middleTrainingCount"))
            if (!$util.isInteger(message.middleTrainingCount) && !(message.middleTrainingCount && $util.isInteger(message.middleTrainingCount.low) && $util.isInteger(message.middleTrainingCount.high)))
                return "middleTrainingCount: integer|Long expected";
        if (message.seniorTrainingCount != null && message.hasOwnProperty("seniorTrainingCount"))
            if (!$util.isInteger(message.seniorTrainingCount) && !(message.seniorTrainingCount && $util.isInteger(message.seniorTrainingCount.low) && $util.isInteger(message.seniorTrainingCount.high)))
                return "seniorTrainingCount: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSUserInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSUserInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSUserInfo} CSUserInfo
     */
    CSUserInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSUserInfo)
            return object;
        var message = new $root.CSUserInfo();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.chip != null)
            if ($util.Long)
                (message.chip = $util.Long.fromValue(object.chip)).unsigned = true;
            else if (typeof object.chip === "string")
                message.chip = parseInt(object.chip, 10);
            else if (typeof object.chip === "number")
                message.chip = object.chip;
            else if (typeof object.chip === "object")
                message.chip = new $util.LongBits(object.chip.low >>> 0, object.chip.high >>> 0).toNumber(true);
        if (object.playTableCount != null)
            message.playTableCount = object.playTableCount >>> 0;
        if (object.playGameCount != null)
            message.playGameCount = object.playGameCount >>> 0;
        if (object.winCount != null)
            message.winCount = object.winCount >>> 0;
        if (object.betCount != null)
            message.betCount = object.betCount >>> 0;
        if (object.juniorTrainingCount != null)
            if ($util.Long)
                (message.juniorTrainingCount = $util.Long.fromValue(object.juniorTrainingCount)).unsigned = true;
            else if (typeof object.juniorTrainingCount === "string")
                message.juniorTrainingCount = parseInt(object.juniorTrainingCount, 10);
            else if (typeof object.juniorTrainingCount === "number")
                message.juniorTrainingCount = object.juniorTrainingCount;
            else if (typeof object.juniorTrainingCount === "object")
                message.juniorTrainingCount = new $util.LongBits(object.juniorTrainingCount.low >>> 0, object.juniorTrainingCount.high >>> 0).toNumber(true);
        if (object.middleTrainingCount != null)
            if ($util.Long)
                (message.middleTrainingCount = $util.Long.fromValue(object.middleTrainingCount)).unsigned = true;
            else if (typeof object.middleTrainingCount === "string")
                message.middleTrainingCount = parseInt(object.middleTrainingCount, 10);
            else if (typeof object.middleTrainingCount === "number")
                message.middleTrainingCount = object.middleTrainingCount;
            else if (typeof object.middleTrainingCount === "object")
                message.middleTrainingCount = new $util.LongBits(object.middleTrainingCount.low >>> 0, object.middleTrainingCount.high >>> 0).toNumber(true);
        if (object.seniorTrainingCount != null)
            if ($util.Long)
                (message.seniorTrainingCount = $util.Long.fromValue(object.seniorTrainingCount)).unsigned = true;
            else if (typeof object.seniorTrainingCount === "string")
                message.seniorTrainingCount = parseInt(object.seniorTrainingCount, 10);
            else if (typeof object.seniorTrainingCount === "number")
                message.seniorTrainingCount = object.seniorTrainingCount;
            else if (typeof object.seniorTrainingCount === "object")
                message.seniorTrainingCount = new $util.LongBits(object.seniorTrainingCount.low >>> 0, object.seniorTrainingCount.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSUserInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSUserInfo
     * @static
     * @param {CSUserInfo} message CSUserInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSUserInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.playTableCount = 0;
            object.playGameCount = 0;
            object.winCount = 0;
            object.betCount = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.juniorTrainingCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.juniorTrainingCount = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.middleTrainingCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.middleTrainingCount = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.seniorTrainingCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.seniorTrainingCount = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.chip = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.chip = options.longs === String ? "0" : 0;
        }
        if (message.playTableCount != null && message.hasOwnProperty("playTableCount"))
            object.playTableCount = message.playTableCount;
        if (message.playGameCount != null && message.hasOwnProperty("playGameCount"))
            object.playGameCount = message.playGameCount;
        if (message.winCount != null && message.hasOwnProperty("winCount"))
            object.winCount = message.winCount;
        if (message.betCount != null && message.hasOwnProperty("betCount"))
            object.betCount = message.betCount;
        if (message.juniorTrainingCount != null && message.hasOwnProperty("juniorTrainingCount"))
            if (typeof message.juniorTrainingCount === "number")
                object.juniorTrainingCount = options.longs === String ? String(message.juniorTrainingCount) : message.juniorTrainingCount;
            else
                object.juniorTrainingCount = options.longs === String ? $util.Long.prototype.toString.call(message.juniorTrainingCount) : options.longs === Number ? new $util.LongBits(message.juniorTrainingCount.low >>> 0, message.juniorTrainingCount.high >>> 0).toNumber(true) : message.juniorTrainingCount;
        if (message.middleTrainingCount != null && message.hasOwnProperty("middleTrainingCount"))
            if (typeof message.middleTrainingCount === "number")
                object.middleTrainingCount = options.longs === String ? String(message.middleTrainingCount) : message.middleTrainingCount;
            else
                object.middleTrainingCount = options.longs === String ? $util.Long.prototype.toString.call(message.middleTrainingCount) : options.longs === Number ? new $util.LongBits(message.middleTrainingCount.low >>> 0, message.middleTrainingCount.high >>> 0).toNumber(true) : message.middleTrainingCount;
        if (message.seniorTrainingCount != null && message.hasOwnProperty("seniorTrainingCount"))
            if (typeof message.seniorTrainingCount === "number")
                object.seniorTrainingCount = options.longs === String ? String(message.seniorTrainingCount) : message.seniorTrainingCount;
            else
                object.seniorTrainingCount = options.longs === String ? $util.Long.prototype.toString.call(message.seniorTrainingCount) : options.longs === Number ? new $util.LongBits(message.seniorTrainingCount.low >>> 0, message.seniorTrainingCount.high >>> 0).toNumber(true) : message.seniorTrainingCount;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (typeof message.chip === "number")
                object.chip = options.longs === String ? String(message.chip) : message.chip;
            else
                object.chip = options.longs === String ? $util.Long.prototype.toString.call(message.chip) : options.longs === Number ? new $util.LongBits(message.chip.low >>> 0, message.chip.high >>> 0).toNumber(true) : message.chip;
        return object;
    };

    /**
     * Converts this CSUserInfo to JSON.
     * @function toJSON
     * @memberof CSUserInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSUserInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSUserInfo;
})();

$root.CSRequestUserInfo = (function() {

    /**
     * Properties of a CSRequestUserInfo.
     * @exports ICSRequestUserInfo
     * @interface ICSRequestUserInfo
     * @property {Array.<number|Long>} [uids] CSRequestUserInfo uids
     */

    /**
     * Constructs a new CSRequestUserInfo.
     * @exports CSRequestUserInfo
     * @classdesc Represents a CSRequestUserInfo.
     * @constructor
     * @param {ICSRequestUserInfo=} [properties] Properties to set
     */
    function CSRequestUserInfo(properties) {
        this.uids = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestUserInfo uids.
     * @member {Array.<number|Long>}uids
     * @memberof CSRequestUserInfo
     * @instance
     */
    CSRequestUserInfo.prototype.uids = $util.emptyArray;

    /**
     * Creates a new CSRequestUserInfo instance using the specified properties.
     * @function create
     * @memberof CSRequestUserInfo
     * @static
     * @param {ICSRequestUserInfo=} [properties] Properties to set
     * @returns {CSRequestUserInfo} CSRequestUserInfo instance
     */
    CSRequestUserInfo.create = function create(properties) {
        return new CSRequestUserInfo(properties);
    };

    /**
     * Encodes the specified CSRequestUserInfo message. Does not implicitly {@link CSRequestUserInfo.verify|verify} messages.
     * @function encode
     * @memberof CSRequestUserInfo
     * @static
     * @param {ICSRequestUserInfo} message CSRequestUserInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestUserInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uids != null && message.uids.length)
            for (var i = 0; i < message.uids.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uids[i]);
        return writer;
    };

    /**
     * Encodes the specified CSRequestUserInfo message, length delimited. Does not implicitly {@link CSRequestUserInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestUserInfo
     * @static
     * @param {ICSRequestUserInfo} message CSRequestUserInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestUserInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestUserInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestUserInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestUserInfo} CSRequestUserInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestUserInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestUserInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.uids && message.uids.length))
                    message.uids = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.uids.push(reader.uint64());
                } else
                    message.uids.push(reader.uint64());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestUserInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestUserInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestUserInfo} CSRequestUserInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestUserInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestUserInfo message.
     * @function verify
     * @memberof CSRequestUserInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestUserInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uids != null && message.hasOwnProperty("uids")) {
            if (!Array.isArray(message.uids))
                return "uids: array expected";
            for (var i = 0; i < message.uids.length; ++i)
                if (!$util.isInteger(message.uids[i]) && !(message.uids[i] && $util.isInteger(message.uids[i].low) && $util.isInteger(message.uids[i].high)))
                    return "uids: integer|Long[] expected";
        }
        return null;
    };

    /**
     * Creates a CSRequestUserInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestUserInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestUserInfo} CSRequestUserInfo
     */
    CSRequestUserInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestUserInfo)
            return object;
        var message = new $root.CSRequestUserInfo();
        if (object.uids) {
            if (!Array.isArray(object.uids))
                throw TypeError(".CSRequestUserInfo.uids: array expected");
            message.uids = [];
            for (var i = 0; i < object.uids.length; ++i)
                if ($util.Long)
                    (message.uids[i] = $util.Long.fromValue(object.uids[i])).unsigned = true;
                else if (typeof object.uids[i] === "string")
                    message.uids[i] = parseInt(object.uids[i], 10);
                else if (typeof object.uids[i] === "number")
                    message.uids[i] = object.uids[i];
                else if (typeof object.uids[i] === "object")
                    message.uids[i] = new $util.LongBits(object.uids[i].low >>> 0, object.uids[i].high >>> 0).toNumber(true);
        }
        return message;
    };

    /**
     * Creates a plain object from a CSRequestUserInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestUserInfo
     * @static
     * @param {CSRequestUserInfo} message CSRequestUserInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestUserInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.uids = [];
        if (message.uids && message.uids.length) {
            object.uids = [];
            for (var j = 0; j < message.uids.length; ++j)
                if (typeof message.uids[j] === "number")
                    object.uids[j] = options.longs === String ? String(message.uids[j]) : message.uids[j];
                else
                    object.uids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uids[j]) : options.longs === Number ? new $util.LongBits(message.uids[j].low >>> 0, message.uids[j].high >>> 0).toNumber(true) : message.uids[j];
        }
        return object;
    };

    /**
     * Converts this CSRequestUserInfo to JSON.
     * @function toJSON
     * @memberof CSRequestUserInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestUserInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestUserInfo;
})();

$root.CSResponseUserInfo = (function() {

    /**
     * Properties of a CSResponseUserInfo.
     * @exports ICSResponseUserInfo
     * @interface ICSResponseUserInfo
     * @property {Array.<ICSUserInfo>} [infos] CSResponseUserInfo infos
     */

    /**
     * Constructs a new CSResponseUserInfo.
     * @exports CSResponseUserInfo
     * @classdesc Represents a CSResponseUserInfo.
     * @constructor
     * @param {ICSResponseUserInfo=} [properties] Properties to set
     */
    function CSResponseUserInfo(properties) {
        this.infos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseUserInfo infos.
     * @member {Array.<ICSUserInfo>}infos
     * @memberof CSResponseUserInfo
     * @instance
     */
    CSResponseUserInfo.prototype.infos = $util.emptyArray;

    /**
     * Creates a new CSResponseUserInfo instance using the specified properties.
     * @function create
     * @memberof CSResponseUserInfo
     * @static
     * @param {ICSResponseUserInfo=} [properties] Properties to set
     * @returns {CSResponseUserInfo} CSResponseUserInfo instance
     */
    CSResponseUserInfo.create = function create(properties) {
        return new CSResponseUserInfo(properties);
    };

    /**
     * Encodes the specified CSResponseUserInfo message. Does not implicitly {@link CSResponseUserInfo.verify|verify} messages.
     * @function encode
     * @memberof CSResponseUserInfo
     * @static
     * @param {ICSResponseUserInfo} message CSResponseUserInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseUserInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.infos != null && message.infos.length)
            for (var i = 0; i < message.infos.length; ++i)
                $root.CSUserInfo.encode(message.infos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSResponseUserInfo message, length delimited. Does not implicitly {@link CSResponseUserInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseUserInfo
     * @static
     * @param {ICSResponseUserInfo} message CSResponseUserInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseUserInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseUserInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseUserInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseUserInfo} CSResponseUserInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseUserInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseUserInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                if (!(message.infos && message.infos.length))
                    message.infos = [];
                message.infos.push($root.CSUserInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseUserInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseUserInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseUserInfo} CSResponseUserInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseUserInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseUserInfo message.
     * @function verify
     * @memberof CSResponseUserInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseUserInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.infos != null && message.hasOwnProperty("infos")) {
            if (!Array.isArray(message.infos))
                return "infos: array expected";
            for (var i = 0; i < message.infos.length; ++i) {
                var error = $root.CSUserInfo.verify(message.infos[i]);
                if (error)
                    return "infos." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSResponseUserInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseUserInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseUserInfo} CSResponseUserInfo
     */
    CSResponseUserInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseUserInfo)
            return object;
        var message = new $root.CSResponseUserInfo();
        if (object.infos) {
            if (!Array.isArray(object.infos))
                throw TypeError(".CSResponseUserInfo.infos: array expected");
            message.infos = [];
            for (var i = 0; i < object.infos.length; ++i) {
                if (typeof object.infos[i] !== "object")
                    throw TypeError(".CSResponseUserInfo.infos: object expected");
                message.infos[i] = $root.CSUserInfo.fromObject(object.infos[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseUserInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseUserInfo
     * @static
     * @param {CSResponseUserInfo} message CSResponseUserInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseUserInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.infos = [];
        if (message.infos && message.infos.length) {
            object.infos = [];
            for (var j = 0; j < message.infos.length; ++j)
                object.infos[j] = $root.CSUserInfo.toObject(message.infos[j], options);
        }
        return object;
    };

    /**
     * Converts this CSResponseUserInfo to JSON.
     * @function toJSON
     * @memberof CSResponseUserInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseUserInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseUserInfo;
})();

$root.CSNotifyRaiseBlind = (function() {

    /**
     * Properties of a CSNotifyRaiseBlind.
     * @exports ICSNotifyRaiseBlind
     * @interface ICSNotifyRaiseBlind
     * @property {number|Long} [smallBlind] CSNotifyRaiseBlind smallBlind
     * @property {number} [nextTime] CSNotifyRaiseBlind nextTime
     * @property {number|Long} [preBet] CSNotifyRaiseBlind preBet
     */

    /**
     * Constructs a new CSNotifyRaiseBlind.
     * @exports CSNotifyRaiseBlind
     * @classdesc Represents a CSNotifyRaiseBlind.
     * @constructor
     * @param {ICSNotifyRaiseBlind=} [properties] Properties to set
     */
    function CSNotifyRaiseBlind(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyRaiseBlind smallBlind.
     * @member {number|Long}smallBlind
     * @memberof CSNotifyRaiseBlind
     * @instance
     */
    CSNotifyRaiseBlind.prototype.smallBlind = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSNotifyRaiseBlind nextTime.
     * @member {number}nextTime
     * @memberof CSNotifyRaiseBlind
     * @instance
     */
    CSNotifyRaiseBlind.prototype.nextTime = 0;

    /**
     * CSNotifyRaiseBlind preBet.
     * @member {number|Long}preBet
     * @memberof CSNotifyRaiseBlind
     * @instance
     */
    CSNotifyRaiseBlind.prototype.preBet = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSNotifyRaiseBlind instance using the specified properties.
     * @function create
     * @memberof CSNotifyRaiseBlind
     * @static
     * @param {ICSNotifyRaiseBlind=} [properties] Properties to set
     * @returns {CSNotifyRaiseBlind} CSNotifyRaiseBlind instance
     */
    CSNotifyRaiseBlind.create = function create(properties) {
        return new CSNotifyRaiseBlind(properties);
    };

    /**
     * Encodes the specified CSNotifyRaiseBlind message. Does not implicitly {@link CSNotifyRaiseBlind.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyRaiseBlind
     * @static
     * @param {ICSNotifyRaiseBlind} message CSNotifyRaiseBlind message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyRaiseBlind.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.smallBlind);
        if (message.nextTime != null && message.hasOwnProperty("nextTime"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.nextTime);
        if (message.preBet != null && message.hasOwnProperty("preBet"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.preBet);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyRaiseBlind message, length delimited. Does not implicitly {@link CSNotifyRaiseBlind.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyRaiseBlind
     * @static
     * @param {ICSNotifyRaiseBlind} message CSNotifyRaiseBlind message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyRaiseBlind.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyRaiseBlind message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyRaiseBlind
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyRaiseBlind} CSNotifyRaiseBlind
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyRaiseBlind.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyRaiseBlind();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.smallBlind = reader.uint64();
                break;
            case 2:
                message.nextTime = reader.uint32();
                break;
            case 3:
                message.preBet = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyRaiseBlind message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyRaiseBlind
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyRaiseBlind} CSNotifyRaiseBlind
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyRaiseBlind.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyRaiseBlind message.
     * @function verify
     * @memberof CSNotifyRaiseBlind
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyRaiseBlind.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            if (!$util.isInteger(message.smallBlind) && !(message.smallBlind && $util.isInteger(message.smallBlind.low) && $util.isInteger(message.smallBlind.high)))
                return "smallBlind: integer|Long expected";
        if (message.nextTime != null && message.hasOwnProperty("nextTime"))
            if (!$util.isInteger(message.nextTime))
                return "nextTime: integer expected";
        if (message.preBet != null && message.hasOwnProperty("preBet"))
            if (!$util.isInteger(message.preBet) && !(message.preBet && $util.isInteger(message.preBet.low) && $util.isInteger(message.preBet.high)))
                return "preBet: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSNotifyRaiseBlind message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyRaiseBlind
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyRaiseBlind} CSNotifyRaiseBlind
     */
    CSNotifyRaiseBlind.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyRaiseBlind)
            return object;
        var message = new $root.CSNotifyRaiseBlind();
        if (object.smallBlind != null)
            if ($util.Long)
                (message.smallBlind = $util.Long.fromValue(object.smallBlind)).unsigned = true;
            else if (typeof object.smallBlind === "string")
                message.smallBlind = parseInt(object.smallBlind, 10);
            else if (typeof object.smallBlind === "number")
                message.smallBlind = object.smallBlind;
            else if (typeof object.smallBlind === "object")
                message.smallBlind = new $util.LongBits(object.smallBlind.low >>> 0, object.smallBlind.high >>> 0).toNumber(true);
        if (object.nextTime != null)
            message.nextTime = object.nextTime >>> 0;
        if (object.preBet != null)
            if ($util.Long)
                (message.preBet = $util.Long.fromValue(object.preBet)).unsigned = true;
            else if (typeof object.preBet === "string")
                message.preBet = parseInt(object.preBet, 10);
            else if (typeof object.preBet === "number")
                message.preBet = object.preBet;
            else if (typeof object.preBet === "object")
                message.preBet = new $util.LongBits(object.preBet.low >>> 0, object.preBet.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyRaiseBlind message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyRaiseBlind
     * @static
     * @param {CSNotifyRaiseBlind} message CSNotifyRaiseBlind
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyRaiseBlind.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.smallBlind = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.smallBlind = options.longs === String ? "0" : 0;
            object.nextTime = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.preBet = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.preBet = options.longs === String ? "0" : 0;
        }
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            if (typeof message.smallBlind === "number")
                object.smallBlind = options.longs === String ? String(message.smallBlind) : message.smallBlind;
            else
                object.smallBlind = options.longs === String ? $util.Long.prototype.toString.call(message.smallBlind) : options.longs === Number ? new $util.LongBits(message.smallBlind.low >>> 0, message.smallBlind.high >>> 0).toNumber(true) : message.smallBlind;
        if (message.nextTime != null && message.hasOwnProperty("nextTime"))
            object.nextTime = message.nextTime;
        if (message.preBet != null && message.hasOwnProperty("preBet"))
            if (typeof message.preBet === "number")
                object.preBet = options.longs === String ? String(message.preBet) : message.preBet;
            else
                object.preBet = options.longs === String ? $util.Long.prototype.toString.call(message.preBet) : options.longs === Number ? new $util.LongBits(message.preBet.low >>> 0, message.preBet.high >>> 0).toNumber(true) : message.preBet;
        return object;
    };

    /**
     * Converts this CSNotifyRaiseBlind to JSON.
     * @function toJSON
     * @memberof CSNotifyRaiseBlind
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyRaiseBlind.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyRaiseBlind;
})();

$root.CSNotifySngRank = (function() {

    /**
     * Properties of a CSNotifySngRank.
     * @exports ICSNotifySngRank
     * @interface ICSNotifySngRank
     * @property {number} [rank] CSNotifySngRank rank
     */

    /**
     * Constructs a new CSNotifySngRank.
     * @exports CSNotifySngRank
     * @classdesc Represents a CSNotifySngRank.
     * @constructor
     * @param {ICSNotifySngRank=} [properties] Properties to set
     */
    function CSNotifySngRank(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifySngRank rank.
     * @member {number}rank
     * @memberof CSNotifySngRank
     * @instance
     */
    CSNotifySngRank.prototype.rank = 0;

    /**
     * Creates a new CSNotifySngRank instance using the specified properties.
     * @function create
     * @memberof CSNotifySngRank
     * @static
     * @param {ICSNotifySngRank=} [properties] Properties to set
     * @returns {CSNotifySngRank} CSNotifySngRank instance
     */
    CSNotifySngRank.create = function create(properties) {
        return new CSNotifySngRank(properties);
    };

    /**
     * Encodes the specified CSNotifySngRank message. Does not implicitly {@link CSNotifySngRank.verify|verify} messages.
     * @function encode
     * @memberof CSNotifySngRank
     * @static
     * @param {ICSNotifySngRank} message CSNotifySngRank message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifySngRank.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.rank != null && message.hasOwnProperty("rank"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rank);
        return writer;
    };

    /**
     * Encodes the specified CSNotifySngRank message, length delimited. Does not implicitly {@link CSNotifySngRank.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifySngRank
     * @static
     * @param {ICSNotifySngRank} message CSNotifySngRank message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifySngRank.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifySngRank message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifySngRank
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifySngRank} CSNotifySngRank
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifySngRank.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifySngRank();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.rank = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifySngRank message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifySngRank
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifySngRank} CSNotifySngRank
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifySngRank.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifySngRank message.
     * @function verify
     * @memberof CSNotifySngRank
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifySngRank.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.rank != null && message.hasOwnProperty("rank"))
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
        return null;
    };

    /**
     * Creates a CSNotifySngRank message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifySngRank
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifySngRank} CSNotifySngRank
     */
    CSNotifySngRank.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifySngRank)
            return object;
        var message = new $root.CSNotifySngRank();
        if (object.rank != null)
            message.rank = object.rank >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSNotifySngRank message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifySngRank
     * @static
     * @param {CSNotifySngRank} message CSNotifySngRank
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifySngRank.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.rank = 0;
        if (message.rank != null && message.hasOwnProperty("rank"))
            object.rank = message.rank;
        return object;
    };

    /**
     * Converts this CSNotifySngRank to JSON.
     * @function toJSON
     * @memberof CSNotifySngRank
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifySngRank.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifySngRank;
})();

$root.CSRequestTuoGuan = (function() {

    /**
     * Properties of a CSRequestTuoGuan.
     * @exports ICSRequestTuoGuan
     * @interface ICSRequestTuoGuan
     * @property {number|Long} [playerUid] CSRequestTuoGuan playerUid
     * @property {boolean} [isTuoguan] CSRequestTuoGuan isTuoguan
     */

    /**
     * Constructs a new CSRequestTuoGuan.
     * @exports CSRequestTuoGuan
     * @classdesc Represents a CSRequestTuoGuan.
     * @constructor
     * @param {ICSRequestTuoGuan=} [properties] Properties to set
     */
    function CSRequestTuoGuan(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestTuoGuan playerUid.
     * @member {number|Long}playerUid
     * @memberof CSRequestTuoGuan
     * @instance
     */
    CSRequestTuoGuan.prototype.playerUid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSRequestTuoGuan isTuoguan.
     * @member {boolean}isTuoguan
     * @memberof CSRequestTuoGuan
     * @instance
     */
    CSRequestTuoGuan.prototype.isTuoguan = false;

    /**
     * Creates a new CSRequestTuoGuan instance using the specified properties.
     * @function create
     * @memberof CSRequestTuoGuan
     * @static
     * @param {ICSRequestTuoGuan=} [properties] Properties to set
     * @returns {CSRequestTuoGuan} CSRequestTuoGuan instance
     */
    CSRequestTuoGuan.create = function create(properties) {
        return new CSRequestTuoGuan(properties);
    };

    /**
     * Encodes the specified CSRequestTuoGuan message. Does not implicitly {@link CSRequestTuoGuan.verify|verify} messages.
     * @function encode
     * @memberof CSRequestTuoGuan
     * @static
     * @param {ICSRequestTuoGuan} message CSRequestTuoGuan message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTuoGuan.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.playerUid);
        if (message.isTuoguan != null && message.hasOwnProperty("isTuoguan"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isTuoguan);
        return writer;
    };

    /**
     * Encodes the specified CSRequestTuoGuan message, length delimited. Does not implicitly {@link CSRequestTuoGuan.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestTuoGuan
     * @static
     * @param {ICSRequestTuoGuan} message CSRequestTuoGuan message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestTuoGuan.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestTuoGuan message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestTuoGuan
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestTuoGuan} CSRequestTuoGuan
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTuoGuan.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestTuoGuan();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.playerUid = reader.uint64();
                break;
            case 2:
                message.isTuoguan = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestTuoGuan message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestTuoGuan
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestTuoGuan} CSRequestTuoGuan
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestTuoGuan.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestTuoGuan message.
     * @function verify
     * @memberof CSRequestTuoGuan
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestTuoGuan.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            if (!$util.isInteger(message.playerUid) && !(message.playerUid && $util.isInteger(message.playerUid.low) && $util.isInteger(message.playerUid.high)))
                return "playerUid: integer|Long expected";
        if (message.isTuoguan != null && message.hasOwnProperty("isTuoguan"))
            if (typeof message.isTuoguan !== "boolean")
                return "isTuoguan: boolean expected";
        return null;
    };

    /**
     * Creates a CSRequestTuoGuan message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestTuoGuan
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestTuoGuan} CSRequestTuoGuan
     */
    CSRequestTuoGuan.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestTuoGuan)
            return object;
        var message = new $root.CSRequestTuoGuan();
        if (object.playerUid != null)
            if ($util.Long)
                (message.playerUid = $util.Long.fromValue(object.playerUid)).unsigned = true;
            else if (typeof object.playerUid === "string")
                message.playerUid = parseInt(object.playerUid, 10);
            else if (typeof object.playerUid === "number")
                message.playerUid = object.playerUid;
            else if (typeof object.playerUid === "object")
                message.playerUid = new $util.LongBits(object.playerUid.low >>> 0, object.playerUid.high >>> 0).toNumber(true);
        if (object.isTuoguan != null)
            message.isTuoguan = Boolean(object.isTuoguan);
        return message;
    };

    /**
     * Creates a plain object from a CSRequestTuoGuan message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestTuoGuan
     * @static
     * @param {CSRequestTuoGuan} message CSRequestTuoGuan
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestTuoGuan.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.playerUid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.playerUid = options.longs === String ? "0" : 0;
            object.isTuoguan = false;
        }
        if (message.playerUid != null && message.hasOwnProperty("playerUid"))
            if (typeof message.playerUid === "number")
                object.playerUid = options.longs === String ? String(message.playerUid) : message.playerUid;
            else
                object.playerUid = options.longs === String ? $util.Long.prototype.toString.call(message.playerUid) : options.longs === Number ? new $util.LongBits(message.playerUid.low >>> 0, message.playerUid.high >>> 0).toNumber(true) : message.playerUid;
        if (message.isTuoguan != null && message.hasOwnProperty("isTuoguan"))
            object.isTuoguan = message.isTuoguan;
        return object;
    };

    /**
     * Converts this CSRequestTuoGuan to JSON.
     * @function toJSON
     * @memberof CSRequestTuoGuan
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestTuoGuan.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestTuoGuan;
})();

$root.CSResponseTuoGuan = (function() {

    /**
     * Properties of a CSResponseTuoGuan.
     * @exports ICSResponseTuoGuan
     * @interface ICSResponseTuoGuan
     * @property {ENMessageError} [result] CSResponseTuoGuan result
     */

    /**
     * Constructs a new CSResponseTuoGuan.
     * @exports CSResponseTuoGuan
     * @classdesc Represents a CSResponseTuoGuan.
     * @constructor
     * @param {ICSResponseTuoGuan=} [properties] Properties to set
     */
    function CSResponseTuoGuan(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseTuoGuan result.
     * @member {ENMessageError}result
     * @memberof CSResponseTuoGuan
     * @instance
     */
    CSResponseTuoGuan.prototype.result = 0;

    /**
     * Creates a new CSResponseTuoGuan instance using the specified properties.
     * @function create
     * @memberof CSResponseTuoGuan
     * @static
     * @param {ICSResponseTuoGuan=} [properties] Properties to set
     * @returns {CSResponseTuoGuan} CSResponseTuoGuan instance
     */
    CSResponseTuoGuan.create = function create(properties) {
        return new CSResponseTuoGuan(properties);
    };

    /**
     * Encodes the specified CSResponseTuoGuan message. Does not implicitly {@link CSResponseTuoGuan.verify|verify} messages.
     * @function encode
     * @memberof CSResponseTuoGuan
     * @static
     * @param {ICSResponseTuoGuan} message CSResponseTuoGuan message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTuoGuan.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified CSResponseTuoGuan message, length delimited. Does not implicitly {@link CSResponseTuoGuan.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseTuoGuan
     * @static
     * @param {ICSResponseTuoGuan} message CSResponseTuoGuan message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseTuoGuan.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseTuoGuan message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseTuoGuan
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseTuoGuan} CSResponseTuoGuan
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTuoGuan.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseTuoGuan();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseTuoGuan message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseTuoGuan
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseTuoGuan} CSResponseTuoGuan
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseTuoGuan.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseTuoGuan message.
     * @function verify
     * @memberof CSResponseTuoGuan
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseTuoGuan.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        return null;
    };

    /**
     * Creates a CSResponseTuoGuan message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseTuoGuan
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseTuoGuan} CSResponseTuoGuan
     */
    CSResponseTuoGuan.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseTuoGuan)
            return object;
        var message = new $root.CSResponseTuoGuan();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseTuoGuan message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseTuoGuan
     * @static
     * @param {CSResponseTuoGuan} message CSResponseTuoGuan
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseTuoGuan.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        return object;
    };

    /**
     * Converts this CSResponseTuoGuan to JSON.
     * @function toJSON
     * @memberof CSResponseTuoGuan
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseTuoGuan.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseTuoGuan;
})();

$root.CSNotifyTuoGuan = (function() {

    /**
     * Properties of a CSNotifyTuoGuan.
     * @exports ICSNotifyTuoGuan
     * @interface ICSNotifyTuoGuan
     * @property {number} [index] CSNotifyTuoGuan index
     * @property {boolean} [isTuoguan] CSNotifyTuoGuan isTuoguan
     */

    /**
     * Constructs a new CSNotifyTuoGuan.
     * @exports CSNotifyTuoGuan
     * @classdesc Represents a CSNotifyTuoGuan.
     * @constructor
     * @param {ICSNotifyTuoGuan=} [properties] Properties to set
     */
    function CSNotifyTuoGuan(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyTuoGuan index.
     * @member {number}index
     * @memberof CSNotifyTuoGuan
     * @instance
     */
    CSNotifyTuoGuan.prototype.index = 0;

    /**
     * CSNotifyTuoGuan isTuoguan.
     * @member {boolean}isTuoguan
     * @memberof CSNotifyTuoGuan
     * @instance
     */
    CSNotifyTuoGuan.prototype.isTuoguan = false;

    /**
     * Creates a new CSNotifyTuoGuan instance using the specified properties.
     * @function create
     * @memberof CSNotifyTuoGuan
     * @static
     * @param {ICSNotifyTuoGuan=} [properties] Properties to set
     * @returns {CSNotifyTuoGuan} CSNotifyTuoGuan instance
     */
    CSNotifyTuoGuan.create = function create(properties) {
        return new CSNotifyTuoGuan(properties);
    };

    /**
     * Encodes the specified CSNotifyTuoGuan message. Does not implicitly {@link CSNotifyTuoGuan.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyTuoGuan
     * @static
     * @param {ICSNotifyTuoGuan} message CSNotifyTuoGuan message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyTuoGuan.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
        if (message.isTuoguan != null && message.hasOwnProperty("isTuoguan"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isTuoguan);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyTuoGuan message, length delimited. Does not implicitly {@link CSNotifyTuoGuan.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyTuoGuan
     * @static
     * @param {ICSNotifyTuoGuan} message CSNotifyTuoGuan message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyTuoGuan.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyTuoGuan message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyTuoGuan
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyTuoGuan} CSNotifyTuoGuan
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyTuoGuan.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyTuoGuan();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.index = reader.uint32();
                break;
            case 2:
                message.isTuoguan = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyTuoGuan message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyTuoGuan
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyTuoGuan} CSNotifyTuoGuan
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyTuoGuan.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyTuoGuan message.
     * @function verify
     * @memberof CSNotifyTuoGuan
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyTuoGuan.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        if (message.isTuoguan != null && message.hasOwnProperty("isTuoguan"))
            if (typeof message.isTuoguan !== "boolean")
                return "isTuoguan: boolean expected";
        return null;
    };

    /**
     * Creates a CSNotifyTuoGuan message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyTuoGuan
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyTuoGuan} CSNotifyTuoGuan
     */
    CSNotifyTuoGuan.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyTuoGuan)
            return object;
        var message = new $root.CSNotifyTuoGuan();
        if (object.index != null)
            message.index = object.index >>> 0;
        if (object.isTuoguan != null)
            message.isTuoguan = Boolean(object.isTuoguan);
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyTuoGuan message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyTuoGuan
     * @static
     * @param {CSNotifyTuoGuan} message CSNotifyTuoGuan
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyTuoGuan.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.index = 0;
            object.isTuoguan = false;
        }
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.isTuoguan != null && message.hasOwnProperty("isTuoguan"))
            object.isTuoguan = message.isTuoguan;
        return object;
    };

    /**
     * Converts this CSNotifyTuoGuan to JSON.
     * @function toJSON
     * @memberof CSNotifyTuoGuan
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyTuoGuan.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyTuoGuan;
})();

$root.CSPlayerCards = (function() {

    /**
     * Properties of a CSPlayerCards.
     * @exports ICSPlayerCards
     * @interface ICSPlayerCards
     * @property {number} [index] CSPlayerCards index
     * @property {Array.<number>} [cards] CSPlayerCards cards
     */

    /**
     * Constructs a new CSPlayerCards.
     * @exports CSPlayerCards
     * @classdesc Represents a CSPlayerCards.
     * @constructor
     * @param {ICSPlayerCards=} [properties] Properties to set
     */
    function CSPlayerCards(properties) {
        this.cards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSPlayerCards index.
     * @member {number}index
     * @memberof CSPlayerCards
     * @instance
     */
    CSPlayerCards.prototype.index = 0;

    /**
     * CSPlayerCards cards.
     * @member {Array.<number>}cards
     * @memberof CSPlayerCards
     * @instance
     */
    CSPlayerCards.prototype.cards = $util.emptyArray;

    /**
     * Creates a new CSPlayerCards instance using the specified properties.
     * @function create
     * @memberof CSPlayerCards
     * @static
     * @param {ICSPlayerCards=} [properties] Properties to set
     * @returns {CSPlayerCards} CSPlayerCards instance
     */
    CSPlayerCards.create = function create(properties) {
        return new CSPlayerCards(properties);
    };

    /**
     * Encodes the specified CSPlayerCards message. Does not implicitly {@link CSPlayerCards.verify|verify} messages.
     * @function encode
     * @memberof CSPlayerCards
     * @static
     * @param {ICSPlayerCards} message CSPlayerCards message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSPlayerCards.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
        if (message.cards != null && message.cards.length)
            for (var i = 0; i < message.cards.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cards[i]);
        return writer;
    };

    /**
     * Encodes the specified CSPlayerCards message, length delimited. Does not implicitly {@link CSPlayerCards.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSPlayerCards
     * @static
     * @param {ICSPlayerCards} message CSPlayerCards message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSPlayerCards.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSPlayerCards message from the specified reader or buffer.
     * @function decode
     * @memberof CSPlayerCards
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSPlayerCards} CSPlayerCards
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSPlayerCards.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSPlayerCards();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.index = reader.uint32();
                break;
            case 2:
                if (!(message.cards && message.cards.length))
                    message.cards = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cards.push(reader.uint32());
                } else
                    message.cards.push(reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSPlayerCards message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSPlayerCards
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSPlayerCards} CSPlayerCards
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSPlayerCards.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSPlayerCards message.
     * @function verify
     * @memberof CSPlayerCards
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSPlayerCards.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        if (message.cards != null && message.hasOwnProperty("cards")) {
            if (!Array.isArray(message.cards))
                return "cards: array expected";
            for (var i = 0; i < message.cards.length; ++i)
                if (!$util.isInteger(message.cards[i]))
                    return "cards: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a CSPlayerCards message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSPlayerCards
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSPlayerCards} CSPlayerCards
     */
    CSPlayerCards.fromObject = function fromObject(object) {
        if (object instanceof $root.CSPlayerCards)
            return object;
        var message = new $root.CSPlayerCards();
        if (object.index != null)
            message.index = object.index >>> 0;
        if (object.cards) {
            if (!Array.isArray(object.cards))
                throw TypeError(".CSPlayerCards.cards: array expected");
            message.cards = [];
            for (var i = 0; i < object.cards.length; ++i)
                message.cards[i] = object.cards[i] >>> 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a CSPlayerCards message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSPlayerCards
     * @static
     * @param {CSPlayerCards} message CSPlayerCards
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSPlayerCards.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.cards = [];
        if (options.defaults)
            object.index = 0;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.cards && message.cards.length) {
            object.cards = [];
            for (var j = 0; j < message.cards.length; ++j)
                object.cards[j] = message.cards[j];
        }
        return object;
    };

    /**
     * Converts this CSPlayerCards to JSON.
     * @function toJSON
     * @memberof CSPlayerCards
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSPlayerCards.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSPlayerCards;
})();

$root.CSNotifyPlayerCards = (function() {

    /**
     * Properties of a CSNotifyPlayerCards.
     * @exports ICSNotifyPlayerCards
     * @interface ICSNotifyPlayerCards
     * @property {Array.<ICSPlayerCards>} [cards] CSNotifyPlayerCards cards
     */

    /**
     * Constructs a new CSNotifyPlayerCards.
     * @exports CSNotifyPlayerCards
     * @classdesc Represents a CSNotifyPlayerCards.
     * @constructor
     * @param {ICSNotifyPlayerCards=} [properties] Properties to set
     */
    function CSNotifyPlayerCards(properties) {
        this.cards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyPlayerCards cards.
     * @member {Array.<ICSPlayerCards>}cards
     * @memberof CSNotifyPlayerCards
     * @instance
     */
    CSNotifyPlayerCards.prototype.cards = $util.emptyArray;

    /**
     * Creates a new CSNotifyPlayerCards instance using the specified properties.
     * @function create
     * @memberof CSNotifyPlayerCards
     * @static
     * @param {ICSNotifyPlayerCards=} [properties] Properties to set
     * @returns {CSNotifyPlayerCards} CSNotifyPlayerCards instance
     */
    CSNotifyPlayerCards.create = function create(properties) {
        return new CSNotifyPlayerCards(properties);
    };

    /**
     * Encodes the specified CSNotifyPlayerCards message. Does not implicitly {@link CSNotifyPlayerCards.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyPlayerCards
     * @static
     * @param {ICSNotifyPlayerCards} message CSNotifyPlayerCards message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyPlayerCards.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cards != null && message.cards.length)
            for (var i = 0; i < message.cards.length; ++i)
                $root.CSPlayerCards.encode(message.cards[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified CSNotifyPlayerCards message, length delimited. Does not implicitly {@link CSNotifyPlayerCards.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyPlayerCards
     * @static
     * @param {ICSNotifyPlayerCards} message CSNotifyPlayerCards message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyPlayerCards.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyPlayerCards message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyPlayerCards
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyPlayerCards} CSNotifyPlayerCards
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyPlayerCards.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyPlayerCards();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.cards && message.cards.length))
                    message.cards = [];
                message.cards.push($root.CSPlayerCards.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyPlayerCards message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyPlayerCards
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyPlayerCards} CSNotifyPlayerCards
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyPlayerCards.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyPlayerCards message.
     * @function verify
     * @memberof CSNotifyPlayerCards
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyPlayerCards.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cards != null && message.hasOwnProperty("cards")) {
            if (!Array.isArray(message.cards))
                return "cards: array expected";
            for (var i = 0; i < message.cards.length; ++i) {
                var error = $root.CSPlayerCards.verify(message.cards[i]);
                if (error)
                    return "cards." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSNotifyPlayerCards message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyPlayerCards
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyPlayerCards} CSNotifyPlayerCards
     */
    CSNotifyPlayerCards.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyPlayerCards)
            return object;
        var message = new $root.CSNotifyPlayerCards();
        if (object.cards) {
            if (!Array.isArray(object.cards))
                throw TypeError(".CSNotifyPlayerCards.cards: array expected");
            message.cards = [];
            for (var i = 0; i < object.cards.length; ++i) {
                if (typeof object.cards[i] !== "object")
                    throw TypeError(".CSNotifyPlayerCards.cards: object expected");
                message.cards[i] = $root.CSPlayerCards.fromObject(object.cards[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyPlayerCards message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyPlayerCards
     * @static
     * @param {CSNotifyPlayerCards} message CSNotifyPlayerCards
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyPlayerCards.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.cards = [];
        if (message.cards && message.cards.length) {
            object.cards = [];
            for (var j = 0; j < message.cards.length; ++j)
                object.cards[j] = $root.CSPlayerCards.toObject(message.cards[j], options);
        }
        return object;
    };

    /**
     * Converts this CSNotifyPlayerCards to JSON.
     * @function toJSON
     * @memberof CSNotifyPlayerCards
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyPlayerCards.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyPlayerCards;
})();

$root.CSRequestShowCards = (function() {

    /**
     * Properties of a CSRequestShowCards.
     * @exports ICSRequestShowCards
     * @interface ICSRequestShowCards
     * @property {boolean} [show1] CSRequestShowCards show1
     * @property {boolean} [show2] CSRequestShowCards show2
     */

    /**
     * Constructs a new CSRequestShowCards.
     * @exports CSRequestShowCards
     * @classdesc Represents a CSRequestShowCards.
     * @constructor
     * @param {ICSRequestShowCards=} [properties] Properties to set
     */
    function CSRequestShowCards(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestShowCards show1.
     * @member {boolean}show1
     * @memberof CSRequestShowCards
     * @instance
     */
    CSRequestShowCards.prototype.show1 = false;

    /**
     * CSRequestShowCards show2.
     * @member {boolean}show2
     * @memberof CSRequestShowCards
     * @instance
     */
    CSRequestShowCards.prototype.show2 = false;

    /**
     * Creates a new CSRequestShowCards instance using the specified properties.
     * @function create
     * @memberof CSRequestShowCards
     * @static
     * @param {ICSRequestShowCards=} [properties] Properties to set
     * @returns {CSRequestShowCards} CSRequestShowCards instance
     */
    CSRequestShowCards.create = function create(properties) {
        return new CSRequestShowCards(properties);
    };

    /**
     * Encodes the specified CSRequestShowCards message. Does not implicitly {@link CSRequestShowCards.verify|verify} messages.
     * @function encode
     * @memberof CSRequestShowCards
     * @static
     * @param {ICSRequestShowCards} message CSRequestShowCards message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestShowCards.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.show1 != null && message.hasOwnProperty("show1"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.show1);
        if (message.show2 != null && message.hasOwnProperty("show2"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.show2);
        return writer;
    };

    /**
     * Encodes the specified CSRequestShowCards message, length delimited. Does not implicitly {@link CSRequestShowCards.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestShowCards
     * @static
     * @param {ICSRequestShowCards} message CSRequestShowCards message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestShowCards.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestShowCards message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestShowCards
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestShowCards} CSRequestShowCards
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestShowCards.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestShowCards();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.show1 = reader.bool();
                break;
            case 2:
                message.show2 = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestShowCards message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestShowCards
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestShowCards} CSRequestShowCards
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestShowCards.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestShowCards message.
     * @function verify
     * @memberof CSRequestShowCards
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestShowCards.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.show1 != null && message.hasOwnProperty("show1"))
            if (typeof message.show1 !== "boolean")
                return "show1: boolean expected";
        if (message.show2 != null && message.hasOwnProperty("show2"))
            if (typeof message.show2 !== "boolean")
                return "show2: boolean expected";
        return null;
    };

    /**
     * Creates a CSRequestShowCards message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestShowCards
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestShowCards} CSRequestShowCards
     */
    CSRequestShowCards.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestShowCards)
            return object;
        var message = new $root.CSRequestShowCards();
        if (object.show1 != null)
            message.show1 = Boolean(object.show1);
        if (object.show2 != null)
            message.show2 = Boolean(object.show2);
        return message;
    };

    /**
     * Creates a plain object from a CSRequestShowCards message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestShowCards
     * @static
     * @param {CSRequestShowCards} message CSRequestShowCards
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestShowCards.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.show1 = false;
            object.show2 = false;
        }
        if (message.show1 != null && message.hasOwnProperty("show1"))
            object.show1 = message.show1;
        if (message.show2 != null && message.hasOwnProperty("show2"))
            object.show2 = message.show2;
        return object;
    };

    /**
     * Converts this CSRequestShowCards to JSON.
     * @function toJSON
     * @memberof CSRequestShowCards
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestShowCards.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestShowCards;
})();

$root.CSNotifyShowCards = (function() {

    /**
     * Properties of a CSNotifyShowCards.
     * @exports ICSNotifyShowCards
     * @interface ICSNotifyShowCards
     * @property {number} [card1] CSNotifyShowCards card1
     * @property {number} [card2] CSNotifyShowCards card2
     * @property {number} [index] CSNotifyShowCards index
     */

    /**
     * Constructs a new CSNotifyShowCards.
     * @exports CSNotifyShowCards
     * @classdesc Represents a CSNotifyShowCards.
     * @constructor
     * @param {ICSNotifyShowCards=} [properties] Properties to set
     */
    function CSNotifyShowCards(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyShowCards card1.
     * @member {number}card1
     * @memberof CSNotifyShowCards
     * @instance
     */
    CSNotifyShowCards.prototype.card1 = 0;

    /**
     * CSNotifyShowCards card2.
     * @member {number}card2
     * @memberof CSNotifyShowCards
     * @instance
     */
    CSNotifyShowCards.prototype.card2 = 0;

    /**
     * CSNotifyShowCards index.
     * @member {number}index
     * @memberof CSNotifyShowCards
     * @instance
     */
    CSNotifyShowCards.prototype.index = 0;

    /**
     * Creates a new CSNotifyShowCards instance using the specified properties.
     * @function create
     * @memberof CSNotifyShowCards
     * @static
     * @param {ICSNotifyShowCards=} [properties] Properties to set
     * @returns {CSNotifyShowCards} CSNotifyShowCards instance
     */
    CSNotifyShowCards.create = function create(properties) {
        return new CSNotifyShowCards(properties);
    };

    /**
     * Encodes the specified CSNotifyShowCards message. Does not implicitly {@link CSNotifyShowCards.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyShowCards
     * @static
     * @param {ICSNotifyShowCards} message CSNotifyShowCards message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyShowCards.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.card1 != null && message.hasOwnProperty("card1"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.card1);
        if (message.card2 != null && message.hasOwnProperty("card2"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.card2);
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.index);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyShowCards message, length delimited. Does not implicitly {@link CSNotifyShowCards.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyShowCards
     * @static
     * @param {ICSNotifyShowCards} message CSNotifyShowCards message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyShowCards.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyShowCards message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyShowCards
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyShowCards} CSNotifyShowCards
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyShowCards.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyShowCards();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.card1 = reader.int32();
                break;
            case 2:
                message.card2 = reader.int32();
                break;
            case 3:
                message.index = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyShowCards message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyShowCards
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyShowCards} CSNotifyShowCards
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyShowCards.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyShowCards message.
     * @function verify
     * @memberof CSNotifyShowCards
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyShowCards.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.card1 != null && message.hasOwnProperty("card1"))
            if (!$util.isInteger(message.card1))
                return "card1: integer expected";
        if (message.card2 != null && message.hasOwnProperty("card2"))
            if (!$util.isInteger(message.card2))
                return "card2: integer expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        return null;
    };

    /**
     * Creates a CSNotifyShowCards message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyShowCards
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyShowCards} CSNotifyShowCards
     */
    CSNotifyShowCards.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyShowCards)
            return object;
        var message = new $root.CSNotifyShowCards();
        if (object.card1 != null)
            message.card1 = object.card1 | 0;
        if (object.card2 != null)
            message.card2 = object.card2 | 0;
        if (object.index != null)
            message.index = object.index >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyShowCards message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyShowCards
     * @static
     * @param {CSNotifyShowCards} message CSNotifyShowCards
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyShowCards.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.card1 = 0;
            object.card2 = 0;
            object.index = 0;
        }
        if (message.card1 != null && message.hasOwnProperty("card1"))
            object.card1 = message.card1;
        if (message.card2 != null && message.hasOwnProperty("card2"))
            object.card2 = message.card2;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        return object;
    };

    /**
     * Converts this CSNotifyShowCards to JSON.
     * @function toJSON
     * @memberof CSNotifyShowCards
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyShowCards.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyShowCards;
})();

$root.CSRequestResetTime = (function() {

    /**
     * Properties of a CSRequestResetTime.
     * @exports ICSRequestResetTime
     * @interface ICSRequestResetTime
     * @property {boolean} [done] CSRequestResetTime done
     */

    /**
     * Constructs a new CSRequestResetTime.
     * @exports CSRequestResetTime
     * @classdesc Represents a CSRequestResetTime.
     * @constructor
     * @param {ICSRequestResetTime=} [properties] Properties to set
     */
    function CSRequestResetTime(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestResetTime done.
     * @member {boolean}done
     * @memberof CSRequestResetTime
     * @instance
     */
    CSRequestResetTime.prototype.done = false;

    /**
     * Creates a new CSRequestResetTime instance using the specified properties.
     * @function create
     * @memberof CSRequestResetTime
     * @static
     * @param {ICSRequestResetTime=} [properties] Properties to set
     * @returns {CSRequestResetTime} CSRequestResetTime instance
     */
    CSRequestResetTime.create = function create(properties) {
        return new CSRequestResetTime(properties);
    };

    /**
     * Encodes the specified CSRequestResetTime message. Does not implicitly {@link CSRequestResetTime.verify|verify} messages.
     * @function encode
     * @memberof CSRequestResetTime
     * @static
     * @param {ICSRequestResetTime} message CSRequestResetTime message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestResetTime.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.done != null && message.hasOwnProperty("done"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.done);
        return writer;
    };

    /**
     * Encodes the specified CSRequestResetTime message, length delimited. Does not implicitly {@link CSRequestResetTime.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestResetTime
     * @static
     * @param {ICSRequestResetTime} message CSRequestResetTime message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestResetTime.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestResetTime message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestResetTime
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestResetTime} CSRequestResetTime
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestResetTime.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestResetTime();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.done = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestResetTime message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestResetTime
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestResetTime} CSRequestResetTime
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestResetTime.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestResetTime message.
     * @function verify
     * @memberof CSRequestResetTime
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestResetTime.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.done != null && message.hasOwnProperty("done"))
            if (typeof message.done !== "boolean")
                return "done: boolean expected";
        return null;
    };

    /**
     * Creates a CSRequestResetTime message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestResetTime
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestResetTime} CSRequestResetTime
     */
    CSRequestResetTime.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestResetTime)
            return object;
        var message = new $root.CSRequestResetTime();
        if (object.done != null)
            message.done = Boolean(object.done);
        return message;
    };

    /**
     * Creates a plain object from a CSRequestResetTime message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestResetTime
     * @static
     * @param {CSRequestResetTime} message CSRequestResetTime
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestResetTime.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.done = false;
        if (message.done != null && message.hasOwnProperty("done"))
            object.done = message.done;
        return object;
    };

    /**
     * Converts this CSRequestResetTime to JSON.
     * @function toJSON
     * @memberof CSRequestResetTime
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestResetTime.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestResetTime;
})();

$root.CSNotifyResetTime = (function() {

    /**
     * Properties of a CSNotifyResetTime.
     * @exports ICSNotifyResetTime
     * @interface ICSNotifyResetTime
     * @property {number} [index] CSNotifyResetTime index
     */

    /**
     * Constructs a new CSNotifyResetTime.
     * @exports CSNotifyResetTime
     * @classdesc Represents a CSNotifyResetTime.
     * @constructor
     * @param {ICSNotifyResetTime=} [properties] Properties to set
     */
    function CSNotifyResetTime(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyResetTime index.
     * @member {number}index
     * @memberof CSNotifyResetTime
     * @instance
     */
    CSNotifyResetTime.prototype.index = 0;

    /**
     * Creates a new CSNotifyResetTime instance using the specified properties.
     * @function create
     * @memberof CSNotifyResetTime
     * @static
     * @param {ICSNotifyResetTime=} [properties] Properties to set
     * @returns {CSNotifyResetTime} CSNotifyResetTime instance
     */
    CSNotifyResetTime.create = function create(properties) {
        return new CSNotifyResetTime(properties);
    };

    /**
     * Encodes the specified CSNotifyResetTime message. Does not implicitly {@link CSNotifyResetTime.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyResetTime
     * @static
     * @param {ICSNotifyResetTime} message CSNotifyResetTime message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyResetTime.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyResetTime message, length delimited. Does not implicitly {@link CSNotifyResetTime.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyResetTime
     * @static
     * @param {ICSNotifyResetTime} message CSNotifyResetTime message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyResetTime.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyResetTime message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyResetTime
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyResetTime} CSNotifyResetTime
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyResetTime.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyResetTime();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.index = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyResetTime message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyResetTime
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyResetTime} CSNotifyResetTime
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyResetTime.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyResetTime message.
     * @function verify
     * @memberof CSNotifyResetTime
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyResetTime.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        return null;
    };

    /**
     * Creates a CSNotifyResetTime message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyResetTime
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyResetTime} CSNotifyResetTime
     */
    CSNotifyResetTime.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyResetTime)
            return object;
        var message = new $root.CSNotifyResetTime();
        if (object.index != null)
            message.index = object.index >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyResetTime message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyResetTime
     * @static
     * @param {CSNotifyResetTime} message CSNotifyResetTime
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyResetTime.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.index = 0;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        return object;
    };

    /**
     * Converts this CSNotifyResetTime to JSON.
     * @function toJSON
     * @memberof CSNotifyResetTime
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyResetTime.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyResetTime;
})();

$root.CSPlayerInfo = (function() {

    /**
     * Properties of a CSPlayerInfo.
     * @exports ICSPlayerInfo
     * @interface ICSPlayerInfo
     * @property {number|Long} [chip] CSPlayerInfo chip
     * @property {number} [diamond] CSPlayerInfo diamond
     * @property {number} [lastChangeJuniorTrainingTableTime] CSPlayerInfo lastChangeJuniorTrainingTableTime
     * @property {number} [lastChangeMiddleTrainingTableTime] CSPlayerInfo lastChangeMiddleTrainingTableTime
     * @property {number} [lastChangeSeniorTrainingTableTime] CSPlayerInfo lastChangeSeniorTrainingTableTime
     */

    /**
     * Constructs a new CSPlayerInfo.
     * @exports CSPlayerInfo
     * @classdesc Represents a CSPlayerInfo.
     * @constructor
     * @param {ICSPlayerInfo=} [properties] Properties to set
     */
    function CSPlayerInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSPlayerInfo chip.
     * @member {number|Long}chip
     * @memberof CSPlayerInfo
     * @instance
     */
    CSPlayerInfo.prototype.chip = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSPlayerInfo diamond.
     * @member {number}diamond
     * @memberof CSPlayerInfo
     * @instance
     */
    CSPlayerInfo.prototype.diamond = 0;

    /**
     * CSPlayerInfo lastChangeJuniorTrainingTableTime.
     * @member {number}lastChangeJuniorTrainingTableTime
     * @memberof CSPlayerInfo
     * @instance
     */
    CSPlayerInfo.prototype.lastChangeJuniorTrainingTableTime = 0;

    /**
     * CSPlayerInfo lastChangeMiddleTrainingTableTime.
     * @member {number}lastChangeMiddleTrainingTableTime
     * @memberof CSPlayerInfo
     * @instance
     */
    CSPlayerInfo.prototype.lastChangeMiddleTrainingTableTime = 0;

    /**
     * CSPlayerInfo lastChangeSeniorTrainingTableTime.
     * @member {number}lastChangeSeniorTrainingTableTime
     * @memberof CSPlayerInfo
     * @instance
     */
    CSPlayerInfo.prototype.lastChangeSeniorTrainingTableTime = 0;

    /**
     * Creates a new CSPlayerInfo instance using the specified properties.
     * @function create
     * @memberof CSPlayerInfo
     * @static
     * @param {ICSPlayerInfo=} [properties] Properties to set
     * @returns {CSPlayerInfo} CSPlayerInfo instance
     */
    CSPlayerInfo.create = function create(properties) {
        return new CSPlayerInfo(properties);
    };

    /**
     * Encodes the specified CSPlayerInfo message. Does not implicitly {@link CSPlayerInfo.verify|verify} messages.
     * @function encode
     * @memberof CSPlayerInfo
     * @static
     * @param {ICSPlayerInfo} message CSPlayerInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSPlayerInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.chip != null && message.hasOwnProperty("chip"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.chip);
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.diamond);
        if (message.lastChangeJuniorTrainingTableTime != null && message.hasOwnProperty("lastChangeJuniorTrainingTableTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.lastChangeJuniorTrainingTableTime);
        if (message.lastChangeMiddleTrainingTableTime != null && message.hasOwnProperty("lastChangeMiddleTrainingTableTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.lastChangeMiddleTrainingTableTime);
        if (message.lastChangeSeniorTrainingTableTime != null && message.hasOwnProperty("lastChangeSeniorTrainingTableTime"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.lastChangeSeniorTrainingTableTime);
        return writer;
    };

    /**
     * Encodes the specified CSPlayerInfo message, length delimited. Does not implicitly {@link CSPlayerInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSPlayerInfo
     * @static
     * @param {ICSPlayerInfo} message CSPlayerInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSPlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSPlayerInfo message from the specified reader or buffer.
     * @function decode
     * @memberof CSPlayerInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSPlayerInfo} CSPlayerInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSPlayerInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSPlayerInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.chip = reader.uint64();
                break;
            case 2:
                message.diamond = reader.uint32();
                break;
            case 3:
                message.lastChangeJuniorTrainingTableTime = reader.uint32();
                break;
            case 4:
                message.lastChangeMiddleTrainingTableTime = reader.uint32();
                break;
            case 5:
                message.lastChangeSeniorTrainingTableTime = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSPlayerInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSPlayerInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSPlayerInfo} CSPlayerInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSPlayerInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSPlayerInfo message.
     * @function verify
     * @memberof CSPlayerInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSPlayerInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (!$util.isInteger(message.chip) && !(message.chip && $util.isInteger(message.chip.low) && $util.isInteger(message.chip.high)))
                return "chip: integer|Long expected";
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            if (!$util.isInteger(message.diamond))
                return "diamond: integer expected";
        if (message.lastChangeJuniorTrainingTableTime != null && message.hasOwnProperty("lastChangeJuniorTrainingTableTime"))
            if (!$util.isInteger(message.lastChangeJuniorTrainingTableTime))
                return "lastChangeJuniorTrainingTableTime: integer expected";
        if (message.lastChangeMiddleTrainingTableTime != null && message.hasOwnProperty("lastChangeMiddleTrainingTableTime"))
            if (!$util.isInteger(message.lastChangeMiddleTrainingTableTime))
                return "lastChangeMiddleTrainingTableTime: integer expected";
        if (message.lastChangeSeniorTrainingTableTime != null && message.hasOwnProperty("lastChangeSeniorTrainingTableTime"))
            if (!$util.isInteger(message.lastChangeSeniorTrainingTableTime))
                return "lastChangeSeniorTrainingTableTime: integer expected";
        return null;
    };

    /**
     * Creates a CSPlayerInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSPlayerInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSPlayerInfo} CSPlayerInfo
     */
    CSPlayerInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.CSPlayerInfo)
            return object;
        var message = new $root.CSPlayerInfo();
        if (object.chip != null)
            if ($util.Long)
                (message.chip = $util.Long.fromValue(object.chip)).unsigned = true;
            else if (typeof object.chip === "string")
                message.chip = parseInt(object.chip, 10);
            else if (typeof object.chip === "number")
                message.chip = object.chip;
            else if (typeof object.chip === "object")
                message.chip = new $util.LongBits(object.chip.low >>> 0, object.chip.high >>> 0).toNumber(true);
        if (object.diamond != null)
            message.diamond = object.diamond >>> 0;
        if (object.lastChangeJuniorTrainingTableTime != null)
            message.lastChangeJuniorTrainingTableTime = object.lastChangeJuniorTrainingTableTime >>> 0;
        if (object.lastChangeMiddleTrainingTableTime != null)
            message.lastChangeMiddleTrainingTableTime = object.lastChangeMiddleTrainingTableTime >>> 0;
        if (object.lastChangeSeniorTrainingTableTime != null)
            message.lastChangeSeniorTrainingTableTime = object.lastChangeSeniorTrainingTableTime >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSPlayerInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSPlayerInfo
     * @static
     * @param {CSPlayerInfo} message CSPlayerInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSPlayerInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.chip = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.chip = options.longs === String ? "0" : 0;
            object.diamond = 0;
            object.lastChangeJuniorTrainingTableTime = 0;
            object.lastChangeMiddleTrainingTableTime = 0;
            object.lastChangeSeniorTrainingTableTime = 0;
        }
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (typeof message.chip === "number")
                object.chip = options.longs === String ? String(message.chip) : message.chip;
            else
                object.chip = options.longs === String ? $util.Long.prototype.toString.call(message.chip) : options.longs === Number ? new $util.LongBits(message.chip.low >>> 0, message.chip.high >>> 0).toNumber(true) : message.chip;
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            object.diamond = message.diamond;
        if (message.lastChangeJuniorTrainingTableTime != null && message.hasOwnProperty("lastChangeJuniorTrainingTableTime"))
            object.lastChangeJuniorTrainingTableTime = message.lastChangeJuniorTrainingTableTime;
        if (message.lastChangeMiddleTrainingTableTime != null && message.hasOwnProperty("lastChangeMiddleTrainingTableTime"))
            object.lastChangeMiddleTrainingTableTime = message.lastChangeMiddleTrainingTableTime;
        if (message.lastChangeSeniorTrainingTableTime != null && message.hasOwnProperty("lastChangeSeniorTrainingTableTime"))
            object.lastChangeSeniorTrainingTableTime = message.lastChangeSeniorTrainingTableTime;
        return object;
    };

    /**
     * Converts this CSPlayerInfo to JSON.
     * @function toJSON
     * @memberof CSPlayerInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSPlayerInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSPlayerInfo;
})();

$root.CSGTPLData = (function() {

    /**
     * Properties of a CSGTPLData.
     * @exports ICSGTPLData
     * @interface ICSGTPLData
     * @property {number|Long} [rankKey] CSGTPLData rankKey
     * @property {number|Long} [rankScore] CSGTPLData rankScore
     */

    /**
     * Constructs a new CSGTPLData.
     * @exports CSGTPLData
     * @classdesc Represents a CSGTPLData.
     * @constructor
     * @param {ICSGTPLData=} [properties] Properties to set
     */
    function CSGTPLData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSGTPLData rankKey.
     * @member {number|Long}rankKey
     * @memberof CSGTPLData
     * @instance
     */
    CSGTPLData.prototype.rankKey = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSGTPLData rankScore.
     * @member {number|Long}rankScore
     * @memberof CSGTPLData
     * @instance
     */
    CSGTPLData.prototype.rankScore = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * Creates a new CSGTPLData instance using the specified properties.
     * @function create
     * @memberof CSGTPLData
     * @static
     * @param {ICSGTPLData=} [properties] Properties to set
     * @returns {CSGTPLData} CSGTPLData instance
     */
    CSGTPLData.create = function create(properties) {
        return new CSGTPLData(properties);
    };

    /**
     * Encodes the specified CSGTPLData message. Does not implicitly {@link CSGTPLData.verify|verify} messages.
     * @function encode
     * @memberof CSGTPLData
     * @static
     * @param {ICSGTPLData} message CSGTPLData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSGTPLData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.rankKey);
        if (message.rankScore != null && message.hasOwnProperty("rankScore"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.rankScore);
        return writer;
    };

    /**
     * Encodes the specified CSGTPLData message, length delimited. Does not implicitly {@link CSGTPLData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSGTPLData
     * @static
     * @param {ICSGTPLData} message CSGTPLData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSGTPLData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSGTPLData message from the specified reader or buffer.
     * @function decode
     * @memberof CSGTPLData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSGTPLData} CSGTPLData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSGTPLData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSGTPLData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.rankKey = reader.uint64();
                break;
            case 2:
                message.rankScore = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSGTPLData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSGTPLData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSGTPLData} CSGTPLData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSGTPLData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSGTPLData message.
     * @function verify
     * @memberof CSGTPLData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSGTPLData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (!$util.isInteger(message.rankKey) && !(message.rankKey && $util.isInteger(message.rankKey.low) && $util.isInteger(message.rankKey.high)))
                return "rankKey: integer|Long expected";
        if (message.rankScore != null && message.hasOwnProperty("rankScore"))
            if (!$util.isInteger(message.rankScore) && !(message.rankScore && $util.isInteger(message.rankScore.low) && $util.isInteger(message.rankScore.high)))
                return "rankScore: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSGTPLData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSGTPLData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSGTPLData} CSGTPLData
     */
    CSGTPLData.fromObject = function fromObject(object) {
        if (object instanceof $root.CSGTPLData)
            return object;
        var message = new $root.CSGTPLData();
        if (object.rankKey != null)
            if ($util.Long)
                (message.rankKey = $util.Long.fromValue(object.rankKey)).unsigned = true;
            else if (typeof object.rankKey === "string")
                message.rankKey = parseInt(object.rankKey, 10);
            else if (typeof object.rankKey === "number")
                message.rankKey = object.rankKey;
            else if (typeof object.rankKey === "object")
                message.rankKey = new $util.LongBits(object.rankKey.low >>> 0, object.rankKey.high >>> 0).toNumber(true);
        if (object.rankScore != null)
            if ($util.Long)
                (message.rankScore = $util.Long.fromValue(object.rankScore)).unsigned = false;
            else if (typeof object.rankScore === "string")
                message.rankScore = parseInt(object.rankScore, 10);
            else if (typeof object.rankScore === "number")
                message.rankScore = object.rankScore;
            else if (typeof object.rankScore === "object")
                message.rankScore = new $util.LongBits(object.rankScore.low >>> 0, object.rankScore.high >>> 0).toNumber();
        return message;
    };

    /**
     * Creates a plain object from a CSGTPLData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSGTPLData
     * @static
     * @param {CSGTPLData} message CSGTPLData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSGTPLData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankKey = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankKey = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.rankScore = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankScore = options.longs === String ? "0" : 0;
        }
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (typeof message.rankKey === "number")
                object.rankKey = options.longs === String ? String(message.rankKey) : message.rankKey;
            else
                object.rankKey = options.longs === String ? $util.Long.prototype.toString.call(message.rankKey) : options.longs === Number ? new $util.LongBits(message.rankKey.low >>> 0, message.rankKey.high >>> 0).toNumber(true) : message.rankKey;
        if (message.rankScore != null && message.hasOwnProperty("rankScore"))
            if (typeof message.rankScore === "number")
                object.rankScore = options.longs === String ? String(message.rankScore) : message.rankScore;
            else
                object.rankScore = options.longs === String ? $util.Long.prototype.toString.call(message.rankScore) : options.longs === Number ? new $util.LongBits(message.rankScore.low >>> 0, message.rankScore.high >>> 0).toNumber() : message.rankScore;
        return object;
    };

    /**
     * Converts this CSGTPLData to JSON.
     * @function toJSON
     * @memberof CSGTPLData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSGTPLData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSGTPLData;
})();

$root.CSRequestGTPList = (function() {

    /**
     * Properties of a CSRequestGTPList.
     * @exports ICSRequestGTPList
     * @interface ICSRequestGTPList
     * @property {number|Long} [rankListId] CSRequestGTPList rankListId
     * @property {number} [rankBegin] CSRequestGTPList rankBegin
     * @property {number} [rankNum] CSRequestGTPList rankNum
     */

    /**
     * Constructs a new CSRequestGTPList.
     * @exports CSRequestGTPList
     * @classdesc Represents a CSRequestGTPList.
     * @constructor
     * @param {ICSRequestGTPList=} [properties] Properties to set
     */
    function CSRequestGTPList(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestGTPList rankListId.
     * @member {number|Long}rankListId
     * @memberof CSRequestGTPList
     * @instance
     */
    CSRequestGTPList.prototype.rankListId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSRequestGTPList rankBegin.
     * @member {number}rankBegin
     * @memberof CSRequestGTPList
     * @instance
     */
    CSRequestGTPList.prototype.rankBegin = 0;

    /**
     * CSRequestGTPList rankNum.
     * @member {number}rankNum
     * @memberof CSRequestGTPList
     * @instance
     */
    CSRequestGTPList.prototype.rankNum = 0;

    /**
     * Creates a new CSRequestGTPList instance using the specified properties.
     * @function create
     * @memberof CSRequestGTPList
     * @static
     * @param {ICSRequestGTPList=} [properties] Properties to set
     * @returns {CSRequestGTPList} CSRequestGTPList instance
     */
    CSRequestGTPList.create = function create(properties) {
        return new CSRequestGTPList(properties);
    };

    /**
     * Encodes the specified CSRequestGTPList message. Does not implicitly {@link CSRequestGTPList.verify|verify} messages.
     * @function encode
     * @memberof CSRequestGTPList
     * @static
     * @param {ICSRequestGTPList} message CSRequestGTPList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestGTPList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.rankListId);
        if (message.rankBegin != null && message.hasOwnProperty("rankBegin"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rankBegin);
        if (message.rankNum != null && message.hasOwnProperty("rankNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rankNum);
        return writer;
    };

    /**
     * Encodes the specified CSRequestGTPList message, length delimited. Does not implicitly {@link CSRequestGTPList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestGTPList
     * @static
     * @param {ICSRequestGTPList} message CSRequestGTPList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestGTPList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestGTPList message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestGTPList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestGTPList} CSRequestGTPList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestGTPList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestGTPList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.rankListId = reader.uint64();
                break;
            case 2:
                message.rankBegin = reader.uint32();
                break;
            case 3:
                message.rankNum = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestGTPList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestGTPList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestGTPList} CSRequestGTPList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestGTPList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestGTPList message.
     * @function verify
     * @memberof CSRequestGTPList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestGTPList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            if (!$util.isInteger(message.rankListId) && !(message.rankListId && $util.isInteger(message.rankListId.low) && $util.isInteger(message.rankListId.high)))
                return "rankListId: integer|Long expected";
        if (message.rankBegin != null && message.hasOwnProperty("rankBegin"))
            if (!$util.isInteger(message.rankBegin))
                return "rankBegin: integer expected";
        if (message.rankNum != null && message.hasOwnProperty("rankNum"))
            if (!$util.isInteger(message.rankNum))
                return "rankNum: integer expected";
        return null;
    };

    /**
     * Creates a CSRequestGTPList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestGTPList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestGTPList} CSRequestGTPList
     */
    CSRequestGTPList.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestGTPList)
            return object;
        var message = new $root.CSRequestGTPList();
        if (object.rankListId != null)
            if ($util.Long)
                (message.rankListId = $util.Long.fromValue(object.rankListId)).unsigned = true;
            else if (typeof object.rankListId === "string")
                message.rankListId = parseInt(object.rankListId, 10);
            else if (typeof object.rankListId === "number")
                message.rankListId = object.rankListId;
            else if (typeof object.rankListId === "object")
                message.rankListId = new $util.LongBits(object.rankListId.low >>> 0, object.rankListId.high >>> 0).toNumber(true);
        if (object.rankBegin != null)
            message.rankBegin = object.rankBegin >>> 0;
        if (object.rankNum != null)
            message.rankNum = object.rankNum >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSRequestGTPList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestGTPList
     * @static
     * @param {CSRequestGTPList} message CSRequestGTPList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestGTPList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankListId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankListId = options.longs === String ? "0" : 0;
            object.rankBegin = 0;
            object.rankNum = 0;
        }
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            if (typeof message.rankListId === "number")
                object.rankListId = options.longs === String ? String(message.rankListId) : message.rankListId;
            else
                object.rankListId = options.longs === String ? $util.Long.prototype.toString.call(message.rankListId) : options.longs === Number ? new $util.LongBits(message.rankListId.low >>> 0, message.rankListId.high >>> 0).toNumber(true) : message.rankListId;
        if (message.rankBegin != null && message.hasOwnProperty("rankBegin"))
            object.rankBegin = message.rankBegin;
        if (message.rankNum != null && message.hasOwnProperty("rankNum"))
            object.rankNum = message.rankNum;
        return object;
    };

    /**
     * Converts this CSRequestGTPList to JSON.
     * @function toJSON
     * @memberof CSRequestGTPList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestGTPList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestGTPList;
})();

$root.CSResponseGTPList = (function() {

    /**
     * Properties of a CSResponseGTPList.
     * @exports ICSResponseGTPList
     * @interface ICSResponseGTPList
     * @property {ENMessageError} [result] CSResponseGTPList result
     * @property {number|Long} [rankListId] CSResponseGTPList rankListId
     * @property {Array.<ICSGTPLData>} [rankDatas] CSResponseGTPList rankDatas
     */

    /**
     * Constructs a new CSResponseGTPList.
     * @exports CSResponseGTPList
     * @classdesc Represents a CSResponseGTPList.
     * @constructor
     * @param {ICSResponseGTPList=} [properties] Properties to set
     */
    function CSResponseGTPList(properties) {
        this.rankDatas = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponseGTPList result.
     * @member {ENMessageError}result
     * @memberof CSResponseGTPList
     * @instance
     */
    CSResponseGTPList.prototype.result = 0;

    /**
     * CSResponseGTPList rankListId.
     * @member {number|Long}rankListId
     * @memberof CSResponseGTPList
     * @instance
     */
    CSResponseGTPList.prototype.rankListId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSResponseGTPList rankDatas.
     * @member {Array.<ICSGTPLData>}rankDatas
     * @memberof CSResponseGTPList
     * @instance
     */
    CSResponseGTPList.prototype.rankDatas = $util.emptyArray;

    /**
     * Creates a new CSResponseGTPList instance using the specified properties.
     * @function create
     * @memberof CSResponseGTPList
     * @static
     * @param {ICSResponseGTPList=} [properties] Properties to set
     * @returns {CSResponseGTPList} CSResponseGTPList instance
     */
    CSResponseGTPList.create = function create(properties) {
        return new CSResponseGTPList(properties);
    };

    /**
     * Encodes the specified CSResponseGTPList message. Does not implicitly {@link CSResponseGTPList.verify|verify} messages.
     * @function encode
     * @memberof CSResponseGTPList
     * @static
     * @param {ICSResponseGTPList} message CSResponseGTPList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseGTPList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.rankDatas != null && message.rankDatas.length)
            for (var i = 0; i < message.rankDatas.length; ++i)
                $root.CSGTPLData.encode(message.rankDatas[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.rankListId);
        return writer;
    };

    /**
     * Encodes the specified CSResponseGTPList message, length delimited. Does not implicitly {@link CSResponseGTPList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponseGTPList
     * @static
     * @param {ICSResponseGTPList} message CSResponseGTPList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponseGTPList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponseGTPList message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponseGTPList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponseGTPList} CSResponseGTPList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseGTPList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponseGTPList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.result = reader.int32();
                break;
            case 3:
                message.rankListId = reader.uint64();
                break;
            case 2:
                if (!(message.rankDatas && message.rankDatas.length))
                    message.rankDatas = [];
                message.rankDatas.push($root.CSGTPLData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponseGTPList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponseGTPList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponseGTPList} CSResponseGTPList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponseGTPList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponseGTPList message.
     * @function verify
     * @memberof CSResponseGTPList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponseGTPList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            if (!$util.isInteger(message.rankListId) && !(message.rankListId && $util.isInteger(message.rankListId.low) && $util.isInteger(message.rankListId.high)))
                return "rankListId: integer|Long expected";
        if (message.rankDatas != null && message.hasOwnProperty("rankDatas")) {
            if (!Array.isArray(message.rankDatas))
                return "rankDatas: array expected";
            for (var i = 0; i < message.rankDatas.length; ++i) {
                var error = $root.CSGTPLData.verify(message.rankDatas[i]);
                if (error)
                    return "rankDatas." + error;
            }
        }
        return null;
    };

    /**
     * Creates a CSResponseGTPList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponseGTPList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponseGTPList} CSResponseGTPList
     */
    CSResponseGTPList.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponseGTPList)
            return object;
        var message = new $root.CSResponseGTPList();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.rankListId != null)
            if ($util.Long)
                (message.rankListId = $util.Long.fromValue(object.rankListId)).unsigned = true;
            else if (typeof object.rankListId === "string")
                message.rankListId = parseInt(object.rankListId, 10);
            else if (typeof object.rankListId === "number")
                message.rankListId = object.rankListId;
            else if (typeof object.rankListId === "object")
                message.rankListId = new $util.LongBits(object.rankListId.low >>> 0, object.rankListId.high >>> 0).toNumber(true);
        if (object.rankDatas) {
            if (!Array.isArray(object.rankDatas))
                throw TypeError(".CSResponseGTPList.rankDatas: array expected");
            message.rankDatas = [];
            for (var i = 0; i < object.rankDatas.length; ++i) {
                if (typeof object.rankDatas[i] !== "object")
                    throw TypeError(".CSResponseGTPList.rankDatas: object expected");
                message.rankDatas[i] = $root.CSGTPLData.fromObject(object.rankDatas[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponseGTPList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponseGTPList
     * @static
     * @param {CSResponseGTPList} message CSResponseGTPList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponseGTPList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.rankDatas = [];
        if (options.defaults) {
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankListId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankListId = options.longs === String ? "0" : 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.rankDatas && message.rankDatas.length) {
            object.rankDatas = [];
            for (var j = 0; j < message.rankDatas.length; ++j)
                object.rankDatas[j] = $root.CSGTPLData.toObject(message.rankDatas[j], options);
        }
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            if (typeof message.rankListId === "number")
                object.rankListId = options.longs === String ? String(message.rankListId) : message.rankListId;
            else
                object.rankListId = options.longs === String ? $util.Long.prototype.toString.call(message.rankListId) : options.longs === Number ? new $util.LongBits(message.rankListId.low >>> 0, message.rankListId.high >>> 0).toNumber(true) : message.rankListId;
        return object;
    };

    /**
     * Converts this CSResponseGTPList to JSON.
     * @function toJSON
     * @memberof CSResponseGTPList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponseGTPList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponseGTPList;
})();

$root.CSRequestPlayerGTPList = (function() {

    /**
     * Properties of a CSRequestPlayerGTPList.
     * @exports ICSRequestPlayerGTPList
     * @interface ICSRequestPlayerGTPList
     * @property {number|Long} [rankKey] CSRequestPlayerGTPList rankKey
     * @property {number|Long} [rankListId] CSRequestPlayerGTPList rankListId
     */

    /**
     * Constructs a new CSRequestPlayerGTPList.
     * @exports CSRequestPlayerGTPList
     * @classdesc Represents a CSRequestPlayerGTPList.
     * @constructor
     * @param {ICSRequestPlayerGTPList=} [properties] Properties to set
     */
    function CSRequestPlayerGTPList(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSRequestPlayerGTPList rankKey.
     * @member {number|Long}rankKey
     * @memberof CSRequestPlayerGTPList
     * @instance
     */
    CSRequestPlayerGTPList.prototype.rankKey = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSRequestPlayerGTPList rankListId.
     * @member {number|Long}rankListId
     * @memberof CSRequestPlayerGTPList
     * @instance
     */
    CSRequestPlayerGTPList.prototype.rankListId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new CSRequestPlayerGTPList instance using the specified properties.
     * @function create
     * @memberof CSRequestPlayerGTPList
     * @static
     * @param {ICSRequestPlayerGTPList=} [properties] Properties to set
     * @returns {CSRequestPlayerGTPList} CSRequestPlayerGTPList instance
     */
    CSRequestPlayerGTPList.create = function create(properties) {
        return new CSRequestPlayerGTPList(properties);
    };

    /**
     * Encodes the specified CSRequestPlayerGTPList message. Does not implicitly {@link CSRequestPlayerGTPList.verify|verify} messages.
     * @function encode
     * @memberof CSRequestPlayerGTPList
     * @static
     * @param {ICSRequestPlayerGTPList} message CSRequestPlayerGTPList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestPlayerGTPList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.rankKey);
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.rankListId);
        return writer;
    };

    /**
     * Encodes the specified CSRequestPlayerGTPList message, length delimited. Does not implicitly {@link CSRequestPlayerGTPList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSRequestPlayerGTPList
     * @static
     * @param {ICSRequestPlayerGTPList} message CSRequestPlayerGTPList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSRequestPlayerGTPList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSRequestPlayerGTPList message from the specified reader or buffer.
     * @function decode
     * @memberof CSRequestPlayerGTPList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSRequestPlayerGTPList} CSRequestPlayerGTPList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestPlayerGTPList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSRequestPlayerGTPList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.rankKey = reader.uint64();
                break;
            case 2:
                message.rankListId = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSRequestPlayerGTPList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSRequestPlayerGTPList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSRequestPlayerGTPList} CSRequestPlayerGTPList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSRequestPlayerGTPList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSRequestPlayerGTPList message.
     * @function verify
     * @memberof CSRequestPlayerGTPList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSRequestPlayerGTPList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (!$util.isInteger(message.rankKey) && !(message.rankKey && $util.isInteger(message.rankKey.low) && $util.isInteger(message.rankKey.high)))
                return "rankKey: integer|Long expected";
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            if (!$util.isInteger(message.rankListId) && !(message.rankListId && $util.isInteger(message.rankListId.low) && $util.isInteger(message.rankListId.high)))
                return "rankListId: integer|Long expected";
        return null;
    };

    /**
     * Creates a CSRequestPlayerGTPList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSRequestPlayerGTPList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSRequestPlayerGTPList} CSRequestPlayerGTPList
     */
    CSRequestPlayerGTPList.fromObject = function fromObject(object) {
        if (object instanceof $root.CSRequestPlayerGTPList)
            return object;
        var message = new $root.CSRequestPlayerGTPList();
        if (object.rankKey != null)
            if ($util.Long)
                (message.rankKey = $util.Long.fromValue(object.rankKey)).unsigned = true;
            else if (typeof object.rankKey === "string")
                message.rankKey = parseInt(object.rankKey, 10);
            else if (typeof object.rankKey === "number")
                message.rankKey = object.rankKey;
            else if (typeof object.rankKey === "object")
                message.rankKey = new $util.LongBits(object.rankKey.low >>> 0, object.rankKey.high >>> 0).toNumber(true);
        if (object.rankListId != null)
            if ($util.Long)
                (message.rankListId = $util.Long.fromValue(object.rankListId)).unsigned = true;
            else if (typeof object.rankListId === "string")
                message.rankListId = parseInt(object.rankListId, 10);
            else if (typeof object.rankListId === "number")
                message.rankListId = object.rankListId;
            else if (typeof object.rankListId === "object")
                message.rankListId = new $util.LongBits(object.rankListId.low >>> 0, object.rankListId.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a CSRequestPlayerGTPList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSRequestPlayerGTPList
     * @static
     * @param {CSRequestPlayerGTPList} message CSRequestPlayerGTPList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSRequestPlayerGTPList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankKey = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankKey = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankListId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankListId = options.longs === String ? "0" : 0;
        }
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (typeof message.rankKey === "number")
                object.rankKey = options.longs === String ? String(message.rankKey) : message.rankKey;
            else
                object.rankKey = options.longs === String ? $util.Long.prototype.toString.call(message.rankKey) : options.longs === Number ? new $util.LongBits(message.rankKey.low >>> 0, message.rankKey.high >>> 0).toNumber(true) : message.rankKey;
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            if (typeof message.rankListId === "number")
                object.rankListId = options.longs === String ? String(message.rankListId) : message.rankListId;
            else
                object.rankListId = options.longs === String ? $util.Long.prototype.toString.call(message.rankListId) : options.longs === Number ? new $util.LongBits(message.rankListId.low >>> 0, message.rankListId.high >>> 0).toNumber(true) : message.rankListId;
        return object;
    };

    /**
     * Converts this CSRequestPlayerGTPList to JSON.
     * @function toJSON
     * @memberof CSRequestPlayerGTPList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSRequestPlayerGTPList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSRequestPlayerGTPList;
})();

$root.CSResponsePlayerGTPList = (function() {

    /**
     * Properties of a CSResponsePlayerGTPList.
     * @exports ICSResponsePlayerGTPList
     * @interface ICSResponsePlayerGTPList
     * @property {ENMessageError} [result] CSResponsePlayerGTPList result
     * @property {number|Long} [rankKey] CSResponsePlayerGTPList rankKey
     * @property {number} [rank] CSResponsePlayerGTPList rank
     * @property {number|Long} [rankListId] CSResponsePlayerGTPList rankListId
     * @property {ICSGTPLData} [csGtplData] CSResponsePlayerGTPList csGtplData
     */

    /**
     * Constructs a new CSResponsePlayerGTPList.
     * @exports CSResponsePlayerGTPList
     * @classdesc Represents a CSResponsePlayerGTPList.
     * @constructor
     * @param {ICSResponsePlayerGTPList=} [properties] Properties to set
     */
    function CSResponsePlayerGTPList(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSResponsePlayerGTPList result.
     * @member {ENMessageError}result
     * @memberof CSResponsePlayerGTPList
     * @instance
     */
    CSResponsePlayerGTPList.prototype.result = 0;

    /**
     * CSResponsePlayerGTPList rankKey.
     * @member {number|Long}rankKey
     * @memberof CSResponsePlayerGTPList
     * @instance
     */
    CSResponsePlayerGTPList.prototype.rankKey = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSResponsePlayerGTPList rank.
     * @member {number}rank
     * @memberof CSResponsePlayerGTPList
     * @instance
     */
    CSResponsePlayerGTPList.prototype.rank = 0;

    /**
     * CSResponsePlayerGTPList rankListId.
     * @member {number|Long}rankListId
     * @memberof CSResponsePlayerGTPList
     * @instance
     */
    CSResponsePlayerGTPList.prototype.rankListId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * CSResponsePlayerGTPList csGtplData.
     * @member {(ICSGTPLData|null|undefined)}csGtplData
     * @memberof CSResponsePlayerGTPList
     * @instance
     */
    CSResponsePlayerGTPList.prototype.csGtplData = null;

    /**
     * Creates a new CSResponsePlayerGTPList instance using the specified properties.
     * @function create
     * @memberof CSResponsePlayerGTPList
     * @static
     * @param {ICSResponsePlayerGTPList=} [properties] Properties to set
     * @returns {CSResponsePlayerGTPList} CSResponsePlayerGTPList instance
     */
    CSResponsePlayerGTPList.create = function create(properties) {
        return new CSResponsePlayerGTPList(properties);
    };

    /**
     * Encodes the specified CSResponsePlayerGTPList message. Does not implicitly {@link CSResponsePlayerGTPList.verify|verify} messages.
     * @function encode
     * @memberof CSResponsePlayerGTPList
     * @static
     * @param {ICSResponsePlayerGTPList} message CSResponsePlayerGTPList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponsePlayerGTPList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.rankKey);
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
        if (message.rank != null && message.hasOwnProperty("rank"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rank);
        if (message.csGtplData != null && message.hasOwnProperty("csGtplData"))
            $root.CSGTPLData.encode(message.csGtplData, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.rankListId);
        return writer;
    };

    /**
     * Encodes the specified CSResponsePlayerGTPList message, length delimited. Does not implicitly {@link CSResponsePlayerGTPList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSResponsePlayerGTPList
     * @static
     * @param {ICSResponsePlayerGTPList} message CSResponsePlayerGTPList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSResponsePlayerGTPList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSResponsePlayerGTPList message from the specified reader or buffer.
     * @function decode
     * @memberof CSResponsePlayerGTPList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSResponsePlayerGTPList} CSResponsePlayerGTPList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponsePlayerGTPList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSResponsePlayerGTPList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.result = reader.int32();
                break;
            case 1:
                message.rankKey = reader.uint64();
                break;
            case 3:
                message.rank = reader.uint32();
                break;
            case 5:
                message.rankListId = reader.uint64();
                break;
            case 4:
                message.csGtplData = $root.CSGTPLData.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSResponsePlayerGTPList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSResponsePlayerGTPList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSResponsePlayerGTPList} CSResponsePlayerGTPList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSResponsePlayerGTPList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSResponsePlayerGTPList message.
     * @function verify
     * @memberof CSResponsePlayerGTPList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSResponsePlayerGTPList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 42:
            case 66:
            case 39:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 10011:
            case 10015:
            case 10016:
            case 10017:
            case 10001:
            case 10002:
            case 10003:
            case 10004:
            case 10005:
            case 10006:
            case 10007:
            case 10008:
            case 10012:
            case 10018:
            case 10019:
            case 10020:
            case 10021:
            case 10022:
            case 10023:
            case 10024:
            case 10025:
            case 10026:
            case 10027:
            case 10028:
            case 10029:
            case 10030:
            case 10031:
            case 10032:
            case 10033:
            case 10034:
            case 10035:
            case 10040:
            case 10041:
            case 10042:
                break;
            }
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (!$util.isInteger(message.rankKey) && !(message.rankKey && $util.isInteger(message.rankKey.low) && $util.isInteger(message.rankKey.high)))
                return "rankKey: integer|Long expected";
        if (message.rank != null && message.hasOwnProperty("rank"))
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            if (!$util.isInteger(message.rankListId) && !(message.rankListId && $util.isInteger(message.rankListId.low) && $util.isInteger(message.rankListId.high)))
                return "rankListId: integer|Long expected";
        if (message.csGtplData != null && message.hasOwnProperty("csGtplData")) {
            var error = $root.CSGTPLData.verify(message.csGtplData);
            if (error)
                return "csGtplData." + error;
        }
        return null;
    };

    /**
     * Creates a CSResponsePlayerGTPList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSResponsePlayerGTPList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSResponsePlayerGTPList} CSResponsePlayerGTPList
     */
    CSResponsePlayerGTPList.fromObject = function fromObject(object) {
        if (object instanceof $root.CSResponsePlayerGTPList)
            return object;
        var message = new $root.CSResponsePlayerGTPList();
        switch (object.result) {
        case "EN_MESSAGE_ERROR_OK":
        case 0:
            message.result = 0;
            break;
        case "EN_MESSAGE_ERROR_RSA_FAILED":
        case 1:
            message.result = 1;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_FULL":
        case 2:
            message.result = 2;
            break;
        case "EN_MESSAGE_ERROR_LOAD_DATA_FAILED":
        case 3:
            message.result = 3;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_ID":
        case 4:
            message.result = 4;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_INDEX":
        case 5:
            message.result = 5;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT":
        case 6:
            message.result = 6;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_SIT_BY_OTHER":
        case 7:
            message.result = 7;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CHIPS_NUM":
        case 8:
            message.result = 8;
            break;
        case "EN_MESSAGE_ERROR_WAIT_PLAYER_FULL":
        case 9:
            message.result = 9;
            break;
        case "EN_MESSAGE_ERROR_PLAYER_NOT_IN_TABLE":
        case 10:
            message.result = 10;
            break;
        case "EN_MESSAGE_ERROR_NO_EMPTY_PLAYER":
        case 11:
            message.result = 11;
            break;
        case "EN_MESSAGE_ERROR_NOT_ALLOW_ACTION":
        case 12:
            message.result = 12;
            break;
        case "EN_MESSAGE_ERROR_UID_NOT_MATCH":
        case 13:
            message.result = 13;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_CHIPS":
        case 14:
            message.result = 14;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_WAIT_LIST":
        case 15:
            message.result = 15;
            break;
        case "EN_MESSAGE_ERROR_INVALID_GOOD_ID":
        case 16:
            message.result = 16;
            break;
        case "EN_MESSAGE_ERROR_BASE64_ENCODE":
        case 17:
            message.result = 17;
            break;
        case "EN_MESSAGE_ERROR_INVALID_WORD":
        case 18:
            message.result = 18;
            break;
        case "EN_MESSAGE_ERROR_INVALID_NICKNAME_LEN":
        case 19:
            message.result = 19;
            break;
        case "EN_MESSAGE_ERROR_PROP_FULL":
        case 20:
            message.result = 20;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PROP_ID":
        case 21:
            message.result = 21;
            break;
        case "EN_MESSAGE_ERROR_INVALID_AWARD_TYPE":
        case 22:
            message.result = 22;
            break;
        case "EN_MESSAGE_ERROR_SAME_ORDERID":
        case 23:
            message.result = 23;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID":
        case 24:
            message.result = 24;
            break;
        case "EN_MESSAGE_ERROR_INVALID_TABLE_STATE":
        case 25:
            message.result = 25;
            break;
        case "EN_MESSAGE_ERROR_INVALID_PLAYER_UID":
        case 26:
            message.result = 26;
            break;
        case "EN_MESSAGE_ERROR_GM_FAIL":
        case 27:
            message.result = 27;
            break;
        case "EN_MESSAGE_ERROR_INVALID_FCODEID":
        case 28:
            message.result = 28;
            break;
        case "EN_MESSAGE_ERROR_EXPIRED_FCODEID":
        case 29:
            message.result = 29;
            break;
        case "EN_MESSAGE_ERROR_INVALID_UID":
        case 30:
            message.result = 30;
            break;
        case "EN_MESSAGE_ERROR_INVALID_BANKRUPTCY_PROTECTION":
        case 31:
            message.result = 31;
            break;
        case "EN_MESSAGE_ERROR_SAME_IP_ALREADY_SIT":
        case 32:
            message.result = 32;
            break;
        case "EN_MESSAGE_ERROR_INVALID_ORDERID_PAYMENT":
        case 33:
            message.result = 33;
            break;
        case "EN_MESSAGE_ERROR_SHOP_CLOSE":
        case 34:
            message.result = 34;
            break;
        case "EN_MESSAGE_ERROR_INVALID_REQ_NOVICEPACKAGE":
        case 35:
            message.result = 35;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CONFIG":
        case 36:
            message.result = 36;
            break;
        case "EN_MESSAGE_ERROR_ALREADY_IN_OTHER_TABLE":
        case 42:
            message.result = 42;
            break;
        case "EN_MESSAGE_ERROR_NOT_IN_TABLE":
        case 66:
            message.result = 66;
            break;
        case "EN_MESSAGE_ERROR_TABLE_MAX_WAIT_PLAYER_NUM":
        case 39:
            message.result = 39;
            break;
        case "EN_MESSAGE_ERROR_CHAT_TOO_LONG":
        case 67:
            message.result = 67;
            break;
        case "EN_MESSAGE_ERROR_SNG_ALREADY_SIGNUP":
        case 68:
            message.result = 68;
            break;
        case "EN_MESSAGE_ERROR_WRONG_TABLE_TYPE":
        case 69:
            message.result = 69;
            break;
        case "EN_MESSAGE_ERROR_SNG_SIGNUP_TABLE_FULL":
        case 70:
            message.result = 70;
            break;
        case "EN_MESSAGE_ERROR_SNG_NOT_SIGNUP":
        case 71:
            message.result = 71;
            break;
        case "EN_MESSAGE_ERROR_TUO_GUAN_INVALID_STATUS":
        case 72:
            message.result = 72;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_NOT_ENOUGH":
        case 73:
            message.result = 73;
            break;
        case "EN_MESSAGE_ERROR_BUY_IN_TOO_MUCH":
        case 74:
            message.result = 74;
            break;
        case "EN_MESSAGE_ERROR_MORE_CHIPS_THAN_TRAINING_LEVEL":
        case 75:
            message.result = 75;
            break;
        case "EN_MESSAGE_ERROR_NO_OPEN_SEAT":
        case 76:
            message.result = 76;
            break;
        case "EN_MESSAGE_ERROR_OPEN_SEAT_FULL":
        case 77:
            message.result = 77;
            break;
        case "EN_MESSAGE_ERROR_NO_CONF":
        case 100:
            message.result = 100;
            break;
        case "EN_MESSAGE_ERROR_TABLE_FULL":
        case 101:
            message.result = 101;
            break;
        case "EN_MESSAGE_ERROR_INVALID_CREATE_TIME":
        case 102:
            message.result = 102;
            break;
        case "EN_MESSAGE_ERROR_CANT_BUY_IN_NOW":
        case 103:
            message.result = 103;
            break;
        case "EN_MESSAGE_ERROR_CREATE_FULL":
        case 104:
            message.result = 104;
            break;
        case "EN_MESSAGE_ERROR_TRAINING_CHANGE_COOL_DOWN_NOT_ENOUGH":
        case 105:
            message.result = 105;
            break;
        case "EN_MESSAGE_ERROR_SVR_TIMEOUT":
        case 10011:
            message.result = 10011;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_ROOM_SVR":
        case 10015:
            message.result = 10015;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GM_SVR":
        case 10016:
            message.result = 10016;
            break;
        case "EN_MESSAGE_ERROR_SHOPGEN_ORDER_TIMEOUT":
        case 10017:
            message.result = 10017;
            break;
        case "EN_MESSAGE_ERROR_KVDB_SELECT":
        case 10001:
            message.result = 10001;
            break;
        case "EN_MESSAGE_ERROR_KVDB_UPDATE":
        case 10002:
            message.result = 10002;
            break;
        case "EN_MESSAGE_ERROR_KVDB_DELETE":
        case 10003:
            message.result = 10003;
            break;
        case "EN_MESSAGE_ERROR_KVDB_INSERT":
        case 10004:
            message.result = 10004;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_SELECT":
        case 10005:
            message.result = 10005;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_UPDATE":
        case 10006:
            message.result = 10006;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_DELETE":
        case 10007:
            message.result = 10007;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_KVDB_INSERT":
        case 10008:
            message.result = 10008;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_GTPL_SVR":
        case 10012:
            message.result = 10012;
            break;
        case "EN_MESSAGE_ERROR_ROBOT_ACTION":
        case 10018:
            message.result = 10018;
            break;
        case "EN_MESSAGE_ERROR_NOT_ENOUGH_MYSQLDB_SESSION":
        case 10019:
            message.result = 10019;
            break;
        case "EN_MESSAGE_ERROR_ACCESS_MYSQLDB_FAILED":
        case 10020:
            message.result = 10020;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_SELECT":
        case 10021:
            message.result = 10021;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_UPDATE":
        case 10022:
            message.result = 10022;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_SELECT":
        case 10023:
            message.result = 10023;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_UPDATE":
        case 10024:
            message.result = 10024;
            break;
        case "EN_MESSAGE_ERROR_GTPL_ERROR":
        case 10025:
            message.result = 10025;
            break;
        case "EN_MESSAGE_ERROR_ROOMSVR_ERROR":
        case 10026:
            message.result = 10026;
            break;
        case "EN_MESSAGE_ERROR_GMSVR_ERROR":
        case 10027:
            message.result = 10027;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_INSERT":
        case 10028:
            message.result = 10028;
            break;
        case "EN_MESSAGE_ERROR_TIMEOUT_MYSQLDB_INSERT":
        case 10029:
            message.result = 10029;
            break;
        case "EN_MESSAGE_ERROR_SHOP_SVR":
        case 10030:
            message.result = 10030;
            break;
        case "EN_MESSAGE_ERROR_ACTIVITY_NOT_OPEN":
        case 10031:
            message.result = 10031;
            break;
        case "EN_MESSAGE_ERROR_MYSQLDB_NOT_FOUND":
        case 10032:
            message.result = 10032;
            break;
        case "EN_MESSAGE_ERROR_KVDB_FAILED":
        case 10033:
            message.result = 10033;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_ERROR":
        case 10034:
            message.result = 10034;
            break;
        case "EN_MESSAGE_ERROR_BASEDB_TIMEOUT":
        case 10035:
            message.result = 10035;
            break;
        case "EN_MESSAGE_ERROR_REDIS_QUERY_ERROR":
        case 10040:
            message.result = 10040;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_ERROR":
        case 10041:
            message.result = 10041;
            break;
        case "EN_MESSAGE_ERROR_REDIS_SAVE_VERSION_NOT_MATCH":
        case 10042:
            message.result = 10042;
            break;
        }
        if (object.rankKey != null)
            if ($util.Long)
                (message.rankKey = $util.Long.fromValue(object.rankKey)).unsigned = true;
            else if (typeof object.rankKey === "string")
                message.rankKey = parseInt(object.rankKey, 10);
            else if (typeof object.rankKey === "number")
                message.rankKey = object.rankKey;
            else if (typeof object.rankKey === "object")
                message.rankKey = new $util.LongBits(object.rankKey.low >>> 0, object.rankKey.high >>> 0).toNumber(true);
        if (object.rank != null)
            message.rank = object.rank >>> 0;
        if (object.rankListId != null)
            if ($util.Long)
                (message.rankListId = $util.Long.fromValue(object.rankListId)).unsigned = true;
            else if (typeof object.rankListId === "string")
                message.rankListId = parseInt(object.rankListId, 10);
            else if (typeof object.rankListId === "number")
                message.rankListId = object.rankListId;
            else if (typeof object.rankListId === "object")
                message.rankListId = new $util.LongBits(object.rankListId.low >>> 0, object.rankListId.high >>> 0).toNumber(true);
        if (object.csGtplData != null) {
            if (typeof object.csGtplData !== "object")
                throw TypeError(".CSResponsePlayerGTPList.csGtplData: object expected");
            message.csGtplData = $root.CSGTPLData.fromObject(object.csGtplData);
        }
        return message;
    };

    /**
     * Creates a plain object from a CSResponsePlayerGTPList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSResponsePlayerGTPList
     * @static
     * @param {CSResponsePlayerGTPList} message CSResponsePlayerGTPList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSResponsePlayerGTPList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankKey = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankKey = options.longs === String ? "0" : 0;
            object.result = options.enums === String ? "EN_MESSAGE_ERROR_OK" : 0;
            object.rank = 0;
            object.csGtplData = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.rankListId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.rankListId = options.longs === String ? "0" : 0;
        }
        if (message.rankKey != null && message.hasOwnProperty("rankKey"))
            if (typeof message.rankKey === "number")
                object.rankKey = options.longs === String ? String(message.rankKey) : message.rankKey;
            else
                object.rankKey = options.longs === String ? $util.Long.prototype.toString.call(message.rankKey) : options.longs === Number ? new $util.LongBits(message.rankKey.low >>> 0, message.rankKey.high >>> 0).toNumber(true) : message.rankKey;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.ENMessageError[message.result] : message.result;
        if (message.rank != null && message.hasOwnProperty("rank"))
            object.rank = message.rank;
        if (message.csGtplData != null && message.hasOwnProperty("csGtplData"))
            object.csGtplData = $root.CSGTPLData.toObject(message.csGtplData, options);
        if (message.rankListId != null && message.hasOwnProperty("rankListId"))
            if (typeof message.rankListId === "number")
                object.rankListId = options.longs === String ? String(message.rankListId) : message.rankListId;
            else
                object.rankListId = options.longs === String ? $util.Long.prototype.toString.call(message.rankListId) : options.longs === Number ? new $util.LongBits(message.rankListId.low >>> 0, message.rankListId.high >>> 0).toNumber(true) : message.rankListId;
        return object;
    };

    /**
     * Converts this CSResponsePlayerGTPList to JSON.
     * @function toJSON
     * @memberof CSResponsePlayerGTPList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSResponsePlayerGTPList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSResponsePlayerGTPList;
})();

$root.CSNotifyUpdate = (function() {

    /**
     * Properties of a CSNotifyUpdate.
     * @exports ICSNotifyUpdate
     * @interface ICSNotifyUpdate
     * @property {number|Long} [chip] CSNotifyUpdate chip
     * @property {number} [diamond] CSNotifyUpdate diamond
     */

    /**
     * Constructs a new CSNotifyUpdate.
     * @exports CSNotifyUpdate
     * @classdesc Represents a CSNotifyUpdate.
     * @constructor
     * @param {ICSNotifyUpdate=} [properties] Properties to set
     */
    function CSNotifyUpdate(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyUpdate chip.
     * @member {number|Long}chip
     * @memberof CSNotifyUpdate
     * @instance
     */
    CSNotifyUpdate.prototype.chip = $util.Long ? $util.Long.fromBits(-1,-1,false) : -1;

    /**
     * CSNotifyUpdate diamond.
     * @member {number}diamond
     * @memberof CSNotifyUpdate
     * @instance
     */
    CSNotifyUpdate.prototype.diamond = -1;

    /**
     * Creates a new CSNotifyUpdate instance using the specified properties.
     * @function create
     * @memberof CSNotifyUpdate
     * @static
     * @param {ICSNotifyUpdate=} [properties] Properties to set
     * @returns {CSNotifyUpdate} CSNotifyUpdate instance
     */
    CSNotifyUpdate.create = function create(properties) {
        return new CSNotifyUpdate(properties);
    };

    /**
     * Encodes the specified CSNotifyUpdate message. Does not implicitly {@link CSNotifyUpdate.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyUpdate
     * @static
     * @param {ICSNotifyUpdate} message CSNotifyUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyUpdate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.chip != null && message.hasOwnProperty("chip"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.chip);
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.diamond);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyUpdate message, length delimited. Does not implicitly {@link CSNotifyUpdate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyUpdate
     * @static
     * @param {ICSNotifyUpdate} message CSNotifyUpdate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyUpdate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyUpdate message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyUpdate} CSNotifyUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyUpdate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyUpdate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.chip = reader.int64();
                break;
            case 2:
                message.diamond = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyUpdate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyUpdate} CSNotifyUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyUpdate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyUpdate message.
     * @function verify
     * @memberof CSNotifyUpdate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyUpdate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (!$util.isInteger(message.chip) && !(message.chip && $util.isInteger(message.chip.low) && $util.isInteger(message.chip.high)))
                return "chip: integer|Long expected";
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            if (!$util.isInteger(message.diamond))
                return "diamond: integer expected";
        return null;
    };

    /**
     * Creates a CSNotifyUpdate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyUpdate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyUpdate} CSNotifyUpdate
     */
    CSNotifyUpdate.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyUpdate)
            return object;
        var message = new $root.CSNotifyUpdate();
        if (object.chip != null)
            if ($util.Long)
                (message.chip = $util.Long.fromValue(object.chip)).unsigned = false;
            else if (typeof object.chip === "string")
                message.chip = parseInt(object.chip, 10);
            else if (typeof object.chip === "number")
                message.chip = object.chip;
            else if (typeof object.chip === "object")
                message.chip = new $util.LongBits(object.chip.low >>> 0, object.chip.high >>> 0).toNumber();
        if (object.diamond != null)
            message.diamond = object.diamond | 0;
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyUpdate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyUpdate
     * @static
     * @param {CSNotifyUpdate} message CSNotifyUpdate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyUpdate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(-1, -1, false);
                object.chip = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.chip = options.longs === String ? "-1" : -1;
            object.diamond = -1;
        }
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (typeof message.chip === "number")
                object.chip = options.longs === String ? String(message.chip) : message.chip;
            else
                object.chip = options.longs === String ? $util.Long.prototype.toString.call(message.chip) : options.longs === Number ? new $util.LongBits(message.chip.low >>> 0, message.chip.high >>> 0).toNumber() : message.chip;
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            object.diamond = message.diamond;
        return object;
    };

    /**
     * Converts this CSNotifyUpdate to JSON.
     * @function toJSON
     * @memberof CSNotifyUpdate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyUpdate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyUpdate;
})();

$root.CSNotifyMessage = (function() {

    /**
     * Properties of a CSNotifyMessage.
     * @exports ICSNotifyMessage
     * @interface ICSNotifyMessage
     * @property {string} [content] CSNotifyMessage content
     */

    /**
     * Constructs a new CSNotifyMessage.
     * @exports CSNotifyMessage
     * @classdesc Represents a CSNotifyMessage.
     * @constructor
     * @param {ICSNotifyMessage=} [properties] Properties to set
     */
    function CSNotifyMessage(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifyMessage content.
     * @member {string}content
     * @memberof CSNotifyMessage
     * @instance
     */
    CSNotifyMessage.prototype.content = "";

    /**
     * Creates a new CSNotifyMessage instance using the specified properties.
     * @function create
     * @memberof CSNotifyMessage
     * @static
     * @param {ICSNotifyMessage=} [properties] Properties to set
     * @returns {CSNotifyMessage} CSNotifyMessage instance
     */
    CSNotifyMessage.create = function create(properties) {
        return new CSNotifyMessage(properties);
    };

    /**
     * Encodes the specified CSNotifyMessage message. Does not implicitly {@link CSNotifyMessage.verify|verify} messages.
     * @function encode
     * @memberof CSNotifyMessage
     * @static
     * @param {ICSNotifyMessage} message CSNotifyMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyMessage.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.content != null && message.hasOwnProperty("content"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
        return writer;
    };

    /**
     * Encodes the specified CSNotifyMessage message, length delimited. Does not implicitly {@link CSNotifyMessage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifyMessage
     * @static
     * @param {ICSNotifyMessage} message CSNotifyMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifyMessage.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifyMessage message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifyMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifyMessage} CSNotifyMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyMessage.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifyMessage();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.content = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifyMessage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifyMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifyMessage} CSNotifyMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifyMessage.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifyMessage message.
     * @function verify
     * @memberof CSNotifyMessage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifyMessage.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.content != null && message.hasOwnProperty("content"))
            if (!$util.isString(message.content))
                return "content: string expected";
        return null;
    };

    /**
     * Creates a CSNotifyMessage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifyMessage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifyMessage} CSNotifyMessage
     */
    CSNotifyMessage.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifyMessage)
            return object;
        var message = new $root.CSNotifyMessage();
        if (object.content != null)
            message.content = String(object.content);
        return message;
    };

    /**
     * Creates a plain object from a CSNotifyMessage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifyMessage
     * @static
     * @param {CSNotifyMessage} message CSNotifyMessage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifyMessage.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.content = "";
        if (message.content != null && message.hasOwnProperty("content"))
            object.content = message.content;
        return object;
    };

    /**
     * Converts this CSNotifyMessage to JSON.
     * @function toJSON
     * @memberof CSNotifyMessage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifyMessage.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifyMessage;
})();

$root.CSNotifySngStartSign = (function() {

    /**
     * Properties of a CSNotifySngStartSign.
     * @exports ICSNotifySngStartSign
     * @interface ICSNotifySngStartSign
     * @property {string} [name] CSNotifySngStartSign name
     * @property {number} [time] CSNotifySngStartSign time
     */

    /**
     * Constructs a new CSNotifySngStartSign.
     * @exports CSNotifySngStartSign
     * @classdesc Represents a CSNotifySngStartSign.
     * @constructor
     * @param {ICSNotifySngStartSign=} [properties] Properties to set
     */
    function CSNotifySngStartSign(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CSNotifySngStartSign name.
     * @member {string}name
     * @memberof CSNotifySngStartSign
     * @instance
     */
    CSNotifySngStartSign.prototype.name = "";

    /**
     * CSNotifySngStartSign time.
     * @member {number}time
     * @memberof CSNotifySngStartSign
     * @instance
     */
    CSNotifySngStartSign.prototype.time = 0;

    /**
     * Creates a new CSNotifySngStartSign instance using the specified properties.
     * @function create
     * @memberof CSNotifySngStartSign
     * @static
     * @param {ICSNotifySngStartSign=} [properties] Properties to set
     * @returns {CSNotifySngStartSign} CSNotifySngStartSign instance
     */
    CSNotifySngStartSign.create = function create(properties) {
        return new CSNotifySngStartSign(properties);
    };

    /**
     * Encodes the specified CSNotifySngStartSign message. Does not implicitly {@link CSNotifySngStartSign.verify|verify} messages.
     * @function encode
     * @memberof CSNotifySngStartSign
     * @static
     * @param {ICSNotifySngStartSign} message CSNotifySngStartSign message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifySngStartSign.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.time);
        return writer;
    };

    /**
     * Encodes the specified CSNotifySngStartSign message, length delimited. Does not implicitly {@link CSNotifySngStartSign.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CSNotifySngStartSign
     * @static
     * @param {ICSNotifySngStartSign} message CSNotifySngStartSign message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CSNotifySngStartSign.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CSNotifySngStartSign message from the specified reader or buffer.
     * @function decode
     * @memberof CSNotifySngStartSign
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CSNotifySngStartSign} CSNotifySngStartSign
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifySngStartSign.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSNotifySngStartSign();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.name = reader.string();
                break;
            case 2:
                message.time = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CSNotifySngStartSign message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CSNotifySngStartSign
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CSNotifySngStartSign} CSNotifySngStartSign
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CSNotifySngStartSign.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CSNotifySngStartSign message.
     * @function verify
     * @memberof CSNotifySngStartSign
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CSNotifySngStartSign.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        return null;
    };

    /**
     * Creates a CSNotifySngStartSign message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CSNotifySngStartSign
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CSNotifySngStartSign} CSNotifySngStartSign
     */
    CSNotifySngStartSign.fromObject = function fromObject(object) {
        if (object instanceof $root.CSNotifySngStartSign)
            return object;
        var message = new $root.CSNotifySngStartSign();
        if (object.name != null)
            message.name = String(object.name);
        if (object.time != null)
            message.time = object.time >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CSNotifySngStartSign message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CSNotifySngStartSign
     * @static
     * @param {CSNotifySngStartSign} message CSNotifySngStartSign
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CSNotifySngStartSign.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.name = "";
            object.time = 0;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        return object;
    };

    /**
     * Converts this CSNotifySngStartSign to JSON.
     * @function toJSON
     * @memberof CSNotifySngStartSign
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CSNotifySngStartSign.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CSNotifySngStartSign;
})();

$root.PBCSMsg = (function() {

    /**
     * Properties of a PBCSMsg.
     * @exports IPBCSMsg
     * @interface IPBCSMsg
     * @property {number|Long} [uid] PBCSMsg uid
     * @property {ICSRequestUpdateConfig} [csRequestUpdateConfig] PBCSMsg csRequestUpdateConfig
     * @property {ICSResponseUpdateConfig} [csResponseUpdateConfig] PBCSMsg csResponseUpdateConfig
     * @property {ICSRequestLogin} [csRequestLogin] PBCSMsg csRequestLogin
     * @property {ICSResponseLogin} [csResponseLogin] PBCSMsg csResponseLogin
     * @property {ICSNotifyLogout} [csNotifyLogout] PBCSMsg csNotifyLogout
     * @property {ICSRequestHeartBeat} [csRequestHeartBeat] PBCSMsg csRequestHeartBeat
     * @property {ICSResponseHeartBeat} [csResponseHeartBeat] PBCSMsg csResponseHeartBeat
     * @property {ICSResponseCommonError} [csResponseCommonError] PBCSMsg csResponseCommonError
     * @property {ICSRequestGameInfo} [csRequestGameInfo] PBCSMsg csRequestGameInfo
     * @property {ICSResponseGameInfo} [csResponseGameInfo] PBCSMsg csResponseGameInfo
     * @property {ICSRequestUserInfo} [csRequestUserInfo] PBCSMsg csRequestUserInfo
     * @property {ICSResponseUserInfo} [csResponseUserInfo] PBCSMsg csResponseUserInfo
     * @property {ICSRequestCreateTable} [csRequestCreateTable] PBCSMsg csRequestCreateTable
     * @property {ICSResponseCreateTable} [csResponseCreateTable] PBCSMsg csResponseCreateTable
     * @property {ICSRequestTableList} [csRequestTableList] PBCSMsg csRequestTableList
     * @property {ICSResponseTableList} [csResponseTableList] PBCSMsg csResponseTableList
     * @property {ICSRequestTableInfo} [csRequestTableInfo] PBCSMsg csRequestTableInfo
     * @property {ICSResponseTableInfo} [csRepsonseTableInfo] PBCSMsg csRepsonseTableInfo
     * @property {ICSRequestSngSignUp} [csRequestSngSignUp] PBCSMsg csRequestSngSignUp
     * @property {ICSResponseSngSignUp} [csResponseSngSignUp] PBCSMsg csResponseSngSignUp
     * @property {ICSRequestTableListBySubType} [csRequestTableListBySubtype] PBCSMsg csRequestTableListBySubtype
     * @property {ICSResponseTableListBySubType} [csResponseTableListBySubtype] PBCSMsg csResponseTableListBySubtype
     * @property {ICSRequestTableListByStatus} [csRequestTableListByStatus] PBCSMsg csRequestTableListByStatus
     * @property {ICSResponseTableListByStatus} [csResponseTableListByStatus] PBCSMsg csResponseTableListByStatus
     * @property {ICSRequestTrainingSignUp} [csRequestTrainingSignUp] PBCSMsg csRequestTrainingSignUp
     * @property {ICSResponseTrainingSignUp} [csResponseTrainingSignUp] PBCSMsg csResponseTrainingSignUp
     * @property {ICSRequestChangeTrainingTable} [csRequestChangeTrainingTable] PBCSMsg csRequestChangeTrainingTable
     * @property {ICSResponseChangeTrainingTable} [cs_ResponseChangeTrainingTable] PBCSMsg cs_ResponseChangeTrainingTable
     * @property {ICSRequestEnterTable} [csRequestEnterTable] PBCSMsg csRequestEnterTable
     * @property {ICSResponseEnterTable} [csResponseEnterTable] PBCSMsg csResponseEnterTable
     * @property {ICSRequestExitTable} [csRequestExitTable] PBCSMsg csRequestExitTable
     * @property {ICSResponseExitTable} [csResponseExitTable] PBCSMsg csResponseExitTable
     * @property {ICSRequestSitDown} [csRequestSitDown] PBCSMsg csRequestSitDown
     * @property {ICSResponseSitDown} [csResponseSitDown] PBCSMsg csResponseSitDown
     * @property {ICSRequestSitUp} [csRequestSitUp] PBCSMsg csRequestSitUp
     * @property {ICSResponseSitUp} [csResponseSitUp] PBCSMsg csResponseSitUp
     * @property {ICSNotifySitDown} [csNotifySitDown] PBCSMsg csNotifySitDown
     * @property {ICSNotifySitUp} [csNotifySitUp] PBCSMsg csNotifySitUp
     * @property {ICSNotifyGameStart} [csNotifyGameStart] PBCSMsg csNotifyGameStart
     * @property {ICSNotifyHoleCard} [csNotifyHoleCard] PBCSMsg csNotifyHoleCard
     * @property {ICSNotifyPotInfo} [csNotifyPotInfo] PBCSMsg csNotifyPotInfo
     * @property {ICSNotifyFlopCard} [csNotifyFlopCard] PBCSMsg csNotifyFlopCard
     * @property {ICSNotifyTurnCard} [csNotifyTurnCard] PBCSMsg csNotifyTurnCard
     * @property {ICSNotifyRiverCard} [csNotifyRiverCard] PBCSMsg csNotifyRiverCard
     * @property {ICSNotifyDoAction} [csNotifyDoAction] PBCSMsg csNotifyDoAction
     * @property {ICSNotifyGameEnd} [csNotifyGameEnd] PBCSMsg csNotifyGameEnd
     * @property {ICSRequestDoAction} [csRequestDoAction] PBCSMsg csRequestDoAction
     * @property {ICSResponseDoAction} [csResponseDoAction] PBCSMsg csResponseDoAction
     * @property {ICSNotifyActionResult} [csNotifyActionResult] PBCSMsg csNotifyActionResult
     * @property {ICSNotifyGameResult} [csNotifyGameResult] PBCSMsg csNotifyGameResult
     * @property {ICSNotifyTableClose} [csNotifyTableClose] PBCSMsg csNotifyTableClose
     * @property {ICSRequestStartGame} [csRequestStartGame] PBCSMsg csRequestStartGame
     * @property {ICSNotifyStartGame} [csNotifyStartGame] PBCSMsg csNotifyStartGame
     * @property {ICSRequestChat} [csRequestChat] PBCSMsg csRequestChat
     * @property {ICSResponseChat} [csResponseChat] PBCSMsg csResponseChat
     * @property {ICSNotifyChat} [csNotifyChat] PBCSMsg csNotifyChat
     * @property {ICSNotifyReconn} [csNotifyReconn] PBCSMsg csNotifyReconn
     * @property {ICSRequestTuoGuan} [csRequestTuoGuan] PBCSMsg csRequestTuoGuan
     * @property {ICSResponseTuoGuan} [csResponseTuoGuan] PBCSMsg csResponseTuoGuan
     * @property {ICSRequestBuyChip} [csRequestBuyChip] PBCSMsg csRequestBuyChip
     * @property {ICSResponseBuyChip} [csResponseBuyChip] PBCSMsg csResponseBuyChip
     * @property {ICSNotifyBuyChip} [csNotifyBuyChip] PBCSMsg csNotifyBuyChip
     * @property {ICSNotifyMaxBuyIn} [csNotifyMaxBuyIn] PBCSMsg csNotifyMaxBuyIn
     * @property {ICSNotifyRaiseBlind} [csNotifyRaiseBlind] PBCSMsg csNotifyRaiseBlind
     * @property {ICSNotifySngRank} [csNotifySngRank] PBCSMsg csNotifySngRank
     * @property {ICSNotifyTuoGuan} [csNotifyTuoGuan] PBCSMsg csNotifyTuoGuan
     * @property {ICSNotifyPlayerCards} [csNotifyPlayerCards] PBCSMsg csNotifyPlayerCards
     * @property {ICSRequestShowCards} [csRequestShowCards] PBCSMsg csRequestShowCards
     * @property {ICSNotifyShowCards} [csNotifyShowCards] PBCSMsg csNotifyShowCards
     * @property {ICSRequestResetTime} [csRequestResetTime] PBCSMsg csRequestResetTime
     * @property {ICSNotifyResetTime} [csNotifyResetTime] PBCSMsg csNotifyResetTime
     * @property {ICSRequestTableStat} [csRequestTableStat] PBCSMsg csRequestTableStat
     * @property {ICSResponseTableStat} [csRepsonseTableStat] PBCSMsg csRepsonseTableStat
     * @property {ICSRequestLastGameResult} [csRequestLastGameResult] PBCSMsg csRequestLastGameResult
     * @property {ICSResponseLastGameResult} [csResponseLastGameResult] PBCSMsg csResponseLastGameResult
     * @property {ICSRequestGTPList} [csRequestGtplist] PBCSMsg csRequestGtplist
     * @property {ICSResponseGTPList} [csResponseGtplist] PBCSMsg csResponseGtplist
     * @property {ICSRequestPlayerGTPList} [csRequestPlayerGtplist] PBCSMsg csRequestPlayerGtplist
     * @property {ICSResponsePlayerGTPList} [csResponsePlayerGtplist] PBCSMsg csResponsePlayerGtplist
     * @property {ICSNotifyUpdate} [csNotifyUpdate] PBCSMsg csNotifyUpdate
     * @property {ICSNotifyMessage} [csNotifyMessage] PBCSMsg csNotifyMessage
     * @property {ICSNotifySngStartSign} [csNotifySngStartSign] PBCSMsg csNotifySngStartSign
     */

    /**
     * Constructs a new PBCSMsg.
     * @exports PBCSMsg
     * @classdesc Represents a PBCSMsg.
     * @constructor
     * @param {IPBCSMsg=} [properties] Properties to set
     */
    function PBCSMsg(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBCSMsg uid.
     * @member {number|Long}uid
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBCSMsg csRequestUpdateConfig.
     * @member {(ICSRequestUpdateConfig|null|undefined)}csRequestUpdateConfig
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestUpdateConfig = null;

    /**
     * PBCSMsg csResponseUpdateConfig.
     * @member {(ICSResponseUpdateConfig|null|undefined)}csResponseUpdateConfig
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseUpdateConfig = null;

    /**
     * PBCSMsg csRequestLogin.
     * @member {(ICSRequestLogin|null|undefined)}csRequestLogin
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestLogin = null;

    /**
     * PBCSMsg csResponseLogin.
     * @member {(ICSResponseLogin|null|undefined)}csResponseLogin
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseLogin = null;

    /**
     * PBCSMsg csNotifyLogout.
     * @member {(ICSNotifyLogout|null|undefined)}csNotifyLogout
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyLogout = null;

    /**
     * PBCSMsg csRequestHeartBeat.
     * @member {(ICSRequestHeartBeat|null|undefined)}csRequestHeartBeat
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestHeartBeat = null;

    /**
     * PBCSMsg csResponseHeartBeat.
     * @member {(ICSResponseHeartBeat|null|undefined)}csResponseHeartBeat
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseHeartBeat = null;

    /**
     * PBCSMsg csResponseCommonError.
     * @member {(ICSResponseCommonError|null|undefined)}csResponseCommonError
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseCommonError = null;

    /**
     * PBCSMsg csRequestGameInfo.
     * @member {(ICSRequestGameInfo|null|undefined)}csRequestGameInfo
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestGameInfo = null;

    /**
     * PBCSMsg csResponseGameInfo.
     * @member {(ICSResponseGameInfo|null|undefined)}csResponseGameInfo
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseGameInfo = null;

    /**
     * PBCSMsg csRequestUserInfo.
     * @member {(ICSRequestUserInfo|null|undefined)}csRequestUserInfo
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestUserInfo = null;

    /**
     * PBCSMsg csResponseUserInfo.
     * @member {(ICSResponseUserInfo|null|undefined)}csResponseUserInfo
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseUserInfo = null;

    /**
     * PBCSMsg csRequestCreateTable.
     * @member {(ICSRequestCreateTable|null|undefined)}csRequestCreateTable
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestCreateTable = null;

    /**
     * PBCSMsg csResponseCreateTable.
     * @member {(ICSResponseCreateTable|null|undefined)}csResponseCreateTable
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseCreateTable = null;

    /**
     * PBCSMsg csRequestTableList.
     * @member {(ICSRequestTableList|null|undefined)}csRequestTableList
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestTableList = null;

    /**
     * PBCSMsg csResponseTableList.
     * @member {(ICSResponseTableList|null|undefined)}csResponseTableList
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseTableList = null;

    /**
     * PBCSMsg csRequestTableInfo.
     * @member {(ICSRequestTableInfo|null|undefined)}csRequestTableInfo
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestTableInfo = null;

    /**
     * PBCSMsg csRepsonseTableInfo.
     * @member {(ICSResponseTableInfo|null|undefined)}csRepsonseTableInfo
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRepsonseTableInfo = null;

    /**
     * PBCSMsg csRequestSngSignUp.
     * @member {(ICSRequestSngSignUp|null|undefined)}csRequestSngSignUp
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestSngSignUp = null;

    /**
     * PBCSMsg csResponseSngSignUp.
     * @member {(ICSResponseSngSignUp|null|undefined)}csResponseSngSignUp
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseSngSignUp = null;

    /**
     * PBCSMsg csRequestTableListBySubtype.
     * @member {(ICSRequestTableListBySubType|null|undefined)}csRequestTableListBySubtype
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestTableListBySubtype = null;

    /**
     * PBCSMsg csResponseTableListBySubtype.
     * @member {(ICSResponseTableListBySubType|null|undefined)}csResponseTableListBySubtype
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseTableListBySubtype = null;

    /**
     * PBCSMsg csRequestTableListByStatus.
     * @member {(ICSRequestTableListByStatus|null|undefined)}csRequestTableListByStatus
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestTableListByStatus = null;

    /**
     * PBCSMsg csResponseTableListByStatus.
     * @member {(ICSResponseTableListByStatus|null|undefined)}csResponseTableListByStatus
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseTableListByStatus = null;

    /**
     * PBCSMsg csRequestTrainingSignUp.
     * @member {(ICSRequestTrainingSignUp|null|undefined)}csRequestTrainingSignUp
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestTrainingSignUp = null;

    /**
     * PBCSMsg csResponseTrainingSignUp.
     * @member {(ICSResponseTrainingSignUp|null|undefined)}csResponseTrainingSignUp
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseTrainingSignUp = null;

    /**
     * PBCSMsg csRequestChangeTrainingTable.
     * @member {(ICSRequestChangeTrainingTable|null|undefined)}csRequestChangeTrainingTable
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestChangeTrainingTable = null;

    /**
     * PBCSMsg cs_ResponseChangeTrainingTable.
     * @member {(ICSResponseChangeTrainingTable|null|undefined)}cs_ResponseChangeTrainingTable
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.cs_ResponseChangeTrainingTable = null;

    /**
     * PBCSMsg csRequestEnterTable.
     * @member {(ICSRequestEnterTable|null|undefined)}csRequestEnterTable
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestEnterTable = null;

    /**
     * PBCSMsg csResponseEnterTable.
     * @member {(ICSResponseEnterTable|null|undefined)}csResponseEnterTable
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseEnterTable = null;

    /**
     * PBCSMsg csRequestExitTable.
     * @member {(ICSRequestExitTable|null|undefined)}csRequestExitTable
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestExitTable = null;

    /**
     * PBCSMsg csResponseExitTable.
     * @member {(ICSResponseExitTable|null|undefined)}csResponseExitTable
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseExitTable = null;

    /**
     * PBCSMsg csRequestSitDown.
     * @member {(ICSRequestSitDown|null|undefined)}csRequestSitDown
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestSitDown = null;

    /**
     * PBCSMsg csResponseSitDown.
     * @member {(ICSResponseSitDown|null|undefined)}csResponseSitDown
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseSitDown = null;

    /**
     * PBCSMsg csRequestSitUp.
     * @member {(ICSRequestSitUp|null|undefined)}csRequestSitUp
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestSitUp = null;

    /**
     * PBCSMsg csResponseSitUp.
     * @member {(ICSResponseSitUp|null|undefined)}csResponseSitUp
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseSitUp = null;

    /**
     * PBCSMsg csNotifySitDown.
     * @member {(ICSNotifySitDown|null|undefined)}csNotifySitDown
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifySitDown = null;

    /**
     * PBCSMsg csNotifySitUp.
     * @member {(ICSNotifySitUp|null|undefined)}csNotifySitUp
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifySitUp = null;

    /**
     * PBCSMsg csNotifyGameStart.
     * @member {(ICSNotifyGameStart|null|undefined)}csNotifyGameStart
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyGameStart = null;

    /**
     * PBCSMsg csNotifyHoleCard.
     * @member {(ICSNotifyHoleCard|null|undefined)}csNotifyHoleCard
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyHoleCard = null;

    /**
     * PBCSMsg csNotifyPotInfo.
     * @member {(ICSNotifyPotInfo|null|undefined)}csNotifyPotInfo
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyPotInfo = null;

    /**
     * PBCSMsg csNotifyFlopCard.
     * @member {(ICSNotifyFlopCard|null|undefined)}csNotifyFlopCard
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyFlopCard = null;

    /**
     * PBCSMsg csNotifyTurnCard.
     * @member {(ICSNotifyTurnCard|null|undefined)}csNotifyTurnCard
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyTurnCard = null;

    /**
     * PBCSMsg csNotifyRiverCard.
     * @member {(ICSNotifyRiverCard|null|undefined)}csNotifyRiverCard
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyRiverCard = null;

    /**
     * PBCSMsg csNotifyDoAction.
     * @member {(ICSNotifyDoAction|null|undefined)}csNotifyDoAction
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyDoAction = null;

    /**
     * PBCSMsg csNotifyGameEnd.
     * @member {(ICSNotifyGameEnd|null|undefined)}csNotifyGameEnd
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyGameEnd = null;

    /**
     * PBCSMsg csRequestDoAction.
     * @member {(ICSRequestDoAction|null|undefined)}csRequestDoAction
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestDoAction = null;

    /**
     * PBCSMsg csResponseDoAction.
     * @member {(ICSResponseDoAction|null|undefined)}csResponseDoAction
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseDoAction = null;

    /**
     * PBCSMsg csNotifyActionResult.
     * @member {(ICSNotifyActionResult|null|undefined)}csNotifyActionResult
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyActionResult = null;

    /**
     * PBCSMsg csNotifyGameResult.
     * @member {(ICSNotifyGameResult|null|undefined)}csNotifyGameResult
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyGameResult = null;

    /**
     * PBCSMsg csNotifyTableClose.
     * @member {(ICSNotifyTableClose|null|undefined)}csNotifyTableClose
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyTableClose = null;

    /**
     * PBCSMsg csRequestStartGame.
     * @member {(ICSRequestStartGame|null|undefined)}csRequestStartGame
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestStartGame = null;

    /**
     * PBCSMsg csNotifyStartGame.
     * @member {(ICSNotifyStartGame|null|undefined)}csNotifyStartGame
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyStartGame = null;

    /**
     * PBCSMsg csRequestChat.
     * @member {(ICSRequestChat|null|undefined)}csRequestChat
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestChat = null;

    /**
     * PBCSMsg csResponseChat.
     * @member {(ICSResponseChat|null|undefined)}csResponseChat
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseChat = null;

    /**
     * PBCSMsg csNotifyChat.
     * @member {(ICSNotifyChat|null|undefined)}csNotifyChat
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyChat = null;

    /**
     * PBCSMsg csNotifyReconn.
     * @member {(ICSNotifyReconn|null|undefined)}csNotifyReconn
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyReconn = null;

    /**
     * PBCSMsg csRequestTuoGuan.
     * @member {(ICSRequestTuoGuan|null|undefined)}csRequestTuoGuan
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestTuoGuan = null;

    /**
     * PBCSMsg csResponseTuoGuan.
     * @member {(ICSResponseTuoGuan|null|undefined)}csResponseTuoGuan
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseTuoGuan = null;

    /**
     * PBCSMsg csRequestBuyChip.
     * @member {(ICSRequestBuyChip|null|undefined)}csRequestBuyChip
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestBuyChip = null;

    /**
     * PBCSMsg csResponseBuyChip.
     * @member {(ICSResponseBuyChip|null|undefined)}csResponseBuyChip
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseBuyChip = null;

    /**
     * PBCSMsg csNotifyBuyChip.
     * @member {(ICSNotifyBuyChip|null|undefined)}csNotifyBuyChip
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyBuyChip = null;

    /**
     * PBCSMsg csNotifyMaxBuyIn.
     * @member {(ICSNotifyMaxBuyIn|null|undefined)}csNotifyMaxBuyIn
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyMaxBuyIn = null;

    /**
     * PBCSMsg csNotifyRaiseBlind.
     * @member {(ICSNotifyRaiseBlind|null|undefined)}csNotifyRaiseBlind
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyRaiseBlind = null;

    /**
     * PBCSMsg csNotifySngRank.
     * @member {(ICSNotifySngRank|null|undefined)}csNotifySngRank
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifySngRank = null;

    /**
     * PBCSMsg csNotifyTuoGuan.
     * @member {(ICSNotifyTuoGuan|null|undefined)}csNotifyTuoGuan
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyTuoGuan = null;

    /**
     * PBCSMsg csNotifyPlayerCards.
     * @member {(ICSNotifyPlayerCards|null|undefined)}csNotifyPlayerCards
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyPlayerCards = null;

    /**
     * PBCSMsg csRequestShowCards.
     * @member {(ICSRequestShowCards|null|undefined)}csRequestShowCards
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestShowCards = null;

    /**
     * PBCSMsg csNotifyShowCards.
     * @member {(ICSNotifyShowCards|null|undefined)}csNotifyShowCards
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyShowCards = null;

    /**
     * PBCSMsg csRequestResetTime.
     * @member {(ICSRequestResetTime|null|undefined)}csRequestResetTime
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestResetTime = null;

    /**
     * PBCSMsg csNotifyResetTime.
     * @member {(ICSNotifyResetTime|null|undefined)}csNotifyResetTime
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyResetTime = null;

    /**
     * PBCSMsg csRequestTableStat.
     * @member {(ICSRequestTableStat|null|undefined)}csRequestTableStat
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestTableStat = null;

    /**
     * PBCSMsg csRepsonseTableStat.
     * @member {(ICSResponseTableStat|null|undefined)}csRepsonseTableStat
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRepsonseTableStat = null;

    /**
     * PBCSMsg csRequestLastGameResult.
     * @member {(ICSRequestLastGameResult|null|undefined)}csRequestLastGameResult
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestLastGameResult = null;

    /**
     * PBCSMsg csResponseLastGameResult.
     * @member {(ICSResponseLastGameResult|null|undefined)}csResponseLastGameResult
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseLastGameResult = null;

    /**
     * PBCSMsg csRequestGtplist.
     * @member {(ICSRequestGTPList|null|undefined)}csRequestGtplist
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestGtplist = null;

    /**
     * PBCSMsg csResponseGtplist.
     * @member {(ICSResponseGTPList|null|undefined)}csResponseGtplist
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponseGtplist = null;

    /**
     * PBCSMsg csRequestPlayerGtplist.
     * @member {(ICSRequestPlayerGTPList|null|undefined)}csRequestPlayerGtplist
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csRequestPlayerGtplist = null;

    /**
     * PBCSMsg csResponsePlayerGtplist.
     * @member {(ICSResponsePlayerGTPList|null|undefined)}csResponsePlayerGtplist
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csResponsePlayerGtplist = null;

    /**
     * PBCSMsg csNotifyUpdate.
     * @member {(ICSNotifyUpdate|null|undefined)}csNotifyUpdate
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyUpdate = null;

    /**
     * PBCSMsg csNotifyMessage.
     * @member {(ICSNotifyMessage|null|undefined)}csNotifyMessage
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifyMessage = null;

    /**
     * PBCSMsg csNotifySngStartSign.
     * @member {(ICSNotifySngStartSign|null|undefined)}csNotifySngStartSign
     * @memberof PBCSMsg
     * @instance
     */
    PBCSMsg.prototype.csNotifySngStartSign = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PBCSMsg msgUnion.
     * @member {string|undefined} msgUnion
     * @memberof PBCSMsg
     * @instance
     */
    Object.defineProperty(PBCSMsg.prototype, "msgUnion", {
        get: $util.oneOfGetter($oneOfFields = ["csRequestUpdateConfig", "csResponseUpdateConfig", "csRequestLogin", "csResponseLogin", "csNotifyLogout", "csRequestHeartBeat", "csResponseHeartBeat", "csResponseCommonError", "csRequestGameInfo", "csResponseGameInfo", "csRequestUserInfo", "csResponseUserInfo", "csRequestCreateTable", "csResponseCreateTable", "csRequestTableList", "csResponseTableList", "csRequestTableInfo", "csRepsonseTableInfo", "csRequestSngSignUp", "csResponseSngSignUp", "csRequestTableListBySubtype", "csResponseTableListBySubtype", "csRequestTableListByStatus", "csResponseTableListByStatus", "csRequestTrainingSignUp", "csResponseTrainingSignUp", "csRequestChangeTrainingTable", "cs_ResponseChangeTrainingTable", "csRequestEnterTable", "csResponseEnterTable", "csRequestExitTable", "csResponseExitTable", "csRequestSitDown", "csResponseSitDown", "csRequestSitUp", "csResponseSitUp", "csNotifySitDown", "csNotifySitUp", "csNotifyGameStart", "csNotifyHoleCard", "csNotifyPotInfo", "csNotifyFlopCard", "csNotifyTurnCard", "csNotifyRiverCard", "csNotifyDoAction", "csNotifyGameEnd", "csRequestDoAction", "csResponseDoAction", "csNotifyActionResult", "csNotifyGameResult", "csNotifyTableClose", "csRequestStartGame", "csNotifyStartGame", "csRequestChat", "csResponseChat", "csNotifyChat", "csNotifyReconn", "csRequestTuoGuan", "csResponseTuoGuan", "csRequestBuyChip", "csResponseBuyChip", "csNotifyBuyChip", "csNotifyMaxBuyIn", "csNotifyRaiseBlind", "csNotifySngRank", "csNotifyTuoGuan", "csNotifyPlayerCards", "csRequestShowCards", "csNotifyShowCards", "csRequestResetTime", "csNotifyResetTime", "csRequestTableStat", "csRepsonseTableStat", "csRequestLastGameResult", "csResponseLastGameResult", "csRequestGtplist", "csResponseGtplist", "csRequestPlayerGtplist", "csResponsePlayerGtplist", "csNotifyUpdate", "csNotifyMessage", "csNotifySngStartSign"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PBCSMsg instance using the specified properties.
     * @function create
     * @memberof PBCSMsg
     * @static
     * @param {IPBCSMsg=} [properties] Properties to set
     * @returns {PBCSMsg} PBCSMsg instance
     */
    PBCSMsg.create = function create(properties) {
        return new PBCSMsg(properties);
    };

    /**
     * Encodes the specified PBCSMsg message. Does not implicitly {@link PBCSMsg.verify|verify} messages.
     * @function encode
     * @memberof PBCSMsg
     * @static
     * @param {IPBCSMsg} message PBCSMsg message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBCSMsg.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
        if (message.csRequestLogin != null && message.hasOwnProperty("csRequestLogin"))
            $root.CSRequestLogin.encode(message.csRequestLogin, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.csResponseLogin != null && message.hasOwnProperty("csResponseLogin"))
            $root.CSResponseLogin.encode(message.csResponseLogin, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.csNotifyLogout != null && message.hasOwnProperty("csNotifyLogout"))
            $root.CSNotifyLogout.encode(message.csNotifyLogout, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.csRequestHeartBeat != null && message.hasOwnProperty("csRequestHeartBeat"))
            $root.CSRequestHeartBeat.encode(message.csRequestHeartBeat, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.csResponseHeartBeat != null && message.hasOwnProperty("csResponseHeartBeat"))
            $root.CSResponseHeartBeat.encode(message.csResponseHeartBeat, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.csResponseCommonError != null && message.hasOwnProperty("csResponseCommonError"))
            $root.CSResponseCommonError.encode(message.csResponseCommonError, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.csRequestUpdateConfig != null && message.hasOwnProperty("csRequestUpdateConfig"))
            $root.CSRequestUpdateConfig.encode(message.csRequestUpdateConfig, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.csResponseUpdateConfig != null && message.hasOwnProperty("csResponseUpdateConfig"))
            $root.CSResponseUpdateConfig.encode(message.csResponseUpdateConfig, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.csRequestGameInfo != null && message.hasOwnProperty("csRequestGameInfo"))
            $root.CSRequestGameInfo.encode(message.csRequestGameInfo, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.csResponseGameInfo != null && message.hasOwnProperty("csResponseGameInfo"))
            $root.CSResponseGameInfo.encode(message.csResponseGameInfo, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.csRequestUserInfo != null && message.hasOwnProperty("csRequestUserInfo"))
            $root.CSRequestUserInfo.encode(message.csRequestUserInfo, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        if (message.csResponseUserInfo != null && message.hasOwnProperty("csResponseUserInfo"))
            $root.CSResponseUserInfo.encode(message.csResponseUserInfo, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        if (message.csRequestCreateTable != null && message.hasOwnProperty("csRequestCreateTable"))
            $root.CSRequestCreateTable.encode(message.csRequestCreateTable, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
        if (message.csResponseCreateTable != null && message.hasOwnProperty("csResponseCreateTable"))
            $root.CSResponseCreateTable.encode(message.csResponseCreateTable, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
        if (message.csRequestTableList != null && message.hasOwnProperty("csRequestTableList"))
            $root.CSRequestTableList.encode(message.csRequestTableList, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
        if (message.csResponseTableList != null && message.hasOwnProperty("csResponseTableList"))
            $root.CSResponseTableList.encode(message.csResponseTableList, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
        if (message.csRequestTableInfo != null && message.hasOwnProperty("csRequestTableInfo"))
            $root.CSRequestTableInfo.encode(message.csRequestTableInfo, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
        if (message.csRepsonseTableInfo != null && message.hasOwnProperty("csRepsonseTableInfo"))
            $root.CSResponseTableInfo.encode(message.csRepsonseTableInfo, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
        if (message.csRequestSngSignUp != null && message.hasOwnProperty("csRequestSngSignUp"))
            $root.CSRequestSngSignUp.encode(message.csRequestSngSignUp, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
        if (message.csResponseSngSignUp != null && message.hasOwnProperty("csResponseSngSignUp"))
            $root.CSResponseSngSignUp.encode(message.csResponseSngSignUp, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
        if (message.csRequestStartGame != null && message.hasOwnProperty("csRequestStartGame"))
            $root.CSRequestStartGame.encode(message.csRequestStartGame, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
        if (message.csNotifyStartGame != null && message.hasOwnProperty("csNotifyStartGame"))
            $root.CSNotifyStartGame.encode(message.csNotifyStartGame, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
        if (message.csRequestTableListBySubtype != null && message.hasOwnProperty("csRequestTableListBySubtype"))
            $root.CSRequestTableListBySubType.encode(message.csRequestTableListBySubtype, writer.uint32(/* id 43, wireType 2 =*/346).fork()).ldelim();
        if (message.csResponseTableListBySubtype != null && message.hasOwnProperty("csResponseTableListBySubtype"))
            $root.CSResponseTableListBySubType.encode(message.csResponseTableListBySubtype, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
        if (message.csRequestTableListByStatus != null && message.hasOwnProperty("csRequestTableListByStatus"))
            $root.CSRequestTableListByStatus.encode(message.csRequestTableListByStatus, writer.uint32(/* id 45, wireType 2 =*/362).fork()).ldelim();
        if (message.csResponseTableListByStatus != null && message.hasOwnProperty("csResponseTableListByStatus"))
            $root.CSResponseTableListByStatus.encode(message.csResponseTableListByStatus, writer.uint32(/* id 46, wireType 2 =*/370).fork()).ldelim();
        if (message.csRequestTrainingSignUp != null && message.hasOwnProperty("csRequestTrainingSignUp"))
            $root.CSRequestTrainingSignUp.encode(message.csRequestTrainingSignUp, writer.uint32(/* id 47, wireType 2 =*/378).fork()).ldelim();
        if (message.csResponseTrainingSignUp != null && message.hasOwnProperty("csResponseTrainingSignUp"))
            $root.CSResponseTrainingSignUp.encode(message.csResponseTrainingSignUp, writer.uint32(/* id 48, wireType 2 =*/386).fork()).ldelim();
        if (message.csRequestChangeTrainingTable != null && message.hasOwnProperty("csRequestChangeTrainingTable"))
            $root.CSRequestChangeTrainingTable.encode(message.csRequestChangeTrainingTable, writer.uint32(/* id 49, wireType 2 =*/394).fork()).ldelim();
        if (message.cs_ResponseChangeTrainingTable != null && message.hasOwnProperty("cs_ResponseChangeTrainingTable"))
            $root.CSResponseChangeTrainingTable.encode(message.cs_ResponseChangeTrainingTable, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
        if (message.csRequestSitDown != null && message.hasOwnProperty("csRequestSitDown"))
            $root.CSRequestSitDown.encode(message.csRequestSitDown, writer.uint32(/* id 51, wireType 2 =*/410).fork()).ldelim();
        if (message.csResponseSitDown != null && message.hasOwnProperty("csResponseSitDown"))
            $root.CSResponseSitDown.encode(message.csResponseSitDown, writer.uint32(/* id 52, wireType 2 =*/418).fork()).ldelim();
        if (message.csNotifyGameStart != null && message.hasOwnProperty("csNotifyGameStart"))
            $root.CSNotifyGameStart.encode(message.csNotifyGameStart, writer.uint32(/* id 53, wireType 2 =*/426).fork()).ldelim();
        if (message.csNotifyTableClose != null && message.hasOwnProperty("csNotifyTableClose"))
            $root.CSNotifyTableClose.encode(message.csNotifyTableClose, writer.uint32(/* id 54, wireType 2 =*/434).fork()).ldelim();
        if (message.csNotifyHoleCard != null && message.hasOwnProperty("csNotifyHoleCard"))
            $root.CSNotifyHoleCard.encode(message.csNotifyHoleCard, writer.uint32(/* id 55, wireType 2 =*/442).fork()).ldelim();
        if (message.csNotifyPotInfo != null && message.hasOwnProperty("csNotifyPotInfo"))
            $root.CSNotifyPotInfo.encode(message.csNotifyPotInfo, writer.uint32(/* id 56, wireType 2 =*/450).fork()).ldelim();
        if (message.csNotifyFlopCard != null && message.hasOwnProperty("csNotifyFlopCard"))
            $root.CSNotifyFlopCard.encode(message.csNotifyFlopCard, writer.uint32(/* id 57, wireType 2 =*/458).fork()).ldelim();
        if (message.csNotifyTurnCard != null && message.hasOwnProperty("csNotifyTurnCard"))
            $root.CSNotifyTurnCard.encode(message.csNotifyTurnCard, writer.uint32(/* id 58, wireType 2 =*/466).fork()).ldelim();
        if (message.csNotifyRiverCard != null && message.hasOwnProperty("csNotifyRiverCard"))
            $root.CSNotifyRiverCard.encode(message.csNotifyRiverCard, writer.uint32(/* id 59, wireType 2 =*/474).fork()).ldelim();
        if (message.csNotifyDoAction != null && message.hasOwnProperty("csNotifyDoAction"))
            $root.CSNotifyDoAction.encode(message.csNotifyDoAction, writer.uint32(/* id 60, wireType 2 =*/482).fork()).ldelim();
        if (message.csRequestDoAction != null && message.hasOwnProperty("csRequestDoAction"))
            $root.CSRequestDoAction.encode(message.csRequestDoAction, writer.uint32(/* id 61, wireType 2 =*/490).fork()).ldelim();
        if (message.csResponseDoAction != null && message.hasOwnProperty("csResponseDoAction"))
            $root.CSResponseDoAction.encode(message.csResponseDoAction, writer.uint32(/* id 62, wireType 2 =*/498).fork()).ldelim();
        if (message.csNotifyActionResult != null && message.hasOwnProperty("csNotifyActionResult"))
            $root.CSNotifyActionResult.encode(message.csNotifyActionResult, writer.uint32(/* id 63, wireType 2 =*/506).fork()).ldelim();
        if (message.csNotifyGameResult != null && message.hasOwnProperty("csNotifyGameResult"))
            $root.CSNotifyGameResult.encode(message.csNotifyGameResult, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
        if (message.csRequestEnterTable != null && message.hasOwnProperty("csRequestEnterTable"))
            $root.CSRequestEnterTable.encode(message.csRequestEnterTable, writer.uint32(/* id 65, wireType 2 =*/522).fork()).ldelim();
        if (message.csResponseEnterTable != null && message.hasOwnProperty("csResponseEnterTable"))
            $root.CSResponseEnterTable.encode(message.csResponseEnterTable, writer.uint32(/* id 66, wireType 2 =*/530).fork()).ldelim();
        if (message.csNotifySitDown != null && message.hasOwnProperty("csNotifySitDown"))
            $root.CSNotifySitDown.encode(message.csNotifySitDown, writer.uint32(/* id 67, wireType 2 =*/538).fork()).ldelim();
        if (message.csNotifySitUp != null && message.hasOwnProperty("csNotifySitUp"))
            $root.CSNotifySitUp.encode(message.csNotifySitUp, writer.uint32(/* id 68, wireType 2 =*/546).fork()).ldelim();
        if (message.csRequestExitTable != null && message.hasOwnProperty("csRequestExitTable"))
            $root.CSRequestExitTable.encode(message.csRequestExitTable, writer.uint32(/* id 69, wireType 2 =*/554).fork()).ldelim();
        if (message.csResponseExitTable != null && message.hasOwnProperty("csResponseExitTable"))
            $root.CSResponseExitTable.encode(message.csResponseExitTable, writer.uint32(/* id 70, wireType 2 =*/562).fork()).ldelim();
        if (message.csRequestSitUp != null && message.hasOwnProperty("csRequestSitUp"))
            $root.CSRequestSitUp.encode(message.csRequestSitUp, writer.uint32(/* id 71, wireType 2 =*/570).fork()).ldelim();
        if (message.csResponseSitUp != null && message.hasOwnProperty("csResponseSitUp"))
            $root.CSResponseSitUp.encode(message.csResponseSitUp, writer.uint32(/* id 72, wireType 2 =*/578).fork()).ldelim();
        if (message.csRequestChat != null && message.hasOwnProperty("csRequestChat"))
            $root.CSRequestChat.encode(message.csRequestChat, writer.uint32(/* id 76, wireType 2 =*/610).fork()).ldelim();
        if (message.csResponseChat != null && message.hasOwnProperty("csResponseChat"))
            $root.CSResponseChat.encode(message.csResponseChat, writer.uint32(/* id 77, wireType 2 =*/618).fork()).ldelim();
        if (message.csNotifyChat != null && message.hasOwnProperty("csNotifyChat"))
            $root.CSNotifyChat.encode(message.csNotifyChat, writer.uint32(/* id 78, wireType 2 =*/626).fork()).ldelim();
        if (message.csRequestTuoGuan != null && message.hasOwnProperty("csRequestTuoGuan"))
            $root.CSRequestTuoGuan.encode(message.csRequestTuoGuan, writer.uint32(/* id 80, wireType 2 =*/642).fork()).ldelim();
        if (message.csResponseTuoGuan != null && message.hasOwnProperty("csResponseTuoGuan"))
            $root.CSResponseTuoGuan.encode(message.csResponseTuoGuan, writer.uint32(/* id 81, wireType 2 =*/650).fork()).ldelim();
        if (message.csRequestGtplist != null && message.hasOwnProperty("csRequestGtplist"))
            $root.CSRequestGTPList.encode(message.csRequestGtplist, writer.uint32(/* id 87, wireType 2 =*/698).fork()).ldelim();
        if (message.csResponseGtplist != null && message.hasOwnProperty("csResponseGtplist"))
            $root.CSResponseGTPList.encode(message.csResponseGtplist, writer.uint32(/* id 88, wireType 2 =*/706).fork()).ldelim();
        if (message.csRequestPlayerGtplist != null && message.hasOwnProperty("csRequestPlayerGtplist"))
            $root.CSRequestPlayerGTPList.encode(message.csRequestPlayerGtplist, writer.uint32(/* id 89, wireType 2 =*/714).fork()).ldelim();
        if (message.csResponsePlayerGtplist != null && message.hasOwnProperty("csResponsePlayerGtplist"))
            $root.CSResponsePlayerGTPList.encode(message.csResponsePlayerGtplist, writer.uint32(/* id 90, wireType 2 =*/722).fork()).ldelim();
        if (message.csNotifyUpdate != null && message.hasOwnProperty("csNotifyUpdate"))
            $root.CSNotifyUpdate.encode(message.csNotifyUpdate, writer.uint32(/* id 91, wireType 2 =*/730).fork()).ldelim();
        if (message.csNotifyMessage != null && message.hasOwnProperty("csNotifyMessage"))
            $root.CSNotifyMessage.encode(message.csNotifyMessage, writer.uint32(/* id 92, wireType 2 =*/738).fork()).ldelim();
        if (message.csNotifySngStartSign != null && message.hasOwnProperty("csNotifySngStartSign"))
            $root.CSNotifySngStartSign.encode(message.csNotifySngStartSign, writer.uint32(/* id 93, wireType 2 =*/746).fork()).ldelim();
        if (message.csNotifyGameEnd != null && message.hasOwnProperty("csNotifyGameEnd"))
            $root.CSNotifyGameEnd.encode(message.csNotifyGameEnd, writer.uint32(/* id 94, wireType 2 =*/754).fork()).ldelim();
        if (message.csNotifyReconn != null && message.hasOwnProperty("csNotifyReconn"))
            $root.CSNotifyReconn.encode(message.csNotifyReconn, writer.uint32(/* id 122, wireType 2 =*/978).fork()).ldelim();
        if (message.csRequestBuyChip != null && message.hasOwnProperty("csRequestBuyChip"))
            $root.CSRequestBuyChip.encode(message.csRequestBuyChip, writer.uint32(/* id 161, wireType 2 =*/1290).fork()).ldelim();
        if (message.csResponseBuyChip != null && message.hasOwnProperty("csResponseBuyChip"))
            $root.CSResponseBuyChip.encode(message.csResponseBuyChip, writer.uint32(/* id 162, wireType 2 =*/1298).fork()).ldelim();
        if (message.csNotifyBuyChip != null && message.hasOwnProperty("csNotifyBuyChip"))
            $root.CSNotifyBuyChip.encode(message.csNotifyBuyChip, writer.uint32(/* id 163, wireType 2 =*/1306).fork()).ldelim();
        if (message.csNotifyMaxBuyIn != null && message.hasOwnProperty("csNotifyMaxBuyIn"))
            $root.CSNotifyMaxBuyIn.encode(message.csNotifyMaxBuyIn, writer.uint32(/* id 164, wireType 2 =*/1314).fork()).ldelim();
        if (message.csNotifyRaiseBlind != null && message.hasOwnProperty("csNotifyRaiseBlind"))
            $root.CSNotifyRaiseBlind.encode(message.csNotifyRaiseBlind, writer.uint32(/* id 165, wireType 2 =*/1322).fork()).ldelim();
        if (message.csNotifySngRank != null && message.hasOwnProperty("csNotifySngRank"))
            $root.CSNotifySngRank.encode(message.csNotifySngRank, writer.uint32(/* id 166, wireType 2 =*/1330).fork()).ldelim();
        if (message.csNotifyTuoGuan != null && message.hasOwnProperty("csNotifyTuoGuan"))
            $root.CSNotifyTuoGuan.encode(message.csNotifyTuoGuan, writer.uint32(/* id 167, wireType 2 =*/1338).fork()).ldelim();
        if (message.csNotifyPlayerCards != null && message.hasOwnProperty("csNotifyPlayerCards"))
            $root.CSNotifyPlayerCards.encode(message.csNotifyPlayerCards, writer.uint32(/* id 168, wireType 2 =*/1346).fork()).ldelim();
        if (message.csRequestShowCards != null && message.hasOwnProperty("csRequestShowCards"))
            $root.CSRequestShowCards.encode(message.csRequestShowCards, writer.uint32(/* id 169, wireType 2 =*/1354).fork()).ldelim();
        if (message.csNotifyShowCards != null && message.hasOwnProperty("csNotifyShowCards"))
            $root.CSNotifyShowCards.encode(message.csNotifyShowCards, writer.uint32(/* id 170, wireType 2 =*/1362).fork()).ldelim();
        if (message.csRequestResetTime != null && message.hasOwnProperty("csRequestResetTime"))
            $root.CSRequestResetTime.encode(message.csRequestResetTime, writer.uint32(/* id 171, wireType 2 =*/1370).fork()).ldelim();
        if (message.csNotifyResetTime != null && message.hasOwnProperty("csNotifyResetTime"))
            $root.CSNotifyResetTime.encode(message.csNotifyResetTime, writer.uint32(/* id 172, wireType 2 =*/1378).fork()).ldelim();
        if (message.csRequestTableStat != null && message.hasOwnProperty("csRequestTableStat"))
            $root.CSRequestTableStat.encode(message.csRequestTableStat, writer.uint32(/* id 184, wireType 2 =*/1474).fork()).ldelim();
        if (message.csRepsonseTableStat != null && message.hasOwnProperty("csRepsonseTableStat"))
            $root.CSResponseTableStat.encode(message.csRepsonseTableStat, writer.uint32(/* id 185, wireType 2 =*/1482).fork()).ldelim();
        if (message.csRequestLastGameResult != null && message.hasOwnProperty("csRequestLastGameResult"))
            $root.CSRequestLastGameResult.encode(message.csRequestLastGameResult, writer.uint32(/* id 186, wireType 2 =*/1490).fork()).ldelim();
        if (message.csResponseLastGameResult != null && message.hasOwnProperty("csResponseLastGameResult"))
            $root.CSResponseLastGameResult.encode(message.csResponseLastGameResult, writer.uint32(/* id 187, wireType 2 =*/1498).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PBCSMsg message, length delimited. Does not implicitly {@link PBCSMsg.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBCSMsg
     * @static
     * @param {IPBCSMsg} message PBCSMsg message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBCSMsg.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBCSMsg message from the specified reader or buffer.
     * @function decode
     * @memberof PBCSMsg
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBCSMsg} PBCSMsg
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBCSMsg.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBCSMsg();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.uint64();
                break;
            case 11:
                message.csRequestUpdateConfig = $root.CSRequestUpdateConfig.decode(reader, reader.uint32());
                break;
            case 12:
                message.csResponseUpdateConfig = $root.CSResponseUpdateConfig.decode(reader, reader.uint32());
                break;
            case 3:
                message.csRequestLogin = $root.CSRequestLogin.decode(reader, reader.uint32());
                break;
            case 4:
                message.csResponseLogin = $root.CSResponseLogin.decode(reader, reader.uint32());
                break;
            case 7:
                message.csNotifyLogout = $root.CSNotifyLogout.decode(reader, reader.uint32());
                break;
            case 8:
                message.csRequestHeartBeat = $root.CSRequestHeartBeat.decode(reader, reader.uint32());
                break;
            case 9:
                message.csResponseHeartBeat = $root.CSResponseHeartBeat.decode(reader, reader.uint32());
                break;
            case 10:
                message.csResponseCommonError = $root.CSResponseCommonError.decode(reader, reader.uint32());
                break;
            case 13:
                message.csRequestGameInfo = $root.CSRequestGameInfo.decode(reader, reader.uint32());
                break;
            case 14:
                message.csResponseGameInfo = $root.CSResponseGameInfo.decode(reader, reader.uint32());
                break;
            case 15:
                message.csRequestUserInfo = $root.CSRequestUserInfo.decode(reader, reader.uint32());
                break;
            case 16:
                message.csResponseUserInfo = $root.CSResponseUserInfo.decode(reader, reader.uint32());
                break;
            case 31:
                message.csRequestCreateTable = $root.CSRequestCreateTable.decode(reader, reader.uint32());
                break;
            case 32:
                message.csResponseCreateTable = $root.CSResponseCreateTable.decode(reader, reader.uint32());
                break;
            case 33:
                message.csRequestTableList = $root.CSRequestTableList.decode(reader, reader.uint32());
                break;
            case 34:
                message.csResponseTableList = $root.CSResponseTableList.decode(reader, reader.uint32());
                break;
            case 35:
                message.csRequestTableInfo = $root.CSRequestTableInfo.decode(reader, reader.uint32());
                break;
            case 36:
                message.csRepsonseTableInfo = $root.CSResponseTableInfo.decode(reader, reader.uint32());
                break;
            case 37:
                message.csRequestSngSignUp = $root.CSRequestSngSignUp.decode(reader, reader.uint32());
                break;
            case 38:
                message.csResponseSngSignUp = $root.CSResponseSngSignUp.decode(reader, reader.uint32());
                break;
            case 43:
                message.csRequestTableListBySubtype = $root.CSRequestTableListBySubType.decode(reader, reader.uint32());
                break;
            case 44:
                message.csResponseTableListBySubtype = $root.CSResponseTableListBySubType.decode(reader, reader.uint32());
                break;
            case 45:
                message.csRequestTableListByStatus = $root.CSRequestTableListByStatus.decode(reader, reader.uint32());
                break;
            case 46:
                message.csResponseTableListByStatus = $root.CSResponseTableListByStatus.decode(reader, reader.uint32());
                break;
            case 47:
                message.csRequestTrainingSignUp = $root.CSRequestTrainingSignUp.decode(reader, reader.uint32());
                break;
            case 48:
                message.csResponseTrainingSignUp = $root.CSResponseTrainingSignUp.decode(reader, reader.uint32());
                break;
            case 49:
                message.csRequestChangeTrainingTable = $root.CSRequestChangeTrainingTable.decode(reader, reader.uint32());
                break;
            case 50:
                message.cs_ResponseChangeTrainingTable = $root.CSResponseChangeTrainingTable.decode(reader, reader.uint32());
                break;
            case 65:
                message.csRequestEnterTable = $root.CSRequestEnterTable.decode(reader, reader.uint32());
                break;
            case 66:
                message.csResponseEnterTable = $root.CSResponseEnterTable.decode(reader, reader.uint32());
                break;
            case 69:
                message.csRequestExitTable = $root.CSRequestExitTable.decode(reader, reader.uint32());
                break;
            case 70:
                message.csResponseExitTable = $root.CSResponseExitTable.decode(reader, reader.uint32());
                break;
            case 51:
                message.csRequestSitDown = $root.CSRequestSitDown.decode(reader, reader.uint32());
                break;
            case 52:
                message.csResponseSitDown = $root.CSResponseSitDown.decode(reader, reader.uint32());
                break;
            case 71:
                message.csRequestSitUp = $root.CSRequestSitUp.decode(reader, reader.uint32());
                break;
            case 72:
                message.csResponseSitUp = $root.CSResponseSitUp.decode(reader, reader.uint32());
                break;
            case 67:
                message.csNotifySitDown = $root.CSNotifySitDown.decode(reader, reader.uint32());
                break;
            case 68:
                message.csNotifySitUp = $root.CSNotifySitUp.decode(reader, reader.uint32());
                break;
            case 53:
                message.csNotifyGameStart = $root.CSNotifyGameStart.decode(reader, reader.uint32());
                break;
            case 55:
                message.csNotifyHoleCard = $root.CSNotifyHoleCard.decode(reader, reader.uint32());
                break;
            case 56:
                message.csNotifyPotInfo = $root.CSNotifyPotInfo.decode(reader, reader.uint32());
                break;
            case 57:
                message.csNotifyFlopCard = $root.CSNotifyFlopCard.decode(reader, reader.uint32());
                break;
            case 58:
                message.csNotifyTurnCard = $root.CSNotifyTurnCard.decode(reader, reader.uint32());
                break;
            case 59:
                message.csNotifyRiverCard = $root.CSNotifyRiverCard.decode(reader, reader.uint32());
                break;
            case 60:
                message.csNotifyDoAction = $root.CSNotifyDoAction.decode(reader, reader.uint32());
                break;
            case 94:
                message.csNotifyGameEnd = $root.CSNotifyGameEnd.decode(reader, reader.uint32());
                break;
            case 61:
                message.csRequestDoAction = $root.CSRequestDoAction.decode(reader, reader.uint32());
                break;
            case 62:
                message.csResponseDoAction = $root.CSResponseDoAction.decode(reader, reader.uint32());
                break;
            case 63:
                message.csNotifyActionResult = $root.CSNotifyActionResult.decode(reader, reader.uint32());
                break;
            case 64:
                message.csNotifyGameResult = $root.CSNotifyGameResult.decode(reader, reader.uint32());
                break;
            case 54:
                message.csNotifyTableClose = $root.CSNotifyTableClose.decode(reader, reader.uint32());
                break;
            case 40:
                message.csRequestStartGame = $root.CSRequestStartGame.decode(reader, reader.uint32());
                break;
            case 41:
                message.csNotifyStartGame = $root.CSNotifyStartGame.decode(reader, reader.uint32());
                break;
            case 76:
                message.csRequestChat = $root.CSRequestChat.decode(reader, reader.uint32());
                break;
            case 77:
                message.csResponseChat = $root.CSResponseChat.decode(reader, reader.uint32());
                break;
            case 78:
                message.csNotifyChat = $root.CSNotifyChat.decode(reader, reader.uint32());
                break;
            case 122:
                message.csNotifyReconn = $root.CSNotifyReconn.decode(reader, reader.uint32());
                break;
            case 80:
                message.csRequestTuoGuan = $root.CSRequestTuoGuan.decode(reader, reader.uint32());
                break;
            case 81:
                message.csResponseTuoGuan = $root.CSResponseTuoGuan.decode(reader, reader.uint32());
                break;
            case 161:
                message.csRequestBuyChip = $root.CSRequestBuyChip.decode(reader, reader.uint32());
                break;
            case 162:
                message.csResponseBuyChip = $root.CSResponseBuyChip.decode(reader, reader.uint32());
                break;
            case 163:
                message.csNotifyBuyChip = $root.CSNotifyBuyChip.decode(reader, reader.uint32());
                break;
            case 164:
                message.csNotifyMaxBuyIn = $root.CSNotifyMaxBuyIn.decode(reader, reader.uint32());
                break;
            case 165:
                message.csNotifyRaiseBlind = $root.CSNotifyRaiseBlind.decode(reader, reader.uint32());
                break;
            case 166:
                message.csNotifySngRank = $root.CSNotifySngRank.decode(reader, reader.uint32());
                break;
            case 167:
                message.csNotifyTuoGuan = $root.CSNotifyTuoGuan.decode(reader, reader.uint32());
                break;
            case 168:
                message.csNotifyPlayerCards = $root.CSNotifyPlayerCards.decode(reader, reader.uint32());
                break;
            case 169:
                message.csRequestShowCards = $root.CSRequestShowCards.decode(reader, reader.uint32());
                break;
            case 170:
                message.csNotifyShowCards = $root.CSNotifyShowCards.decode(reader, reader.uint32());
                break;
            case 171:
                message.csRequestResetTime = $root.CSRequestResetTime.decode(reader, reader.uint32());
                break;
            case 172:
                message.csNotifyResetTime = $root.CSNotifyResetTime.decode(reader, reader.uint32());
                break;
            case 184:
                message.csRequestTableStat = $root.CSRequestTableStat.decode(reader, reader.uint32());
                break;
            case 185:
                message.csRepsonseTableStat = $root.CSResponseTableStat.decode(reader, reader.uint32());
                break;
            case 186:
                message.csRequestLastGameResult = $root.CSRequestLastGameResult.decode(reader, reader.uint32());
                break;
            case 187:
                message.csResponseLastGameResult = $root.CSResponseLastGameResult.decode(reader, reader.uint32());
                break;
            case 87:
                message.csRequestGtplist = $root.CSRequestGTPList.decode(reader, reader.uint32());
                break;
            case 88:
                message.csResponseGtplist = $root.CSResponseGTPList.decode(reader, reader.uint32());
                break;
            case 89:
                message.csRequestPlayerGtplist = $root.CSRequestPlayerGTPList.decode(reader, reader.uint32());
                break;
            case 90:
                message.csResponsePlayerGtplist = $root.CSResponsePlayerGTPList.decode(reader, reader.uint32());
                break;
            case 91:
                message.csNotifyUpdate = $root.CSNotifyUpdate.decode(reader, reader.uint32());
                break;
            case 92:
                message.csNotifyMessage = $root.CSNotifyMessage.decode(reader, reader.uint32());
                break;
            case 93:
                message.csNotifySngStartSign = $root.CSNotifySngStartSign.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBCSMsg message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBCSMsg
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBCSMsg} PBCSMsg
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBCSMsg.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBCSMsg message.
     * @function verify
     * @memberof PBCSMsg
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBCSMsg.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
        if (message.csRequestUpdateConfig != null && message.hasOwnProperty("csRequestUpdateConfig")) {
            properties.msgUnion = 1;
            var error = $root.CSRequestUpdateConfig.verify(message.csRequestUpdateConfig);
            if (error)
                return "csRequestUpdateConfig." + error;
        }
        if (message.csResponseUpdateConfig != null && message.hasOwnProperty("csResponseUpdateConfig")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseUpdateConfig.verify(message.csResponseUpdateConfig);
            if (error)
                return "csResponseUpdateConfig." + error;
        }
        if (message.csRequestLogin != null && message.hasOwnProperty("csRequestLogin")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestLogin.verify(message.csRequestLogin);
            if (error)
                return "csRequestLogin." + error;
        }
        if (message.csResponseLogin != null && message.hasOwnProperty("csResponseLogin")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseLogin.verify(message.csResponseLogin);
            if (error)
                return "csResponseLogin." + error;
        }
        if (message.csNotifyLogout != null && message.hasOwnProperty("csNotifyLogout")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyLogout.verify(message.csNotifyLogout);
            if (error)
                return "csNotifyLogout." + error;
        }
        if (message.csRequestHeartBeat != null && message.hasOwnProperty("csRequestHeartBeat")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestHeartBeat.verify(message.csRequestHeartBeat);
            if (error)
                return "csRequestHeartBeat." + error;
        }
        if (message.csResponseHeartBeat != null && message.hasOwnProperty("csResponseHeartBeat")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseHeartBeat.verify(message.csResponseHeartBeat);
            if (error)
                return "csResponseHeartBeat." + error;
        }
        if (message.csResponseCommonError != null && message.hasOwnProperty("csResponseCommonError")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseCommonError.verify(message.csResponseCommonError);
            if (error)
                return "csResponseCommonError." + error;
        }
        if (message.csRequestGameInfo != null && message.hasOwnProperty("csRequestGameInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestGameInfo.verify(message.csRequestGameInfo);
            if (error)
                return "csRequestGameInfo." + error;
        }
        if (message.csResponseGameInfo != null && message.hasOwnProperty("csResponseGameInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseGameInfo.verify(message.csResponseGameInfo);
            if (error)
                return "csResponseGameInfo." + error;
        }
        if (message.csRequestUserInfo != null && message.hasOwnProperty("csRequestUserInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestUserInfo.verify(message.csRequestUserInfo);
            if (error)
                return "csRequestUserInfo." + error;
        }
        if (message.csResponseUserInfo != null && message.hasOwnProperty("csResponseUserInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseUserInfo.verify(message.csResponseUserInfo);
            if (error)
                return "csResponseUserInfo." + error;
        }
        if (message.csRequestCreateTable != null && message.hasOwnProperty("csRequestCreateTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestCreateTable.verify(message.csRequestCreateTable);
            if (error)
                return "csRequestCreateTable." + error;
        }
        if (message.csResponseCreateTable != null && message.hasOwnProperty("csResponseCreateTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseCreateTable.verify(message.csResponseCreateTable);
            if (error)
                return "csResponseCreateTable." + error;
        }
        if (message.csRequestTableList != null && message.hasOwnProperty("csRequestTableList")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTableList.verify(message.csRequestTableList);
            if (error)
                return "csRequestTableList." + error;
        }
        if (message.csResponseTableList != null && message.hasOwnProperty("csResponseTableList")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTableList.verify(message.csResponseTableList);
            if (error)
                return "csResponseTableList." + error;
        }
        if (message.csRequestTableInfo != null && message.hasOwnProperty("csRequestTableInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTableInfo.verify(message.csRequestTableInfo);
            if (error)
                return "csRequestTableInfo." + error;
        }
        if (message.csRepsonseTableInfo != null && message.hasOwnProperty("csRepsonseTableInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTableInfo.verify(message.csRepsonseTableInfo);
            if (error)
                return "csRepsonseTableInfo." + error;
        }
        if (message.csRequestSngSignUp != null && message.hasOwnProperty("csRequestSngSignUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestSngSignUp.verify(message.csRequestSngSignUp);
            if (error)
                return "csRequestSngSignUp." + error;
        }
        if (message.csResponseSngSignUp != null && message.hasOwnProperty("csResponseSngSignUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseSngSignUp.verify(message.csResponseSngSignUp);
            if (error)
                return "csResponseSngSignUp." + error;
        }
        if (message.csRequestTableListBySubtype != null && message.hasOwnProperty("csRequestTableListBySubtype")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTableListBySubType.verify(message.csRequestTableListBySubtype);
            if (error)
                return "csRequestTableListBySubtype." + error;
        }
        if (message.csResponseTableListBySubtype != null && message.hasOwnProperty("csResponseTableListBySubtype")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTableListBySubType.verify(message.csResponseTableListBySubtype);
            if (error)
                return "csResponseTableListBySubtype." + error;
        }
        if (message.csRequestTableListByStatus != null && message.hasOwnProperty("csRequestTableListByStatus")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTableListByStatus.verify(message.csRequestTableListByStatus);
            if (error)
                return "csRequestTableListByStatus." + error;
        }
        if (message.csResponseTableListByStatus != null && message.hasOwnProperty("csResponseTableListByStatus")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTableListByStatus.verify(message.csResponseTableListByStatus);
            if (error)
                return "csResponseTableListByStatus." + error;
        }
        if (message.csRequestTrainingSignUp != null && message.hasOwnProperty("csRequestTrainingSignUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTrainingSignUp.verify(message.csRequestTrainingSignUp);
            if (error)
                return "csRequestTrainingSignUp." + error;
        }
        if (message.csResponseTrainingSignUp != null && message.hasOwnProperty("csResponseTrainingSignUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTrainingSignUp.verify(message.csResponseTrainingSignUp);
            if (error)
                return "csResponseTrainingSignUp." + error;
        }
        if (message.csRequestChangeTrainingTable != null && message.hasOwnProperty("csRequestChangeTrainingTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestChangeTrainingTable.verify(message.csRequestChangeTrainingTable);
            if (error)
                return "csRequestChangeTrainingTable." + error;
        }
        if (message.cs_ResponseChangeTrainingTable != null && message.hasOwnProperty("cs_ResponseChangeTrainingTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseChangeTrainingTable.verify(message.cs_ResponseChangeTrainingTable);
            if (error)
                return "cs_ResponseChangeTrainingTable." + error;
        }
        if (message.csRequestEnterTable != null && message.hasOwnProperty("csRequestEnterTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestEnterTable.verify(message.csRequestEnterTable);
            if (error)
                return "csRequestEnterTable." + error;
        }
        if (message.csResponseEnterTable != null && message.hasOwnProperty("csResponseEnterTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseEnterTable.verify(message.csResponseEnterTable);
            if (error)
                return "csResponseEnterTable." + error;
        }
        if (message.csRequestExitTable != null && message.hasOwnProperty("csRequestExitTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestExitTable.verify(message.csRequestExitTable);
            if (error)
                return "csRequestExitTable." + error;
        }
        if (message.csResponseExitTable != null && message.hasOwnProperty("csResponseExitTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseExitTable.verify(message.csResponseExitTable);
            if (error)
                return "csResponseExitTable." + error;
        }
        if (message.csRequestSitDown != null && message.hasOwnProperty("csRequestSitDown")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestSitDown.verify(message.csRequestSitDown);
            if (error)
                return "csRequestSitDown." + error;
        }
        if (message.csResponseSitDown != null && message.hasOwnProperty("csResponseSitDown")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseSitDown.verify(message.csResponseSitDown);
            if (error)
                return "csResponseSitDown." + error;
        }
        if (message.csRequestSitUp != null && message.hasOwnProperty("csRequestSitUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestSitUp.verify(message.csRequestSitUp);
            if (error)
                return "csRequestSitUp." + error;
        }
        if (message.csResponseSitUp != null && message.hasOwnProperty("csResponseSitUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseSitUp.verify(message.csResponseSitUp);
            if (error)
                return "csResponseSitUp." + error;
        }
        if (message.csNotifySitDown != null && message.hasOwnProperty("csNotifySitDown")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifySitDown.verify(message.csNotifySitDown);
            if (error)
                return "csNotifySitDown." + error;
        }
        if (message.csNotifySitUp != null && message.hasOwnProperty("csNotifySitUp")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifySitUp.verify(message.csNotifySitUp);
            if (error)
                return "csNotifySitUp." + error;
        }
        if (message.csNotifyGameStart != null && message.hasOwnProperty("csNotifyGameStart")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyGameStart.verify(message.csNotifyGameStart);
            if (error)
                return "csNotifyGameStart." + error;
        }
        if (message.csNotifyHoleCard != null && message.hasOwnProperty("csNotifyHoleCard")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyHoleCard.verify(message.csNotifyHoleCard);
            if (error)
                return "csNotifyHoleCard." + error;
        }
        if (message.csNotifyPotInfo != null && message.hasOwnProperty("csNotifyPotInfo")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyPotInfo.verify(message.csNotifyPotInfo);
            if (error)
                return "csNotifyPotInfo." + error;
        }
        if (message.csNotifyFlopCard != null && message.hasOwnProperty("csNotifyFlopCard")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyFlopCard.verify(message.csNotifyFlopCard);
            if (error)
                return "csNotifyFlopCard." + error;
        }
        if (message.csNotifyTurnCard != null && message.hasOwnProperty("csNotifyTurnCard")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyTurnCard.verify(message.csNotifyTurnCard);
            if (error)
                return "csNotifyTurnCard." + error;
        }
        if (message.csNotifyRiverCard != null && message.hasOwnProperty("csNotifyRiverCard")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyRiverCard.verify(message.csNotifyRiverCard);
            if (error)
                return "csNotifyRiverCard." + error;
        }
        if (message.csNotifyDoAction != null && message.hasOwnProperty("csNotifyDoAction")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyDoAction.verify(message.csNotifyDoAction);
            if (error)
                return "csNotifyDoAction." + error;
        }
        if (message.csNotifyGameEnd != null && message.hasOwnProperty("csNotifyGameEnd")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyGameEnd.verify(message.csNotifyGameEnd);
            if (error)
                return "csNotifyGameEnd." + error;
        }
        if (message.csRequestDoAction != null && message.hasOwnProperty("csRequestDoAction")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestDoAction.verify(message.csRequestDoAction);
            if (error)
                return "csRequestDoAction." + error;
        }
        if (message.csResponseDoAction != null && message.hasOwnProperty("csResponseDoAction")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseDoAction.verify(message.csResponseDoAction);
            if (error)
                return "csResponseDoAction." + error;
        }
        if (message.csNotifyActionResult != null && message.hasOwnProperty("csNotifyActionResult")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyActionResult.verify(message.csNotifyActionResult);
            if (error)
                return "csNotifyActionResult." + error;
        }
        if (message.csNotifyGameResult != null && message.hasOwnProperty("csNotifyGameResult")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyGameResult.verify(message.csNotifyGameResult);
            if (error)
                return "csNotifyGameResult." + error;
        }
        if (message.csNotifyTableClose != null && message.hasOwnProperty("csNotifyTableClose")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyTableClose.verify(message.csNotifyTableClose);
            if (error)
                return "csNotifyTableClose." + error;
        }
        if (message.csRequestStartGame != null && message.hasOwnProperty("csRequestStartGame")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestStartGame.verify(message.csRequestStartGame);
            if (error)
                return "csRequestStartGame." + error;
        }
        if (message.csNotifyStartGame != null && message.hasOwnProperty("csNotifyStartGame")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyStartGame.verify(message.csNotifyStartGame);
            if (error)
                return "csNotifyStartGame." + error;
        }
        if (message.csRequestChat != null && message.hasOwnProperty("csRequestChat")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestChat.verify(message.csRequestChat);
            if (error)
                return "csRequestChat." + error;
        }
        if (message.csResponseChat != null && message.hasOwnProperty("csResponseChat")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseChat.verify(message.csResponseChat);
            if (error)
                return "csResponseChat." + error;
        }
        if (message.csNotifyChat != null && message.hasOwnProperty("csNotifyChat")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyChat.verify(message.csNotifyChat);
            if (error)
                return "csNotifyChat." + error;
        }
        if (message.csNotifyReconn != null && message.hasOwnProperty("csNotifyReconn")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyReconn.verify(message.csNotifyReconn);
            if (error)
                return "csNotifyReconn." + error;
        }
        if (message.csRequestTuoGuan != null && message.hasOwnProperty("csRequestTuoGuan")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTuoGuan.verify(message.csRequestTuoGuan);
            if (error)
                return "csRequestTuoGuan." + error;
        }
        if (message.csResponseTuoGuan != null && message.hasOwnProperty("csResponseTuoGuan")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTuoGuan.verify(message.csResponseTuoGuan);
            if (error)
                return "csResponseTuoGuan." + error;
        }
        if (message.csRequestBuyChip != null && message.hasOwnProperty("csRequestBuyChip")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestBuyChip.verify(message.csRequestBuyChip);
            if (error)
                return "csRequestBuyChip." + error;
        }
        if (message.csResponseBuyChip != null && message.hasOwnProperty("csResponseBuyChip")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseBuyChip.verify(message.csResponseBuyChip);
            if (error)
                return "csResponseBuyChip." + error;
        }
        if (message.csNotifyBuyChip != null && message.hasOwnProperty("csNotifyBuyChip")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyBuyChip.verify(message.csNotifyBuyChip);
            if (error)
                return "csNotifyBuyChip." + error;
        }
        if (message.csNotifyMaxBuyIn != null && message.hasOwnProperty("csNotifyMaxBuyIn")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyMaxBuyIn.verify(message.csNotifyMaxBuyIn);
            if (error)
                return "csNotifyMaxBuyIn." + error;
        }
        if (message.csNotifyRaiseBlind != null && message.hasOwnProperty("csNotifyRaiseBlind")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyRaiseBlind.verify(message.csNotifyRaiseBlind);
            if (error)
                return "csNotifyRaiseBlind." + error;
        }
        if (message.csNotifySngRank != null && message.hasOwnProperty("csNotifySngRank")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifySngRank.verify(message.csNotifySngRank);
            if (error)
                return "csNotifySngRank." + error;
        }
        if (message.csNotifyTuoGuan != null && message.hasOwnProperty("csNotifyTuoGuan")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyTuoGuan.verify(message.csNotifyTuoGuan);
            if (error)
                return "csNotifyTuoGuan." + error;
        }
        if (message.csNotifyPlayerCards != null && message.hasOwnProperty("csNotifyPlayerCards")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyPlayerCards.verify(message.csNotifyPlayerCards);
            if (error)
                return "csNotifyPlayerCards." + error;
        }
        if (message.csRequestShowCards != null && message.hasOwnProperty("csRequestShowCards")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestShowCards.verify(message.csRequestShowCards);
            if (error)
                return "csRequestShowCards." + error;
        }
        if (message.csNotifyShowCards != null && message.hasOwnProperty("csNotifyShowCards")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyShowCards.verify(message.csNotifyShowCards);
            if (error)
                return "csNotifyShowCards." + error;
        }
        if (message.csRequestResetTime != null && message.hasOwnProperty("csRequestResetTime")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestResetTime.verify(message.csRequestResetTime);
            if (error)
                return "csRequestResetTime." + error;
        }
        if (message.csNotifyResetTime != null && message.hasOwnProperty("csNotifyResetTime")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyResetTime.verify(message.csNotifyResetTime);
            if (error)
                return "csNotifyResetTime." + error;
        }
        if (message.csRequestTableStat != null && message.hasOwnProperty("csRequestTableStat")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestTableStat.verify(message.csRequestTableStat);
            if (error)
                return "csRequestTableStat." + error;
        }
        if (message.csRepsonseTableStat != null && message.hasOwnProperty("csRepsonseTableStat")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseTableStat.verify(message.csRepsonseTableStat);
            if (error)
                return "csRepsonseTableStat." + error;
        }
        if (message.csRequestLastGameResult != null && message.hasOwnProperty("csRequestLastGameResult")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestLastGameResult.verify(message.csRequestLastGameResult);
            if (error)
                return "csRequestLastGameResult." + error;
        }
        if (message.csResponseLastGameResult != null && message.hasOwnProperty("csResponseLastGameResult")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseLastGameResult.verify(message.csResponseLastGameResult);
            if (error)
                return "csResponseLastGameResult." + error;
        }
        if (message.csRequestGtplist != null && message.hasOwnProperty("csRequestGtplist")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestGTPList.verify(message.csRequestGtplist);
            if (error)
                return "csRequestGtplist." + error;
        }
        if (message.csResponseGtplist != null && message.hasOwnProperty("csResponseGtplist")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponseGTPList.verify(message.csResponseGtplist);
            if (error)
                return "csResponseGtplist." + error;
        }
        if (message.csRequestPlayerGtplist != null && message.hasOwnProperty("csRequestPlayerGtplist")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSRequestPlayerGTPList.verify(message.csRequestPlayerGtplist);
            if (error)
                return "csRequestPlayerGtplist." + error;
        }
        if (message.csResponsePlayerGtplist != null && message.hasOwnProperty("csResponsePlayerGtplist")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSResponsePlayerGTPList.verify(message.csResponsePlayerGtplist);
            if (error)
                return "csResponsePlayerGtplist." + error;
        }
        if (message.csNotifyUpdate != null && message.hasOwnProperty("csNotifyUpdate")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyUpdate.verify(message.csNotifyUpdate);
            if (error)
                return "csNotifyUpdate." + error;
        }
        if (message.csNotifyMessage != null && message.hasOwnProperty("csNotifyMessage")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifyMessage.verify(message.csNotifyMessage);
            if (error)
                return "csNotifyMessage." + error;
        }
        if (message.csNotifySngStartSign != null && message.hasOwnProperty("csNotifySngStartSign")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.CSNotifySngStartSign.verify(message.csNotifySngStartSign);
            if (error)
                return "csNotifySngStartSign." + error;
        }
        return null;
    };

    /**
     * Creates a PBCSMsg message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBCSMsg
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBCSMsg} PBCSMsg
     */
    PBCSMsg.fromObject = function fromObject(object) {
        if (object instanceof $root.PBCSMsg)
            return object;
        var message = new $root.PBCSMsg();
        if (object.uid != null)
            if ($util.Long)
                (message.uid = $util.Long.fromValue(object.uid)).unsigned = true;
            else if (typeof object.uid === "string")
                message.uid = parseInt(object.uid, 10);
            else if (typeof object.uid === "number")
                message.uid = object.uid;
            else if (typeof object.uid === "object")
                message.uid = new $util.LongBits(object.uid.low >>> 0, object.uid.high >>> 0).toNumber(true);
        if (object.csRequestUpdateConfig != null) {
            if (typeof object.csRequestUpdateConfig !== "object")
                throw TypeError(".PBCSMsg.csRequestUpdateConfig: object expected");
            message.csRequestUpdateConfig = $root.CSRequestUpdateConfig.fromObject(object.csRequestUpdateConfig);
        }
        if (object.csResponseUpdateConfig != null) {
            if (typeof object.csResponseUpdateConfig !== "object")
                throw TypeError(".PBCSMsg.csResponseUpdateConfig: object expected");
            message.csResponseUpdateConfig = $root.CSResponseUpdateConfig.fromObject(object.csResponseUpdateConfig);
        }
        if (object.csRequestLogin != null) {
            if (typeof object.csRequestLogin !== "object")
                throw TypeError(".PBCSMsg.csRequestLogin: object expected");
            message.csRequestLogin = $root.CSRequestLogin.fromObject(object.csRequestLogin);
        }
        if (object.csResponseLogin != null) {
            if (typeof object.csResponseLogin !== "object")
                throw TypeError(".PBCSMsg.csResponseLogin: object expected");
            message.csResponseLogin = $root.CSResponseLogin.fromObject(object.csResponseLogin);
        }
        if (object.csNotifyLogout != null) {
            if (typeof object.csNotifyLogout !== "object")
                throw TypeError(".PBCSMsg.csNotifyLogout: object expected");
            message.csNotifyLogout = $root.CSNotifyLogout.fromObject(object.csNotifyLogout);
        }
        if (object.csRequestHeartBeat != null) {
            if (typeof object.csRequestHeartBeat !== "object")
                throw TypeError(".PBCSMsg.csRequestHeartBeat: object expected");
            message.csRequestHeartBeat = $root.CSRequestHeartBeat.fromObject(object.csRequestHeartBeat);
        }
        if (object.csResponseHeartBeat != null) {
            if (typeof object.csResponseHeartBeat !== "object")
                throw TypeError(".PBCSMsg.csResponseHeartBeat: object expected");
            message.csResponseHeartBeat = $root.CSResponseHeartBeat.fromObject(object.csResponseHeartBeat);
        }
        if (object.csResponseCommonError != null) {
            if (typeof object.csResponseCommonError !== "object")
                throw TypeError(".PBCSMsg.csResponseCommonError: object expected");
            message.csResponseCommonError = $root.CSResponseCommonError.fromObject(object.csResponseCommonError);
        }
        if (object.csRequestGameInfo != null) {
            if (typeof object.csRequestGameInfo !== "object")
                throw TypeError(".PBCSMsg.csRequestGameInfo: object expected");
            message.csRequestGameInfo = $root.CSRequestGameInfo.fromObject(object.csRequestGameInfo);
        }
        if (object.csResponseGameInfo != null) {
            if (typeof object.csResponseGameInfo !== "object")
                throw TypeError(".PBCSMsg.csResponseGameInfo: object expected");
            message.csResponseGameInfo = $root.CSResponseGameInfo.fromObject(object.csResponseGameInfo);
        }
        if (object.csRequestUserInfo != null) {
            if (typeof object.csRequestUserInfo !== "object")
                throw TypeError(".PBCSMsg.csRequestUserInfo: object expected");
            message.csRequestUserInfo = $root.CSRequestUserInfo.fromObject(object.csRequestUserInfo);
        }
        if (object.csResponseUserInfo != null) {
            if (typeof object.csResponseUserInfo !== "object")
                throw TypeError(".PBCSMsg.csResponseUserInfo: object expected");
            message.csResponseUserInfo = $root.CSResponseUserInfo.fromObject(object.csResponseUserInfo);
        }
        if (object.csRequestCreateTable != null) {
            if (typeof object.csRequestCreateTable !== "object")
                throw TypeError(".PBCSMsg.csRequestCreateTable: object expected");
            message.csRequestCreateTable = $root.CSRequestCreateTable.fromObject(object.csRequestCreateTable);
        }
        if (object.csResponseCreateTable != null) {
            if (typeof object.csResponseCreateTable !== "object")
                throw TypeError(".PBCSMsg.csResponseCreateTable: object expected");
            message.csResponseCreateTable = $root.CSResponseCreateTable.fromObject(object.csResponseCreateTable);
        }
        if (object.csRequestTableList != null) {
            if (typeof object.csRequestTableList !== "object")
                throw TypeError(".PBCSMsg.csRequestTableList: object expected");
            message.csRequestTableList = $root.CSRequestTableList.fromObject(object.csRequestTableList);
        }
        if (object.csResponseTableList != null) {
            if (typeof object.csResponseTableList !== "object")
                throw TypeError(".PBCSMsg.csResponseTableList: object expected");
            message.csResponseTableList = $root.CSResponseTableList.fromObject(object.csResponseTableList);
        }
        if (object.csRequestTableInfo != null) {
            if (typeof object.csRequestTableInfo !== "object")
                throw TypeError(".PBCSMsg.csRequestTableInfo: object expected");
            message.csRequestTableInfo = $root.CSRequestTableInfo.fromObject(object.csRequestTableInfo);
        }
        if (object.csRepsonseTableInfo != null) {
            if (typeof object.csRepsonseTableInfo !== "object")
                throw TypeError(".PBCSMsg.csRepsonseTableInfo: object expected");
            message.csRepsonseTableInfo = $root.CSResponseTableInfo.fromObject(object.csRepsonseTableInfo);
        }
        if (object.csRequestSngSignUp != null) {
            if (typeof object.csRequestSngSignUp !== "object")
                throw TypeError(".PBCSMsg.csRequestSngSignUp: object expected");
            message.csRequestSngSignUp = $root.CSRequestSngSignUp.fromObject(object.csRequestSngSignUp);
        }
        if (object.csResponseSngSignUp != null) {
            if (typeof object.csResponseSngSignUp !== "object")
                throw TypeError(".PBCSMsg.csResponseSngSignUp: object expected");
            message.csResponseSngSignUp = $root.CSResponseSngSignUp.fromObject(object.csResponseSngSignUp);
        }
        if (object.csRequestTableListBySubtype != null) {
            if (typeof object.csRequestTableListBySubtype !== "object")
                throw TypeError(".PBCSMsg.csRequestTableListBySubtype: object expected");
            message.csRequestTableListBySubtype = $root.CSRequestTableListBySubType.fromObject(object.csRequestTableListBySubtype);
        }
        if (object.csResponseTableListBySubtype != null) {
            if (typeof object.csResponseTableListBySubtype !== "object")
                throw TypeError(".PBCSMsg.csResponseTableListBySubtype: object expected");
            message.csResponseTableListBySubtype = $root.CSResponseTableListBySubType.fromObject(object.csResponseTableListBySubtype);
        }
        if (object.csRequestTableListByStatus != null) {
            if (typeof object.csRequestTableListByStatus !== "object")
                throw TypeError(".PBCSMsg.csRequestTableListByStatus: object expected");
            message.csRequestTableListByStatus = $root.CSRequestTableListByStatus.fromObject(object.csRequestTableListByStatus);
        }
        if (object.csResponseTableListByStatus != null) {
            if (typeof object.csResponseTableListByStatus !== "object")
                throw TypeError(".PBCSMsg.csResponseTableListByStatus: object expected");
            message.csResponseTableListByStatus = $root.CSResponseTableListByStatus.fromObject(object.csResponseTableListByStatus);
        }
        if (object.csRequestTrainingSignUp != null) {
            if (typeof object.csRequestTrainingSignUp !== "object")
                throw TypeError(".PBCSMsg.csRequestTrainingSignUp: object expected");
            message.csRequestTrainingSignUp = $root.CSRequestTrainingSignUp.fromObject(object.csRequestTrainingSignUp);
        }
        if (object.csResponseTrainingSignUp != null) {
            if (typeof object.csResponseTrainingSignUp !== "object")
                throw TypeError(".PBCSMsg.csResponseTrainingSignUp: object expected");
            message.csResponseTrainingSignUp = $root.CSResponseTrainingSignUp.fromObject(object.csResponseTrainingSignUp);
        }
        if (object.csRequestChangeTrainingTable != null) {
            if (typeof object.csRequestChangeTrainingTable !== "object")
                throw TypeError(".PBCSMsg.csRequestChangeTrainingTable: object expected");
            message.csRequestChangeTrainingTable = $root.CSRequestChangeTrainingTable.fromObject(object.csRequestChangeTrainingTable);
        }
        if (object.cs_ResponseChangeTrainingTable != null) {
            if (typeof object.cs_ResponseChangeTrainingTable !== "object")
                throw TypeError(".PBCSMsg.cs_ResponseChangeTrainingTable: object expected");
            message.cs_ResponseChangeTrainingTable = $root.CSResponseChangeTrainingTable.fromObject(object.cs_ResponseChangeTrainingTable);
        }
        if (object.csRequestEnterTable != null) {
            if (typeof object.csRequestEnterTable !== "object")
                throw TypeError(".PBCSMsg.csRequestEnterTable: object expected");
            message.csRequestEnterTable = $root.CSRequestEnterTable.fromObject(object.csRequestEnterTable);
        }
        if (object.csResponseEnterTable != null) {
            if (typeof object.csResponseEnterTable !== "object")
                throw TypeError(".PBCSMsg.csResponseEnterTable: object expected");
            message.csResponseEnterTable = $root.CSResponseEnterTable.fromObject(object.csResponseEnterTable);
        }
        if (object.csRequestExitTable != null) {
            if (typeof object.csRequestExitTable !== "object")
                throw TypeError(".PBCSMsg.csRequestExitTable: object expected");
            message.csRequestExitTable = $root.CSRequestExitTable.fromObject(object.csRequestExitTable);
        }
        if (object.csResponseExitTable != null) {
            if (typeof object.csResponseExitTable !== "object")
                throw TypeError(".PBCSMsg.csResponseExitTable: object expected");
            message.csResponseExitTable = $root.CSResponseExitTable.fromObject(object.csResponseExitTable);
        }
        if (object.csRequestSitDown != null) {
            if (typeof object.csRequestSitDown !== "object")
                throw TypeError(".PBCSMsg.csRequestSitDown: object expected");
            message.csRequestSitDown = $root.CSRequestSitDown.fromObject(object.csRequestSitDown);
        }
        if (object.csResponseSitDown != null) {
            if (typeof object.csResponseSitDown !== "object")
                throw TypeError(".PBCSMsg.csResponseSitDown: object expected");
            message.csResponseSitDown = $root.CSResponseSitDown.fromObject(object.csResponseSitDown);
        }
        if (object.csRequestSitUp != null) {
            if (typeof object.csRequestSitUp !== "object")
                throw TypeError(".PBCSMsg.csRequestSitUp: object expected");
            message.csRequestSitUp = $root.CSRequestSitUp.fromObject(object.csRequestSitUp);
        }
        if (object.csResponseSitUp != null) {
            if (typeof object.csResponseSitUp !== "object")
                throw TypeError(".PBCSMsg.csResponseSitUp: object expected");
            message.csResponseSitUp = $root.CSResponseSitUp.fromObject(object.csResponseSitUp);
        }
        if (object.csNotifySitDown != null) {
            if (typeof object.csNotifySitDown !== "object")
                throw TypeError(".PBCSMsg.csNotifySitDown: object expected");
            message.csNotifySitDown = $root.CSNotifySitDown.fromObject(object.csNotifySitDown);
        }
        if (object.csNotifySitUp != null) {
            if (typeof object.csNotifySitUp !== "object")
                throw TypeError(".PBCSMsg.csNotifySitUp: object expected");
            message.csNotifySitUp = $root.CSNotifySitUp.fromObject(object.csNotifySitUp);
        }
        if (object.csNotifyGameStart != null) {
            if (typeof object.csNotifyGameStart !== "object")
                throw TypeError(".PBCSMsg.csNotifyGameStart: object expected");
            message.csNotifyGameStart = $root.CSNotifyGameStart.fromObject(object.csNotifyGameStart);
        }
        if (object.csNotifyHoleCard != null) {
            if (typeof object.csNotifyHoleCard !== "object")
                throw TypeError(".PBCSMsg.csNotifyHoleCard: object expected");
            message.csNotifyHoleCard = $root.CSNotifyHoleCard.fromObject(object.csNotifyHoleCard);
        }
        if (object.csNotifyPotInfo != null) {
            if (typeof object.csNotifyPotInfo !== "object")
                throw TypeError(".PBCSMsg.csNotifyPotInfo: object expected");
            message.csNotifyPotInfo = $root.CSNotifyPotInfo.fromObject(object.csNotifyPotInfo);
        }
        if (object.csNotifyFlopCard != null) {
            if (typeof object.csNotifyFlopCard !== "object")
                throw TypeError(".PBCSMsg.csNotifyFlopCard: object expected");
            message.csNotifyFlopCard = $root.CSNotifyFlopCard.fromObject(object.csNotifyFlopCard);
        }
        if (object.csNotifyTurnCard != null) {
            if (typeof object.csNotifyTurnCard !== "object")
                throw TypeError(".PBCSMsg.csNotifyTurnCard: object expected");
            message.csNotifyTurnCard = $root.CSNotifyTurnCard.fromObject(object.csNotifyTurnCard);
        }
        if (object.csNotifyRiverCard != null) {
            if (typeof object.csNotifyRiverCard !== "object")
                throw TypeError(".PBCSMsg.csNotifyRiverCard: object expected");
            message.csNotifyRiverCard = $root.CSNotifyRiverCard.fromObject(object.csNotifyRiverCard);
        }
        if (object.csNotifyDoAction != null) {
            if (typeof object.csNotifyDoAction !== "object")
                throw TypeError(".PBCSMsg.csNotifyDoAction: object expected");
            message.csNotifyDoAction = $root.CSNotifyDoAction.fromObject(object.csNotifyDoAction);
        }
        if (object.csNotifyGameEnd != null) {
            if (typeof object.csNotifyGameEnd !== "object")
                throw TypeError(".PBCSMsg.csNotifyGameEnd: object expected");
            message.csNotifyGameEnd = $root.CSNotifyGameEnd.fromObject(object.csNotifyGameEnd);
        }
        if (object.csRequestDoAction != null) {
            if (typeof object.csRequestDoAction !== "object")
                throw TypeError(".PBCSMsg.csRequestDoAction: object expected");
            message.csRequestDoAction = $root.CSRequestDoAction.fromObject(object.csRequestDoAction);
        }
        if (object.csResponseDoAction != null) {
            if (typeof object.csResponseDoAction !== "object")
                throw TypeError(".PBCSMsg.csResponseDoAction: object expected");
            message.csResponseDoAction = $root.CSResponseDoAction.fromObject(object.csResponseDoAction);
        }
        if (object.csNotifyActionResult != null) {
            if (typeof object.csNotifyActionResult !== "object")
                throw TypeError(".PBCSMsg.csNotifyActionResult: object expected");
            message.csNotifyActionResult = $root.CSNotifyActionResult.fromObject(object.csNotifyActionResult);
        }
        if (object.csNotifyGameResult != null) {
            if (typeof object.csNotifyGameResult !== "object")
                throw TypeError(".PBCSMsg.csNotifyGameResult: object expected");
            message.csNotifyGameResult = $root.CSNotifyGameResult.fromObject(object.csNotifyGameResult);
        }
        if (object.csNotifyTableClose != null) {
            if (typeof object.csNotifyTableClose !== "object")
                throw TypeError(".PBCSMsg.csNotifyTableClose: object expected");
            message.csNotifyTableClose = $root.CSNotifyTableClose.fromObject(object.csNotifyTableClose);
        }
        if (object.csRequestStartGame != null) {
            if (typeof object.csRequestStartGame !== "object")
                throw TypeError(".PBCSMsg.csRequestStartGame: object expected");
            message.csRequestStartGame = $root.CSRequestStartGame.fromObject(object.csRequestStartGame);
        }
        if (object.csNotifyStartGame != null) {
            if (typeof object.csNotifyStartGame !== "object")
                throw TypeError(".PBCSMsg.csNotifyStartGame: object expected");
            message.csNotifyStartGame = $root.CSNotifyStartGame.fromObject(object.csNotifyStartGame);
        }
        if (object.csRequestChat != null) {
            if (typeof object.csRequestChat !== "object")
                throw TypeError(".PBCSMsg.csRequestChat: object expected");
            message.csRequestChat = $root.CSRequestChat.fromObject(object.csRequestChat);
        }
        if (object.csResponseChat != null) {
            if (typeof object.csResponseChat !== "object")
                throw TypeError(".PBCSMsg.csResponseChat: object expected");
            message.csResponseChat = $root.CSResponseChat.fromObject(object.csResponseChat);
        }
        if (object.csNotifyChat != null) {
            if (typeof object.csNotifyChat !== "object")
                throw TypeError(".PBCSMsg.csNotifyChat: object expected");
            message.csNotifyChat = $root.CSNotifyChat.fromObject(object.csNotifyChat);
        }
        if (object.csNotifyReconn != null) {
            if (typeof object.csNotifyReconn !== "object")
                throw TypeError(".PBCSMsg.csNotifyReconn: object expected");
            message.csNotifyReconn = $root.CSNotifyReconn.fromObject(object.csNotifyReconn);
        }
        if (object.csRequestTuoGuan != null) {
            if (typeof object.csRequestTuoGuan !== "object")
                throw TypeError(".PBCSMsg.csRequestTuoGuan: object expected");
            message.csRequestTuoGuan = $root.CSRequestTuoGuan.fromObject(object.csRequestTuoGuan);
        }
        if (object.csResponseTuoGuan != null) {
            if (typeof object.csResponseTuoGuan !== "object")
                throw TypeError(".PBCSMsg.csResponseTuoGuan: object expected");
            message.csResponseTuoGuan = $root.CSResponseTuoGuan.fromObject(object.csResponseTuoGuan);
        }
        if (object.csRequestBuyChip != null) {
            if (typeof object.csRequestBuyChip !== "object")
                throw TypeError(".PBCSMsg.csRequestBuyChip: object expected");
            message.csRequestBuyChip = $root.CSRequestBuyChip.fromObject(object.csRequestBuyChip);
        }
        if (object.csResponseBuyChip != null) {
            if (typeof object.csResponseBuyChip !== "object")
                throw TypeError(".PBCSMsg.csResponseBuyChip: object expected");
            message.csResponseBuyChip = $root.CSResponseBuyChip.fromObject(object.csResponseBuyChip);
        }
        if (object.csNotifyBuyChip != null) {
            if (typeof object.csNotifyBuyChip !== "object")
                throw TypeError(".PBCSMsg.csNotifyBuyChip: object expected");
            message.csNotifyBuyChip = $root.CSNotifyBuyChip.fromObject(object.csNotifyBuyChip);
        }
        if (object.csNotifyMaxBuyIn != null) {
            if (typeof object.csNotifyMaxBuyIn !== "object")
                throw TypeError(".PBCSMsg.csNotifyMaxBuyIn: object expected");
            message.csNotifyMaxBuyIn = $root.CSNotifyMaxBuyIn.fromObject(object.csNotifyMaxBuyIn);
        }
        if (object.csNotifyRaiseBlind != null) {
            if (typeof object.csNotifyRaiseBlind !== "object")
                throw TypeError(".PBCSMsg.csNotifyRaiseBlind: object expected");
            message.csNotifyRaiseBlind = $root.CSNotifyRaiseBlind.fromObject(object.csNotifyRaiseBlind);
        }
        if (object.csNotifySngRank != null) {
            if (typeof object.csNotifySngRank !== "object")
                throw TypeError(".PBCSMsg.csNotifySngRank: object expected");
            message.csNotifySngRank = $root.CSNotifySngRank.fromObject(object.csNotifySngRank);
        }
        if (object.csNotifyTuoGuan != null) {
            if (typeof object.csNotifyTuoGuan !== "object")
                throw TypeError(".PBCSMsg.csNotifyTuoGuan: object expected");
            message.csNotifyTuoGuan = $root.CSNotifyTuoGuan.fromObject(object.csNotifyTuoGuan);
        }
        if (object.csNotifyPlayerCards != null) {
            if (typeof object.csNotifyPlayerCards !== "object")
                throw TypeError(".PBCSMsg.csNotifyPlayerCards: object expected");
            message.csNotifyPlayerCards = $root.CSNotifyPlayerCards.fromObject(object.csNotifyPlayerCards);
        }
        if (object.csRequestShowCards != null) {
            if (typeof object.csRequestShowCards !== "object")
                throw TypeError(".PBCSMsg.csRequestShowCards: object expected");
            message.csRequestShowCards = $root.CSRequestShowCards.fromObject(object.csRequestShowCards);
        }
        if (object.csNotifyShowCards != null) {
            if (typeof object.csNotifyShowCards !== "object")
                throw TypeError(".PBCSMsg.csNotifyShowCards: object expected");
            message.csNotifyShowCards = $root.CSNotifyShowCards.fromObject(object.csNotifyShowCards);
        }
        if (object.csRequestResetTime != null) {
            if (typeof object.csRequestResetTime !== "object")
                throw TypeError(".PBCSMsg.csRequestResetTime: object expected");
            message.csRequestResetTime = $root.CSRequestResetTime.fromObject(object.csRequestResetTime);
        }
        if (object.csNotifyResetTime != null) {
            if (typeof object.csNotifyResetTime !== "object")
                throw TypeError(".PBCSMsg.csNotifyResetTime: object expected");
            message.csNotifyResetTime = $root.CSNotifyResetTime.fromObject(object.csNotifyResetTime);
        }
        if (object.csRequestTableStat != null) {
            if (typeof object.csRequestTableStat !== "object")
                throw TypeError(".PBCSMsg.csRequestTableStat: object expected");
            message.csRequestTableStat = $root.CSRequestTableStat.fromObject(object.csRequestTableStat);
        }
        if (object.csRepsonseTableStat != null) {
            if (typeof object.csRepsonseTableStat !== "object")
                throw TypeError(".PBCSMsg.csRepsonseTableStat: object expected");
            message.csRepsonseTableStat = $root.CSResponseTableStat.fromObject(object.csRepsonseTableStat);
        }
        if (object.csRequestLastGameResult != null) {
            if (typeof object.csRequestLastGameResult !== "object")
                throw TypeError(".PBCSMsg.csRequestLastGameResult: object expected");
            message.csRequestLastGameResult = $root.CSRequestLastGameResult.fromObject(object.csRequestLastGameResult);
        }
        if (object.csResponseLastGameResult != null) {
            if (typeof object.csResponseLastGameResult !== "object")
                throw TypeError(".PBCSMsg.csResponseLastGameResult: object expected");
            message.csResponseLastGameResult = $root.CSResponseLastGameResult.fromObject(object.csResponseLastGameResult);
        }
        if (object.csRequestGtplist != null) {
            if (typeof object.csRequestGtplist !== "object")
                throw TypeError(".PBCSMsg.csRequestGtplist: object expected");
            message.csRequestGtplist = $root.CSRequestGTPList.fromObject(object.csRequestGtplist);
        }
        if (object.csResponseGtplist != null) {
            if (typeof object.csResponseGtplist !== "object")
                throw TypeError(".PBCSMsg.csResponseGtplist: object expected");
            message.csResponseGtplist = $root.CSResponseGTPList.fromObject(object.csResponseGtplist);
        }
        if (object.csRequestPlayerGtplist != null) {
            if (typeof object.csRequestPlayerGtplist !== "object")
                throw TypeError(".PBCSMsg.csRequestPlayerGtplist: object expected");
            message.csRequestPlayerGtplist = $root.CSRequestPlayerGTPList.fromObject(object.csRequestPlayerGtplist);
        }
        if (object.csResponsePlayerGtplist != null) {
            if (typeof object.csResponsePlayerGtplist !== "object")
                throw TypeError(".PBCSMsg.csResponsePlayerGtplist: object expected");
            message.csResponsePlayerGtplist = $root.CSResponsePlayerGTPList.fromObject(object.csResponsePlayerGtplist);
        }
        if (object.csNotifyUpdate != null) {
            if (typeof object.csNotifyUpdate !== "object")
                throw TypeError(".PBCSMsg.csNotifyUpdate: object expected");
            message.csNotifyUpdate = $root.CSNotifyUpdate.fromObject(object.csNotifyUpdate);
        }
        if (object.csNotifyMessage != null) {
            if (typeof object.csNotifyMessage !== "object")
                throw TypeError(".PBCSMsg.csNotifyMessage: object expected");
            message.csNotifyMessage = $root.CSNotifyMessage.fromObject(object.csNotifyMessage);
        }
        if (object.csNotifySngStartSign != null) {
            if (typeof object.csNotifySngStartSign !== "object")
                throw TypeError(".PBCSMsg.csNotifySngStartSign: object expected");
            message.csNotifySngStartSign = $root.CSNotifySngStartSign.fromObject(object.csNotifySngStartSign);
        }
        return message;
    };

    /**
     * Creates a plain object from a PBCSMsg message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBCSMsg
     * @static
     * @param {PBCSMsg} message PBCSMsg
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBCSMsg.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.uid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.uid = options.longs === String ? "0" : 0;
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (typeof message.uid === "number")
                object.uid = options.longs === String ? String(message.uid) : message.uid;
            else
                object.uid = options.longs === String ? $util.Long.prototype.toString.call(message.uid) : options.longs === Number ? new $util.LongBits(message.uid.low >>> 0, message.uid.high >>> 0).toNumber(true) : message.uid;
        if (message.csRequestLogin != null && message.hasOwnProperty("csRequestLogin")) {
            object.csRequestLogin = $root.CSRequestLogin.toObject(message.csRequestLogin, options);
            if (options.oneofs)
                object.msgUnion = "csRequestLogin";
        }
        if (message.csResponseLogin != null && message.hasOwnProperty("csResponseLogin")) {
            object.csResponseLogin = $root.CSResponseLogin.toObject(message.csResponseLogin, options);
            if (options.oneofs)
                object.msgUnion = "csResponseLogin";
        }
        if (message.csNotifyLogout != null && message.hasOwnProperty("csNotifyLogout")) {
            object.csNotifyLogout = $root.CSNotifyLogout.toObject(message.csNotifyLogout, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyLogout";
        }
        if (message.csRequestHeartBeat != null && message.hasOwnProperty("csRequestHeartBeat")) {
            object.csRequestHeartBeat = $root.CSRequestHeartBeat.toObject(message.csRequestHeartBeat, options);
            if (options.oneofs)
                object.msgUnion = "csRequestHeartBeat";
        }
        if (message.csResponseHeartBeat != null && message.hasOwnProperty("csResponseHeartBeat")) {
            object.csResponseHeartBeat = $root.CSResponseHeartBeat.toObject(message.csResponseHeartBeat, options);
            if (options.oneofs)
                object.msgUnion = "csResponseHeartBeat";
        }
        if (message.csResponseCommonError != null && message.hasOwnProperty("csResponseCommonError")) {
            object.csResponseCommonError = $root.CSResponseCommonError.toObject(message.csResponseCommonError, options);
            if (options.oneofs)
                object.msgUnion = "csResponseCommonError";
        }
        if (message.csRequestUpdateConfig != null && message.hasOwnProperty("csRequestUpdateConfig")) {
            object.csRequestUpdateConfig = $root.CSRequestUpdateConfig.toObject(message.csRequestUpdateConfig, options);
            if (options.oneofs)
                object.msgUnion = "csRequestUpdateConfig";
        }
        if (message.csResponseUpdateConfig != null && message.hasOwnProperty("csResponseUpdateConfig")) {
            object.csResponseUpdateConfig = $root.CSResponseUpdateConfig.toObject(message.csResponseUpdateConfig, options);
            if (options.oneofs)
                object.msgUnion = "csResponseUpdateConfig";
        }
        if (message.csRequestGameInfo != null && message.hasOwnProperty("csRequestGameInfo")) {
            object.csRequestGameInfo = $root.CSRequestGameInfo.toObject(message.csRequestGameInfo, options);
            if (options.oneofs)
                object.msgUnion = "csRequestGameInfo";
        }
        if (message.csResponseGameInfo != null && message.hasOwnProperty("csResponseGameInfo")) {
            object.csResponseGameInfo = $root.CSResponseGameInfo.toObject(message.csResponseGameInfo, options);
            if (options.oneofs)
                object.msgUnion = "csResponseGameInfo";
        }
        if (message.csRequestUserInfo != null && message.hasOwnProperty("csRequestUserInfo")) {
            object.csRequestUserInfo = $root.CSRequestUserInfo.toObject(message.csRequestUserInfo, options);
            if (options.oneofs)
                object.msgUnion = "csRequestUserInfo";
        }
        if (message.csResponseUserInfo != null && message.hasOwnProperty("csResponseUserInfo")) {
            object.csResponseUserInfo = $root.CSResponseUserInfo.toObject(message.csResponseUserInfo, options);
            if (options.oneofs)
                object.msgUnion = "csResponseUserInfo";
        }
        if (message.csRequestCreateTable != null && message.hasOwnProperty("csRequestCreateTable")) {
            object.csRequestCreateTable = $root.CSRequestCreateTable.toObject(message.csRequestCreateTable, options);
            if (options.oneofs)
                object.msgUnion = "csRequestCreateTable";
        }
        if (message.csResponseCreateTable != null && message.hasOwnProperty("csResponseCreateTable")) {
            object.csResponseCreateTable = $root.CSResponseCreateTable.toObject(message.csResponseCreateTable, options);
            if (options.oneofs)
                object.msgUnion = "csResponseCreateTable";
        }
        if (message.csRequestTableList != null && message.hasOwnProperty("csRequestTableList")) {
            object.csRequestTableList = $root.CSRequestTableList.toObject(message.csRequestTableList, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTableList";
        }
        if (message.csResponseTableList != null && message.hasOwnProperty("csResponseTableList")) {
            object.csResponseTableList = $root.CSResponseTableList.toObject(message.csResponseTableList, options);
            if (options.oneofs)
                object.msgUnion = "csResponseTableList";
        }
        if (message.csRequestTableInfo != null && message.hasOwnProperty("csRequestTableInfo")) {
            object.csRequestTableInfo = $root.CSRequestTableInfo.toObject(message.csRequestTableInfo, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTableInfo";
        }
        if (message.csRepsonseTableInfo != null && message.hasOwnProperty("csRepsonseTableInfo")) {
            object.csRepsonseTableInfo = $root.CSResponseTableInfo.toObject(message.csRepsonseTableInfo, options);
            if (options.oneofs)
                object.msgUnion = "csRepsonseTableInfo";
        }
        if (message.csRequestSngSignUp != null && message.hasOwnProperty("csRequestSngSignUp")) {
            object.csRequestSngSignUp = $root.CSRequestSngSignUp.toObject(message.csRequestSngSignUp, options);
            if (options.oneofs)
                object.msgUnion = "csRequestSngSignUp";
        }
        if (message.csResponseSngSignUp != null && message.hasOwnProperty("csResponseSngSignUp")) {
            object.csResponseSngSignUp = $root.CSResponseSngSignUp.toObject(message.csResponseSngSignUp, options);
            if (options.oneofs)
                object.msgUnion = "csResponseSngSignUp";
        }
        if (message.csRequestStartGame != null && message.hasOwnProperty("csRequestStartGame")) {
            object.csRequestStartGame = $root.CSRequestStartGame.toObject(message.csRequestStartGame, options);
            if (options.oneofs)
                object.msgUnion = "csRequestStartGame";
        }
        if (message.csNotifyStartGame != null && message.hasOwnProperty("csNotifyStartGame")) {
            object.csNotifyStartGame = $root.CSNotifyStartGame.toObject(message.csNotifyStartGame, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyStartGame";
        }
        if (message.csRequestTableListBySubtype != null && message.hasOwnProperty("csRequestTableListBySubtype")) {
            object.csRequestTableListBySubtype = $root.CSRequestTableListBySubType.toObject(message.csRequestTableListBySubtype, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTableListBySubtype";
        }
        if (message.csResponseTableListBySubtype != null && message.hasOwnProperty("csResponseTableListBySubtype")) {
            object.csResponseTableListBySubtype = $root.CSResponseTableListBySubType.toObject(message.csResponseTableListBySubtype, options);
            if (options.oneofs)
                object.msgUnion = "csResponseTableListBySubtype";
        }
        if (message.csRequestTableListByStatus != null && message.hasOwnProperty("csRequestTableListByStatus")) {
            object.csRequestTableListByStatus = $root.CSRequestTableListByStatus.toObject(message.csRequestTableListByStatus, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTableListByStatus";
        }
        if (message.csResponseTableListByStatus != null && message.hasOwnProperty("csResponseTableListByStatus")) {
            object.csResponseTableListByStatus = $root.CSResponseTableListByStatus.toObject(message.csResponseTableListByStatus, options);
            if (options.oneofs)
                object.msgUnion = "csResponseTableListByStatus";
        }
        if (message.csRequestTrainingSignUp != null && message.hasOwnProperty("csRequestTrainingSignUp")) {
            object.csRequestTrainingSignUp = $root.CSRequestTrainingSignUp.toObject(message.csRequestTrainingSignUp, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTrainingSignUp";
        }
        if (message.csResponseTrainingSignUp != null && message.hasOwnProperty("csResponseTrainingSignUp")) {
            object.csResponseTrainingSignUp = $root.CSResponseTrainingSignUp.toObject(message.csResponseTrainingSignUp, options);
            if (options.oneofs)
                object.msgUnion = "csResponseTrainingSignUp";
        }
        if (message.csRequestChangeTrainingTable != null && message.hasOwnProperty("csRequestChangeTrainingTable")) {
            object.csRequestChangeTrainingTable = $root.CSRequestChangeTrainingTable.toObject(message.csRequestChangeTrainingTable, options);
            if (options.oneofs)
                object.msgUnion = "csRequestChangeTrainingTable";
        }
        if (message.cs_ResponseChangeTrainingTable != null && message.hasOwnProperty("cs_ResponseChangeTrainingTable")) {
            object.cs_ResponseChangeTrainingTable = $root.CSResponseChangeTrainingTable.toObject(message.cs_ResponseChangeTrainingTable, options);
            if (options.oneofs)
                object.msgUnion = "cs_ResponseChangeTrainingTable";
        }
        if (message.csRequestSitDown != null && message.hasOwnProperty("csRequestSitDown")) {
            object.csRequestSitDown = $root.CSRequestSitDown.toObject(message.csRequestSitDown, options);
            if (options.oneofs)
                object.msgUnion = "csRequestSitDown";
        }
        if (message.csResponseSitDown != null && message.hasOwnProperty("csResponseSitDown")) {
            object.csResponseSitDown = $root.CSResponseSitDown.toObject(message.csResponseSitDown, options);
            if (options.oneofs)
                object.msgUnion = "csResponseSitDown";
        }
        if (message.csNotifyGameStart != null && message.hasOwnProperty("csNotifyGameStart")) {
            object.csNotifyGameStart = $root.CSNotifyGameStart.toObject(message.csNotifyGameStart, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyGameStart";
        }
        if (message.csNotifyTableClose != null && message.hasOwnProperty("csNotifyTableClose")) {
            object.csNotifyTableClose = $root.CSNotifyTableClose.toObject(message.csNotifyTableClose, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyTableClose";
        }
        if (message.csNotifyHoleCard != null && message.hasOwnProperty("csNotifyHoleCard")) {
            object.csNotifyHoleCard = $root.CSNotifyHoleCard.toObject(message.csNotifyHoleCard, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyHoleCard";
        }
        if (message.csNotifyPotInfo != null && message.hasOwnProperty("csNotifyPotInfo")) {
            object.csNotifyPotInfo = $root.CSNotifyPotInfo.toObject(message.csNotifyPotInfo, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyPotInfo";
        }
        if (message.csNotifyFlopCard != null && message.hasOwnProperty("csNotifyFlopCard")) {
            object.csNotifyFlopCard = $root.CSNotifyFlopCard.toObject(message.csNotifyFlopCard, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyFlopCard";
        }
        if (message.csNotifyTurnCard != null && message.hasOwnProperty("csNotifyTurnCard")) {
            object.csNotifyTurnCard = $root.CSNotifyTurnCard.toObject(message.csNotifyTurnCard, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyTurnCard";
        }
        if (message.csNotifyRiverCard != null && message.hasOwnProperty("csNotifyRiverCard")) {
            object.csNotifyRiverCard = $root.CSNotifyRiverCard.toObject(message.csNotifyRiverCard, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyRiverCard";
        }
        if (message.csNotifyDoAction != null && message.hasOwnProperty("csNotifyDoAction")) {
            object.csNotifyDoAction = $root.CSNotifyDoAction.toObject(message.csNotifyDoAction, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyDoAction";
        }
        if (message.csRequestDoAction != null && message.hasOwnProperty("csRequestDoAction")) {
            object.csRequestDoAction = $root.CSRequestDoAction.toObject(message.csRequestDoAction, options);
            if (options.oneofs)
                object.msgUnion = "csRequestDoAction";
        }
        if (message.csResponseDoAction != null && message.hasOwnProperty("csResponseDoAction")) {
            object.csResponseDoAction = $root.CSResponseDoAction.toObject(message.csResponseDoAction, options);
            if (options.oneofs)
                object.msgUnion = "csResponseDoAction";
        }
        if (message.csNotifyActionResult != null && message.hasOwnProperty("csNotifyActionResult")) {
            object.csNotifyActionResult = $root.CSNotifyActionResult.toObject(message.csNotifyActionResult, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyActionResult";
        }
        if (message.csNotifyGameResult != null && message.hasOwnProperty("csNotifyGameResult")) {
            object.csNotifyGameResult = $root.CSNotifyGameResult.toObject(message.csNotifyGameResult, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyGameResult";
        }
        if (message.csRequestEnterTable != null && message.hasOwnProperty("csRequestEnterTable")) {
            object.csRequestEnterTable = $root.CSRequestEnterTable.toObject(message.csRequestEnterTable, options);
            if (options.oneofs)
                object.msgUnion = "csRequestEnterTable";
        }
        if (message.csResponseEnterTable != null && message.hasOwnProperty("csResponseEnterTable")) {
            object.csResponseEnterTable = $root.CSResponseEnterTable.toObject(message.csResponseEnterTable, options);
            if (options.oneofs)
                object.msgUnion = "csResponseEnterTable";
        }
        if (message.csNotifySitDown != null && message.hasOwnProperty("csNotifySitDown")) {
            object.csNotifySitDown = $root.CSNotifySitDown.toObject(message.csNotifySitDown, options);
            if (options.oneofs)
                object.msgUnion = "csNotifySitDown";
        }
        if (message.csNotifySitUp != null && message.hasOwnProperty("csNotifySitUp")) {
            object.csNotifySitUp = $root.CSNotifySitUp.toObject(message.csNotifySitUp, options);
            if (options.oneofs)
                object.msgUnion = "csNotifySitUp";
        }
        if (message.csRequestExitTable != null && message.hasOwnProperty("csRequestExitTable")) {
            object.csRequestExitTable = $root.CSRequestExitTable.toObject(message.csRequestExitTable, options);
            if (options.oneofs)
                object.msgUnion = "csRequestExitTable";
        }
        if (message.csResponseExitTable != null && message.hasOwnProperty("csResponseExitTable")) {
            object.csResponseExitTable = $root.CSResponseExitTable.toObject(message.csResponseExitTable, options);
            if (options.oneofs)
                object.msgUnion = "csResponseExitTable";
        }
        if (message.csRequestSitUp != null && message.hasOwnProperty("csRequestSitUp")) {
            object.csRequestSitUp = $root.CSRequestSitUp.toObject(message.csRequestSitUp, options);
            if (options.oneofs)
                object.msgUnion = "csRequestSitUp";
        }
        if (message.csResponseSitUp != null && message.hasOwnProperty("csResponseSitUp")) {
            object.csResponseSitUp = $root.CSResponseSitUp.toObject(message.csResponseSitUp, options);
            if (options.oneofs)
                object.msgUnion = "csResponseSitUp";
        }
        if (message.csRequestChat != null && message.hasOwnProperty("csRequestChat")) {
            object.csRequestChat = $root.CSRequestChat.toObject(message.csRequestChat, options);
            if (options.oneofs)
                object.msgUnion = "csRequestChat";
        }
        if (message.csResponseChat != null && message.hasOwnProperty("csResponseChat")) {
            object.csResponseChat = $root.CSResponseChat.toObject(message.csResponseChat, options);
            if (options.oneofs)
                object.msgUnion = "csResponseChat";
        }
        if (message.csNotifyChat != null && message.hasOwnProperty("csNotifyChat")) {
            object.csNotifyChat = $root.CSNotifyChat.toObject(message.csNotifyChat, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyChat";
        }
        if (message.csRequestTuoGuan != null && message.hasOwnProperty("csRequestTuoGuan")) {
            object.csRequestTuoGuan = $root.CSRequestTuoGuan.toObject(message.csRequestTuoGuan, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTuoGuan";
        }
        if (message.csResponseTuoGuan != null && message.hasOwnProperty("csResponseTuoGuan")) {
            object.csResponseTuoGuan = $root.CSResponseTuoGuan.toObject(message.csResponseTuoGuan, options);
            if (options.oneofs)
                object.msgUnion = "csResponseTuoGuan";
        }
        if (message.csRequestGtplist != null && message.hasOwnProperty("csRequestGtplist")) {
            object.csRequestGtplist = $root.CSRequestGTPList.toObject(message.csRequestGtplist, options);
            if (options.oneofs)
                object.msgUnion = "csRequestGtplist";
        }
        if (message.csResponseGtplist != null && message.hasOwnProperty("csResponseGtplist")) {
            object.csResponseGtplist = $root.CSResponseGTPList.toObject(message.csResponseGtplist, options);
            if (options.oneofs)
                object.msgUnion = "csResponseGtplist";
        }
        if (message.csRequestPlayerGtplist != null && message.hasOwnProperty("csRequestPlayerGtplist")) {
            object.csRequestPlayerGtplist = $root.CSRequestPlayerGTPList.toObject(message.csRequestPlayerGtplist, options);
            if (options.oneofs)
                object.msgUnion = "csRequestPlayerGtplist";
        }
        if (message.csResponsePlayerGtplist != null && message.hasOwnProperty("csResponsePlayerGtplist")) {
            object.csResponsePlayerGtplist = $root.CSResponsePlayerGTPList.toObject(message.csResponsePlayerGtplist, options);
            if (options.oneofs)
                object.msgUnion = "csResponsePlayerGtplist";
        }
        if (message.csNotifyUpdate != null && message.hasOwnProperty("csNotifyUpdate")) {
            object.csNotifyUpdate = $root.CSNotifyUpdate.toObject(message.csNotifyUpdate, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyUpdate";
        }
        if (message.csNotifyMessage != null && message.hasOwnProperty("csNotifyMessage")) {
            object.csNotifyMessage = $root.CSNotifyMessage.toObject(message.csNotifyMessage, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyMessage";
        }
        if (message.csNotifySngStartSign != null && message.hasOwnProperty("csNotifySngStartSign")) {
            object.csNotifySngStartSign = $root.CSNotifySngStartSign.toObject(message.csNotifySngStartSign, options);
            if (options.oneofs)
                object.msgUnion = "csNotifySngStartSign";
        }
        if (message.csNotifyGameEnd != null && message.hasOwnProperty("csNotifyGameEnd")) {
            object.csNotifyGameEnd = $root.CSNotifyGameEnd.toObject(message.csNotifyGameEnd, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyGameEnd";
        }
        if (message.csNotifyReconn != null && message.hasOwnProperty("csNotifyReconn")) {
            object.csNotifyReconn = $root.CSNotifyReconn.toObject(message.csNotifyReconn, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyReconn";
        }
        if (message.csRequestBuyChip != null && message.hasOwnProperty("csRequestBuyChip")) {
            object.csRequestBuyChip = $root.CSRequestBuyChip.toObject(message.csRequestBuyChip, options);
            if (options.oneofs)
                object.msgUnion = "csRequestBuyChip";
        }
        if (message.csResponseBuyChip != null && message.hasOwnProperty("csResponseBuyChip")) {
            object.csResponseBuyChip = $root.CSResponseBuyChip.toObject(message.csResponseBuyChip, options);
            if (options.oneofs)
                object.msgUnion = "csResponseBuyChip";
        }
        if (message.csNotifyBuyChip != null && message.hasOwnProperty("csNotifyBuyChip")) {
            object.csNotifyBuyChip = $root.CSNotifyBuyChip.toObject(message.csNotifyBuyChip, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyBuyChip";
        }
        if (message.csNotifyMaxBuyIn != null && message.hasOwnProperty("csNotifyMaxBuyIn")) {
            object.csNotifyMaxBuyIn = $root.CSNotifyMaxBuyIn.toObject(message.csNotifyMaxBuyIn, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyMaxBuyIn";
        }
        if (message.csNotifyRaiseBlind != null && message.hasOwnProperty("csNotifyRaiseBlind")) {
            object.csNotifyRaiseBlind = $root.CSNotifyRaiseBlind.toObject(message.csNotifyRaiseBlind, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyRaiseBlind";
        }
        if (message.csNotifySngRank != null && message.hasOwnProperty("csNotifySngRank")) {
            object.csNotifySngRank = $root.CSNotifySngRank.toObject(message.csNotifySngRank, options);
            if (options.oneofs)
                object.msgUnion = "csNotifySngRank";
        }
        if (message.csNotifyTuoGuan != null && message.hasOwnProperty("csNotifyTuoGuan")) {
            object.csNotifyTuoGuan = $root.CSNotifyTuoGuan.toObject(message.csNotifyTuoGuan, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyTuoGuan";
        }
        if (message.csNotifyPlayerCards != null && message.hasOwnProperty("csNotifyPlayerCards")) {
            object.csNotifyPlayerCards = $root.CSNotifyPlayerCards.toObject(message.csNotifyPlayerCards, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyPlayerCards";
        }
        if (message.csRequestShowCards != null && message.hasOwnProperty("csRequestShowCards")) {
            object.csRequestShowCards = $root.CSRequestShowCards.toObject(message.csRequestShowCards, options);
            if (options.oneofs)
                object.msgUnion = "csRequestShowCards";
        }
        if (message.csNotifyShowCards != null && message.hasOwnProperty("csNotifyShowCards")) {
            object.csNotifyShowCards = $root.CSNotifyShowCards.toObject(message.csNotifyShowCards, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyShowCards";
        }
        if (message.csRequestResetTime != null && message.hasOwnProperty("csRequestResetTime")) {
            object.csRequestResetTime = $root.CSRequestResetTime.toObject(message.csRequestResetTime, options);
            if (options.oneofs)
                object.msgUnion = "csRequestResetTime";
        }
        if (message.csNotifyResetTime != null && message.hasOwnProperty("csNotifyResetTime")) {
            object.csNotifyResetTime = $root.CSNotifyResetTime.toObject(message.csNotifyResetTime, options);
            if (options.oneofs)
                object.msgUnion = "csNotifyResetTime";
        }
        if (message.csRequestTableStat != null && message.hasOwnProperty("csRequestTableStat")) {
            object.csRequestTableStat = $root.CSRequestTableStat.toObject(message.csRequestTableStat, options);
            if (options.oneofs)
                object.msgUnion = "csRequestTableStat";
        }
        if (message.csRepsonseTableStat != null && message.hasOwnProperty("csRepsonseTableStat")) {
            object.csRepsonseTableStat = $root.CSResponseTableStat.toObject(message.csRepsonseTableStat, options);
            if (options.oneofs)
                object.msgUnion = "csRepsonseTableStat";
        }
        if (message.csRequestLastGameResult != null && message.hasOwnProperty("csRequestLastGameResult")) {
            object.csRequestLastGameResult = $root.CSRequestLastGameResult.toObject(message.csRequestLastGameResult, options);
            if (options.oneofs)
                object.msgUnion = "csRequestLastGameResult";
        }
        if (message.csResponseLastGameResult != null && message.hasOwnProperty("csResponseLastGameResult")) {
            object.csResponseLastGameResult = $root.CSResponseLastGameResult.toObject(message.csResponseLastGameResult, options);
            if (options.oneofs)
                object.msgUnion = "csResponseLastGameResult";
        }
        return object;
    };

    /**
     * Converts this PBCSMsg to JSON.
     * @function toJSON
     * @memberof PBCSMsg
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBCSMsg.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBCSMsg;
})();

/**
 * ENRobotType enum.
 * @exports ENRobotType
 * @enum {string}
 * @property {number} EN_ROBOT_TYPE_NO=0 EN_ROBOT_TYPE_NO value
 * @property {number} EN_ROBOT_TYPE_MAKE_FULL=1 EN_ROBOT_TYPE_MAKE_FULL value
 * @property {number} EN_ROBOT_TYPE_ACTIVE=2 EN_ROBOT_TYPE_ACTIVE value
 * @property {number} EN_ROBOT_TYPE_PASSIVE=3 EN_ROBOT_TYPE_PASSIVE value
 */
$root.ENRobotType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_ROBOT_TYPE_NO"] = 0;
    values[valuesById[1] = "EN_ROBOT_TYPE_MAKE_FULL"] = 1;
    values[valuesById[2] = "EN_ROBOT_TYPE_ACTIVE"] = 2;
    values[valuesById[3] = "EN_ROBOT_TYPE_PASSIVE"] = 3;
    return values;
})();

$root.PBCreateItem = (function() {

    /**
     * Properties of a PBCreateItem.
     * @exports IPBCreateItem
     * @interface IPBCreateItem
     * @property {number|Long} [smallBlind] PBCreateItem smallBlind
     * @property {number|Long} [bigBlind] PBCreateItem bigBlind
     * @property {number|Long} [minBuyIn] PBCreateItem minBuyIn
     * @property {number|Long} [maxBuyIn] PBCreateItem maxBuyIn
     * @property {number|Long} [fee] PBCreateItem fee
     */

    /**
     * Constructs a new PBCreateItem.
     * @exports PBCreateItem
     * @classdesc Represents a PBCreateItem.
     * @constructor
     * @param {IPBCreateItem=} [properties] Properties to set
     */
    function PBCreateItem(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBCreateItem smallBlind.
     * @member {number|Long}smallBlind
     * @memberof PBCreateItem
     * @instance
     */
    PBCreateItem.prototype.smallBlind = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBCreateItem bigBlind.
     * @member {number|Long}bigBlind
     * @memberof PBCreateItem
     * @instance
     */
    PBCreateItem.prototype.bigBlind = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBCreateItem minBuyIn.
     * @member {number|Long}minBuyIn
     * @memberof PBCreateItem
     * @instance
     */
    PBCreateItem.prototype.minBuyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBCreateItem maxBuyIn.
     * @member {number|Long}maxBuyIn
     * @memberof PBCreateItem
     * @instance
     */
    PBCreateItem.prototype.maxBuyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBCreateItem fee.
     * @member {number|Long}fee
     * @memberof PBCreateItem
     * @instance
     */
    PBCreateItem.prototype.fee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new PBCreateItem instance using the specified properties.
     * @function create
     * @memberof PBCreateItem
     * @static
     * @param {IPBCreateItem=} [properties] Properties to set
     * @returns {PBCreateItem} PBCreateItem instance
     */
    PBCreateItem.create = function create(properties) {
        return new PBCreateItem(properties);
    };

    /**
     * Encodes the specified PBCreateItem message. Does not implicitly {@link PBCreateItem.verify|verify} messages.
     * @function encode
     * @memberof PBCreateItem
     * @static
     * @param {IPBCreateItem} message PBCreateItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBCreateItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.smallBlind);
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.bigBlind);
        if (message.minBuyIn != null && message.hasOwnProperty("minBuyIn"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.minBuyIn);
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.maxBuyIn);
        if (message.fee != null && message.hasOwnProperty("fee"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.fee);
        return writer;
    };

    /**
     * Encodes the specified PBCreateItem message, length delimited. Does not implicitly {@link PBCreateItem.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBCreateItem
     * @static
     * @param {IPBCreateItem} message PBCreateItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBCreateItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBCreateItem message from the specified reader or buffer.
     * @function decode
     * @memberof PBCreateItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBCreateItem} PBCreateItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBCreateItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBCreateItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.smallBlind = reader.uint64();
                break;
            case 2:
                message.bigBlind = reader.uint64();
                break;
            case 3:
                message.minBuyIn = reader.uint64();
                break;
            case 4:
                message.maxBuyIn = reader.uint64();
                break;
            case 5:
                message.fee = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBCreateItem message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBCreateItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBCreateItem} PBCreateItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBCreateItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBCreateItem message.
     * @function verify
     * @memberof PBCreateItem
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBCreateItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            if (!$util.isInteger(message.smallBlind) && !(message.smallBlind && $util.isInteger(message.smallBlind.low) && $util.isInteger(message.smallBlind.high)))
                return "smallBlind: integer|Long expected";
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            if (!$util.isInteger(message.bigBlind) && !(message.bigBlind && $util.isInteger(message.bigBlind.low) && $util.isInteger(message.bigBlind.high)))
                return "bigBlind: integer|Long expected";
        if (message.minBuyIn != null && message.hasOwnProperty("minBuyIn"))
            if (!$util.isInteger(message.minBuyIn) && !(message.minBuyIn && $util.isInteger(message.minBuyIn.low) && $util.isInteger(message.minBuyIn.high)))
                return "minBuyIn: integer|Long expected";
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            if (!$util.isInteger(message.maxBuyIn) && !(message.maxBuyIn && $util.isInteger(message.maxBuyIn.low) && $util.isInteger(message.maxBuyIn.high)))
                return "maxBuyIn: integer|Long expected";
        if (message.fee != null && message.hasOwnProperty("fee"))
            if (!$util.isInteger(message.fee) && !(message.fee && $util.isInteger(message.fee.low) && $util.isInteger(message.fee.high)))
                return "fee: integer|Long expected";
        return null;
    };

    /**
     * Creates a PBCreateItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBCreateItem
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBCreateItem} PBCreateItem
     */
    PBCreateItem.fromObject = function fromObject(object) {
        if (object instanceof $root.PBCreateItem)
            return object;
        var message = new $root.PBCreateItem();
        if (object.smallBlind != null)
            if ($util.Long)
                (message.smallBlind = $util.Long.fromValue(object.smallBlind)).unsigned = true;
            else if (typeof object.smallBlind === "string")
                message.smallBlind = parseInt(object.smallBlind, 10);
            else if (typeof object.smallBlind === "number")
                message.smallBlind = object.smallBlind;
            else if (typeof object.smallBlind === "object")
                message.smallBlind = new $util.LongBits(object.smallBlind.low >>> 0, object.smallBlind.high >>> 0).toNumber(true);
        if (object.bigBlind != null)
            if ($util.Long)
                (message.bigBlind = $util.Long.fromValue(object.bigBlind)).unsigned = true;
            else if (typeof object.bigBlind === "string")
                message.bigBlind = parseInt(object.bigBlind, 10);
            else if (typeof object.bigBlind === "number")
                message.bigBlind = object.bigBlind;
            else if (typeof object.bigBlind === "object")
                message.bigBlind = new $util.LongBits(object.bigBlind.low >>> 0, object.bigBlind.high >>> 0).toNumber(true);
        if (object.minBuyIn != null)
            if ($util.Long)
                (message.minBuyIn = $util.Long.fromValue(object.minBuyIn)).unsigned = true;
            else if (typeof object.minBuyIn === "string")
                message.minBuyIn = parseInt(object.minBuyIn, 10);
            else if (typeof object.minBuyIn === "number")
                message.minBuyIn = object.minBuyIn;
            else if (typeof object.minBuyIn === "object")
                message.minBuyIn = new $util.LongBits(object.minBuyIn.low >>> 0, object.minBuyIn.high >>> 0).toNumber(true);
        if (object.maxBuyIn != null)
            if ($util.Long)
                (message.maxBuyIn = $util.Long.fromValue(object.maxBuyIn)).unsigned = true;
            else if (typeof object.maxBuyIn === "string")
                message.maxBuyIn = parseInt(object.maxBuyIn, 10);
            else if (typeof object.maxBuyIn === "number")
                message.maxBuyIn = object.maxBuyIn;
            else if (typeof object.maxBuyIn === "object")
                message.maxBuyIn = new $util.LongBits(object.maxBuyIn.low >>> 0, object.maxBuyIn.high >>> 0).toNumber(true);
        if (object.fee != null)
            if ($util.Long)
                (message.fee = $util.Long.fromValue(object.fee)).unsigned = true;
            else if (typeof object.fee === "string")
                message.fee = parseInt(object.fee, 10);
            else if (typeof object.fee === "number")
                message.fee = object.fee;
            else if (typeof object.fee === "object")
                message.fee = new $util.LongBits(object.fee.low >>> 0, object.fee.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a PBCreateItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBCreateItem
     * @static
     * @param {PBCreateItem} message PBCreateItem
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBCreateItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.smallBlind = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.smallBlind = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.bigBlind = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.bigBlind = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.minBuyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.minBuyIn = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.maxBuyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.maxBuyIn = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.fee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.fee = options.longs === String ? "0" : 0;
        }
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            if (typeof message.smallBlind === "number")
                object.smallBlind = options.longs === String ? String(message.smallBlind) : message.smallBlind;
            else
                object.smallBlind = options.longs === String ? $util.Long.prototype.toString.call(message.smallBlind) : options.longs === Number ? new $util.LongBits(message.smallBlind.low >>> 0, message.smallBlind.high >>> 0).toNumber(true) : message.smallBlind;
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            if (typeof message.bigBlind === "number")
                object.bigBlind = options.longs === String ? String(message.bigBlind) : message.bigBlind;
            else
                object.bigBlind = options.longs === String ? $util.Long.prototype.toString.call(message.bigBlind) : options.longs === Number ? new $util.LongBits(message.bigBlind.low >>> 0, message.bigBlind.high >>> 0).toNumber(true) : message.bigBlind;
        if (message.minBuyIn != null && message.hasOwnProperty("minBuyIn"))
            if (typeof message.minBuyIn === "number")
                object.minBuyIn = options.longs === String ? String(message.minBuyIn) : message.minBuyIn;
            else
                object.minBuyIn = options.longs === String ? $util.Long.prototype.toString.call(message.minBuyIn) : options.longs === Number ? new $util.LongBits(message.minBuyIn.low >>> 0, message.minBuyIn.high >>> 0).toNumber(true) : message.minBuyIn;
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            if (typeof message.maxBuyIn === "number")
                object.maxBuyIn = options.longs === String ? String(message.maxBuyIn) : message.maxBuyIn;
            else
                object.maxBuyIn = options.longs === String ? $util.Long.prototype.toString.call(message.maxBuyIn) : options.longs === Number ? new $util.LongBits(message.maxBuyIn.low >>> 0, message.maxBuyIn.high >>> 0).toNumber(true) : message.maxBuyIn;
        if (message.fee != null && message.hasOwnProperty("fee"))
            if (typeof message.fee === "number")
                object.fee = options.longs === String ? String(message.fee) : message.fee;
            else
                object.fee = options.longs === String ? $util.Long.prototype.toString.call(message.fee) : options.longs === Number ? new $util.LongBits(message.fee.low >>> 0, message.fee.high >>> 0).toNumber(true) : message.fee;
        return object;
    };

    /**
     * Converts this PBCreateItem to JSON.
     * @function toJSON
     * @memberof PBCreateItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBCreateItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBCreateItem;
})();

$root.PBConfigCreateTable = (function() {

    /**
     * Properties of a PBConfigCreateTable.
     * @exports IPBConfigCreateTable
     * @interface IPBConfigCreateTable
     * @property {number} [version] PBConfigCreateTable version
     * @property {Array.<IPBCreateItem>} [items] PBConfigCreateTable items
     * @property {Array.<number>} [times] PBConfigCreateTable times
     * @property {number} [startTimeout] PBConfigCreateTable startTimeout
     */

    /**
     * Constructs a new PBConfigCreateTable.
     * @exports PBConfigCreateTable
     * @classdesc Represents a PBConfigCreateTable.
     * @constructor
     * @param {IPBConfigCreateTable=} [properties] Properties to set
     */
    function PBConfigCreateTable(properties) {
        this.items = [];
        this.times = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigCreateTable version.
     * @member {number}version
     * @memberof PBConfigCreateTable
     * @instance
     */
    PBConfigCreateTable.prototype.version = 0;

    /**
     * PBConfigCreateTable items.
     * @member {Array.<IPBCreateItem>}items
     * @memberof PBConfigCreateTable
     * @instance
     */
    PBConfigCreateTable.prototype.items = $util.emptyArray;

    /**
     * PBConfigCreateTable times.
     * @member {Array.<number>}times
     * @memberof PBConfigCreateTable
     * @instance
     */
    PBConfigCreateTable.prototype.times = $util.emptyArray;

    /**
     * PBConfigCreateTable startTimeout.
     * @member {number}startTimeout
     * @memberof PBConfigCreateTable
     * @instance
     */
    PBConfigCreateTable.prototype.startTimeout = 0;

    /**
     * Creates a new PBConfigCreateTable instance using the specified properties.
     * @function create
     * @memberof PBConfigCreateTable
     * @static
     * @param {IPBConfigCreateTable=} [properties] Properties to set
     * @returns {PBConfigCreateTable} PBConfigCreateTable instance
     */
    PBConfigCreateTable.create = function create(properties) {
        return new PBConfigCreateTable(properties);
    };

    /**
     * Encodes the specified PBConfigCreateTable message. Does not implicitly {@link PBConfigCreateTable.verify|verify} messages.
     * @function encode
     * @memberof PBConfigCreateTable
     * @static
     * @param {IPBConfigCreateTable} message PBConfigCreateTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigCreateTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.version != null && message.hasOwnProperty("version"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.PBCreateItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.times != null && message.times.length)
            for (var i = 0; i < message.times.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.times[i]);
        if (message.startTimeout != null && message.hasOwnProperty("startTimeout"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.startTimeout);
        return writer;
    };

    /**
     * Encodes the specified PBConfigCreateTable message, length delimited. Does not implicitly {@link PBConfigCreateTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigCreateTable
     * @static
     * @param {IPBConfigCreateTable} message PBConfigCreateTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigCreateTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigCreateTable message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigCreateTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigCreateTable} PBConfigCreateTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigCreateTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigCreateTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.version = reader.uint32();
                break;
            case 2:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.PBCreateItem.decode(reader, reader.uint32()));
                break;
            case 3:
                if (!(message.times && message.times.length))
                    message.times = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.times.push(reader.uint32());
                } else
                    message.times.push(reader.uint32());
                break;
            case 4:
                message.startTimeout = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigCreateTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigCreateTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigCreateTable} PBConfigCreateTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigCreateTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigCreateTable message.
     * @function verify
     * @memberof PBConfigCreateTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigCreateTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.version != null && message.hasOwnProperty("version"))
            if (!$util.isInteger(message.version))
                return "version: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.PBCreateItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        if (message.times != null && message.hasOwnProperty("times")) {
            if (!Array.isArray(message.times))
                return "times: array expected";
            for (var i = 0; i < message.times.length; ++i)
                if (!$util.isInteger(message.times[i]))
                    return "times: integer[] expected";
        }
        if (message.startTimeout != null && message.hasOwnProperty("startTimeout"))
            if (!$util.isInteger(message.startTimeout))
                return "startTimeout: integer expected";
        return null;
    };

    /**
     * Creates a PBConfigCreateTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigCreateTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigCreateTable} PBConfigCreateTable
     */
    PBConfigCreateTable.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigCreateTable)
            return object;
        var message = new $root.PBConfigCreateTable();
        if (object.version != null)
            message.version = object.version >>> 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".PBConfigCreateTable.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".PBConfigCreateTable.items: object expected");
                message.items[i] = $root.PBCreateItem.fromObject(object.items[i]);
            }
        }
        if (object.times) {
            if (!Array.isArray(object.times))
                throw TypeError(".PBConfigCreateTable.times: array expected");
            message.times = [];
            for (var i = 0; i < object.times.length; ++i)
                message.times[i] = object.times[i] >>> 0;
        }
        if (object.startTimeout != null)
            message.startTimeout = object.startTimeout >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a PBConfigCreateTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigCreateTable
     * @static
     * @param {PBConfigCreateTable} message PBConfigCreateTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigCreateTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.items = [];
            object.times = [];
        }
        if (options.defaults) {
            object.version = 0;
            object.startTimeout = 0;
        }
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.PBCreateItem.toObject(message.items[j], options);
        }
        if (message.times && message.times.length) {
            object.times = [];
            for (var j = 0; j < message.times.length; ++j)
                object.times[j] = message.times[j];
        }
        if (message.startTimeout != null && message.hasOwnProperty("startTimeout"))
            object.startTimeout = message.startTimeout;
        return object;
    };

    /**
     * Converts this PBConfigCreateTable to JSON.
     * @function toJSON
     * @memberof PBConfigCreateTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigCreateTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigCreateTable;
})();

$root.PBConfigTableItem = (function() {

    /**
     * Properties of a PBConfigTableItem.
     * @exports IPBConfigTableItem
     * @interface IPBConfigTableItem
     * @property {number|Long} [smallBlinds] PBConfigTableItem smallBlinds
     * @property {number|Long} [bigBlinds] PBConfigTableItem bigBlinds
     * @property {number} [minPlayerNum] PBConfigTableItem minPlayerNum
     * @property {number} [maxPlayerNum] PBConfigTableItem maxPlayerNum
     * @property {number|Long} [minCarry] PBConfigTableItem minCarry
     * @property {number|Long} [maxCarry] PBConfigTableItem maxCarry
     * @property {number} [gameDrawRate] PBConfigTableItem gameDrawRate
     * @property {number} [maxObNum] PBConfigTableItem maxObNum
     * @property {number} [actionTime] PBConfigTableItem actionTime
     * @property {boolean} [isIpLimit] PBConfigTableItem isIpLimit
     * @property {ENRobotType} [robotType] PBConfigTableItem robotType
     */

    /**
     * Constructs a new PBConfigTableItem.
     * @exports PBConfigTableItem
     * @classdesc Represents a PBConfigTableItem.
     * @constructor
     * @param {IPBConfigTableItem=} [properties] Properties to set
     */
    function PBConfigTableItem(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigTableItem smallBlinds.
     * @member {number|Long}smallBlinds
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.smallBlinds = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBConfigTableItem bigBlinds.
     * @member {number|Long}bigBlinds
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.bigBlinds = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBConfigTableItem minPlayerNum.
     * @member {number}minPlayerNum
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.minPlayerNum = 0;

    /**
     * PBConfigTableItem maxPlayerNum.
     * @member {number}maxPlayerNum
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.maxPlayerNum = 0;

    /**
     * PBConfigTableItem minCarry.
     * @member {number|Long}minCarry
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.minCarry = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBConfigTableItem maxCarry.
     * @member {number|Long}maxCarry
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.maxCarry = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBConfigTableItem gameDrawRate.
     * @member {number}gameDrawRate
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.gameDrawRate = 0;

    /**
     * PBConfigTableItem maxObNum.
     * @member {number}maxObNum
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.maxObNum = 0;

    /**
     * PBConfigTableItem actionTime.
     * @member {number}actionTime
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.actionTime = 0;

    /**
     * PBConfigTableItem isIpLimit.
     * @member {boolean}isIpLimit
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.isIpLimit = false;

    /**
     * PBConfigTableItem robotType.
     * @member {ENRobotType}robotType
     * @memberof PBConfigTableItem
     * @instance
     */
    PBConfigTableItem.prototype.robotType = 0;

    /**
     * Creates a new PBConfigTableItem instance using the specified properties.
     * @function create
     * @memberof PBConfigTableItem
     * @static
     * @param {IPBConfigTableItem=} [properties] Properties to set
     * @returns {PBConfigTableItem} PBConfigTableItem instance
     */
    PBConfigTableItem.create = function create(properties) {
        return new PBConfigTableItem(properties);
    };

    /**
     * Encodes the specified PBConfigTableItem message. Does not implicitly {@link PBConfigTableItem.verify|verify} messages.
     * @function encode
     * @memberof PBConfigTableItem
     * @static
     * @param {IPBConfigTableItem} message PBConfigTableItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigTableItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.smallBlinds != null && message.hasOwnProperty("smallBlinds"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.smallBlinds);
        if (message.bigBlinds != null && message.hasOwnProperty("bigBlinds"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.bigBlinds);
        if (message.minPlayerNum != null && message.hasOwnProperty("minPlayerNum"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.minPlayerNum);
        if (message.maxPlayerNum != null && message.hasOwnProperty("maxPlayerNum"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.maxPlayerNum);
        if (message.minCarry != null && message.hasOwnProperty("minCarry"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.minCarry);
        if (message.maxCarry != null && message.hasOwnProperty("maxCarry"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.maxCarry);
        if (message.gameDrawRate != null && message.hasOwnProperty("gameDrawRate"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.gameDrawRate);
        if (message.maxObNum != null && message.hasOwnProperty("maxObNum"))
            writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.maxObNum);
        if (message.actionTime != null && message.hasOwnProperty("actionTime"))
            writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.actionTime);
        if (message.isIpLimit != null && message.hasOwnProperty("isIpLimit"))
            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.isIpLimit);
        if (message.robotType != null && message.hasOwnProperty("robotType"))
            writer.uint32(/* id 19, wireType 0 =*/152).int32(message.robotType);
        return writer;
    };

    /**
     * Encodes the specified PBConfigTableItem message, length delimited. Does not implicitly {@link PBConfigTableItem.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigTableItem
     * @static
     * @param {IPBConfigTableItem} message PBConfigTableItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigTableItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigTableItem message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigTableItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigTableItem} PBConfigTableItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigTableItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigTableItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.smallBlinds = reader.uint64();
                break;
            case 3:
                message.bigBlinds = reader.uint64();
                break;
            case 4:
                message.minPlayerNum = reader.uint32();
                break;
            case 5:
                message.maxPlayerNum = reader.uint32();
                break;
            case 6:
                message.minCarry = reader.uint64();
                break;
            case 7:
                message.maxCarry = reader.uint64();
                break;
            case 8:
                message.gameDrawRate = reader.uint32();
                break;
            case 15:
                message.maxObNum = reader.uint32();
                break;
            case 17:
                message.actionTime = reader.uint32();
                break;
            case 18:
                message.isIpLimit = reader.bool();
                break;
            case 19:
                message.robotType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigTableItem message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigTableItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigTableItem} PBConfigTableItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigTableItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigTableItem message.
     * @function verify
     * @memberof PBConfigTableItem
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigTableItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.smallBlinds != null && message.hasOwnProperty("smallBlinds"))
            if (!$util.isInteger(message.smallBlinds) && !(message.smallBlinds && $util.isInteger(message.smallBlinds.low) && $util.isInteger(message.smallBlinds.high)))
                return "smallBlinds: integer|Long expected";
        if (message.bigBlinds != null && message.hasOwnProperty("bigBlinds"))
            if (!$util.isInteger(message.bigBlinds) && !(message.bigBlinds && $util.isInteger(message.bigBlinds.low) && $util.isInteger(message.bigBlinds.high)))
                return "bigBlinds: integer|Long expected";
        if (message.minPlayerNum != null && message.hasOwnProperty("minPlayerNum"))
            if (!$util.isInteger(message.minPlayerNum))
                return "minPlayerNum: integer expected";
        if (message.maxPlayerNum != null && message.hasOwnProperty("maxPlayerNum"))
            if (!$util.isInteger(message.maxPlayerNum))
                return "maxPlayerNum: integer expected";
        if (message.minCarry != null && message.hasOwnProperty("minCarry"))
            if (!$util.isInteger(message.minCarry) && !(message.minCarry && $util.isInteger(message.minCarry.low) && $util.isInteger(message.minCarry.high)))
                return "minCarry: integer|Long expected";
        if (message.maxCarry != null && message.hasOwnProperty("maxCarry"))
            if (!$util.isInteger(message.maxCarry) && !(message.maxCarry && $util.isInteger(message.maxCarry.low) && $util.isInteger(message.maxCarry.high)))
                return "maxCarry: integer|Long expected";
        if (message.gameDrawRate != null && message.hasOwnProperty("gameDrawRate"))
            if (!$util.isInteger(message.gameDrawRate))
                return "gameDrawRate: integer expected";
        if (message.maxObNum != null && message.hasOwnProperty("maxObNum"))
            if (!$util.isInteger(message.maxObNum))
                return "maxObNum: integer expected";
        if (message.actionTime != null && message.hasOwnProperty("actionTime"))
            if (!$util.isInteger(message.actionTime))
                return "actionTime: integer expected";
        if (message.isIpLimit != null && message.hasOwnProperty("isIpLimit"))
            if (typeof message.isIpLimit !== "boolean")
                return "isIpLimit: boolean expected";
        if (message.robotType != null && message.hasOwnProperty("robotType"))
            switch (message.robotType) {
            default:
                return "robotType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        return null;
    };

    /**
     * Creates a PBConfigTableItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigTableItem
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigTableItem} PBConfigTableItem
     */
    PBConfigTableItem.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigTableItem)
            return object;
        var message = new $root.PBConfigTableItem();
        if (object.smallBlinds != null)
            if ($util.Long)
                (message.smallBlinds = $util.Long.fromValue(object.smallBlinds)).unsigned = true;
            else if (typeof object.smallBlinds === "string")
                message.smallBlinds = parseInt(object.smallBlinds, 10);
            else if (typeof object.smallBlinds === "number")
                message.smallBlinds = object.smallBlinds;
            else if (typeof object.smallBlinds === "object")
                message.smallBlinds = new $util.LongBits(object.smallBlinds.low >>> 0, object.smallBlinds.high >>> 0).toNumber(true);
        if (object.bigBlinds != null)
            if ($util.Long)
                (message.bigBlinds = $util.Long.fromValue(object.bigBlinds)).unsigned = true;
            else if (typeof object.bigBlinds === "string")
                message.bigBlinds = parseInt(object.bigBlinds, 10);
            else if (typeof object.bigBlinds === "number")
                message.bigBlinds = object.bigBlinds;
            else if (typeof object.bigBlinds === "object")
                message.bigBlinds = new $util.LongBits(object.bigBlinds.low >>> 0, object.bigBlinds.high >>> 0).toNumber(true);
        if (object.minPlayerNum != null)
            message.minPlayerNum = object.minPlayerNum >>> 0;
        if (object.maxPlayerNum != null)
            message.maxPlayerNum = object.maxPlayerNum >>> 0;
        if (object.minCarry != null)
            if ($util.Long)
                (message.minCarry = $util.Long.fromValue(object.minCarry)).unsigned = true;
            else if (typeof object.minCarry === "string")
                message.minCarry = parseInt(object.minCarry, 10);
            else if (typeof object.minCarry === "number")
                message.minCarry = object.minCarry;
            else if (typeof object.minCarry === "object")
                message.minCarry = new $util.LongBits(object.minCarry.low >>> 0, object.minCarry.high >>> 0).toNumber(true);
        if (object.maxCarry != null)
            if ($util.Long)
                (message.maxCarry = $util.Long.fromValue(object.maxCarry)).unsigned = true;
            else if (typeof object.maxCarry === "string")
                message.maxCarry = parseInt(object.maxCarry, 10);
            else if (typeof object.maxCarry === "number")
                message.maxCarry = object.maxCarry;
            else if (typeof object.maxCarry === "object")
                message.maxCarry = new $util.LongBits(object.maxCarry.low >>> 0, object.maxCarry.high >>> 0).toNumber(true);
        if (object.gameDrawRate != null)
            message.gameDrawRate = object.gameDrawRate >>> 0;
        if (object.maxObNum != null)
            message.maxObNum = object.maxObNum >>> 0;
        if (object.actionTime != null)
            message.actionTime = object.actionTime >>> 0;
        if (object.isIpLimit != null)
            message.isIpLimit = Boolean(object.isIpLimit);
        switch (object.robotType) {
        case "EN_ROBOT_TYPE_NO":
        case 0:
            message.robotType = 0;
            break;
        case "EN_ROBOT_TYPE_MAKE_FULL":
        case 1:
            message.robotType = 1;
            break;
        case "EN_ROBOT_TYPE_ACTIVE":
        case 2:
            message.robotType = 2;
            break;
        case "EN_ROBOT_TYPE_PASSIVE":
        case 3:
            message.robotType = 3;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a PBConfigTableItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigTableItem
     * @static
     * @param {PBConfigTableItem} message PBConfigTableItem
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigTableItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.smallBlinds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.smallBlinds = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.bigBlinds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.bigBlinds = options.longs === String ? "0" : 0;
            object.minPlayerNum = 0;
            object.maxPlayerNum = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.minCarry = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.minCarry = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.maxCarry = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.maxCarry = options.longs === String ? "0" : 0;
            object.gameDrawRate = 0;
            object.maxObNum = 0;
            object.actionTime = 0;
            object.isIpLimit = false;
            object.robotType = options.enums === String ? "EN_ROBOT_TYPE_NO" : 0;
        }
        if (message.smallBlinds != null && message.hasOwnProperty("smallBlinds"))
            if (typeof message.smallBlinds === "number")
                object.smallBlinds = options.longs === String ? String(message.smallBlinds) : message.smallBlinds;
            else
                object.smallBlinds = options.longs === String ? $util.Long.prototype.toString.call(message.smallBlinds) : options.longs === Number ? new $util.LongBits(message.smallBlinds.low >>> 0, message.smallBlinds.high >>> 0).toNumber(true) : message.smallBlinds;
        if (message.bigBlinds != null && message.hasOwnProperty("bigBlinds"))
            if (typeof message.bigBlinds === "number")
                object.bigBlinds = options.longs === String ? String(message.bigBlinds) : message.bigBlinds;
            else
                object.bigBlinds = options.longs === String ? $util.Long.prototype.toString.call(message.bigBlinds) : options.longs === Number ? new $util.LongBits(message.bigBlinds.low >>> 0, message.bigBlinds.high >>> 0).toNumber(true) : message.bigBlinds;
        if (message.minPlayerNum != null && message.hasOwnProperty("minPlayerNum"))
            object.minPlayerNum = message.minPlayerNum;
        if (message.maxPlayerNum != null && message.hasOwnProperty("maxPlayerNum"))
            object.maxPlayerNum = message.maxPlayerNum;
        if (message.minCarry != null && message.hasOwnProperty("minCarry"))
            if (typeof message.minCarry === "number")
                object.minCarry = options.longs === String ? String(message.minCarry) : message.minCarry;
            else
                object.minCarry = options.longs === String ? $util.Long.prototype.toString.call(message.minCarry) : options.longs === Number ? new $util.LongBits(message.minCarry.low >>> 0, message.minCarry.high >>> 0).toNumber(true) : message.minCarry;
        if (message.maxCarry != null && message.hasOwnProperty("maxCarry"))
            if (typeof message.maxCarry === "number")
                object.maxCarry = options.longs === String ? String(message.maxCarry) : message.maxCarry;
            else
                object.maxCarry = options.longs === String ? $util.Long.prototype.toString.call(message.maxCarry) : options.longs === Number ? new $util.LongBits(message.maxCarry.low >>> 0, message.maxCarry.high >>> 0).toNumber(true) : message.maxCarry;
        if (message.gameDrawRate != null && message.hasOwnProperty("gameDrawRate"))
            object.gameDrawRate = message.gameDrawRate;
        if (message.maxObNum != null && message.hasOwnProperty("maxObNum"))
            object.maxObNum = message.maxObNum;
        if (message.actionTime != null && message.hasOwnProperty("actionTime"))
            object.actionTime = message.actionTime;
        if (message.isIpLimit != null && message.hasOwnProperty("isIpLimit"))
            object.isIpLimit = message.isIpLimit;
        if (message.robotType != null && message.hasOwnProperty("robotType"))
            object.robotType = options.enums === String ? $root.ENRobotType[message.robotType] : message.robotType;
        return object;
    };

    /**
     * Converts this PBConfigTableItem to JSON.
     * @function toJSON
     * @memberof PBConfigTableItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigTableItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigTableItem;
})();

$root.PBConfigTableList = (function() {

    /**
     * Properties of a PBConfigTableList.
     * @exports IPBConfigTableList
     * @interface IPBConfigTableList
     * @property {number} [beginId] PBConfigTableList beginId
     * @property {number} [tableNum] PBConfigTableList tableNum
     * @property {IPBConfigTableItem} [tableConf] PBConfigTableList tableConf
     */

    /**
     * Constructs a new PBConfigTableList.
     * @exports PBConfigTableList
     * @classdesc Represents a PBConfigTableList.
     * @constructor
     * @param {IPBConfigTableList=} [properties] Properties to set
     */
    function PBConfigTableList(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigTableList beginId.
     * @member {number}beginId
     * @memberof PBConfigTableList
     * @instance
     */
    PBConfigTableList.prototype.beginId = 0;

    /**
     * PBConfigTableList tableNum.
     * @member {number}tableNum
     * @memberof PBConfigTableList
     * @instance
     */
    PBConfigTableList.prototype.tableNum = 0;

    /**
     * PBConfigTableList tableConf.
     * @member {(IPBConfigTableItem|null|undefined)}tableConf
     * @memberof PBConfigTableList
     * @instance
     */
    PBConfigTableList.prototype.tableConf = null;

    /**
     * Creates a new PBConfigTableList instance using the specified properties.
     * @function create
     * @memberof PBConfigTableList
     * @static
     * @param {IPBConfigTableList=} [properties] Properties to set
     * @returns {PBConfigTableList} PBConfigTableList instance
     */
    PBConfigTableList.create = function create(properties) {
        return new PBConfigTableList(properties);
    };

    /**
     * Encodes the specified PBConfigTableList message. Does not implicitly {@link PBConfigTableList.verify|verify} messages.
     * @function encode
     * @memberof PBConfigTableList
     * @static
     * @param {IPBConfigTableList} message PBConfigTableList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigTableList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.beginId != null && message.hasOwnProperty("beginId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.beginId);
        if (message.tableNum != null && message.hasOwnProperty("tableNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tableNum);
        if (message.tableConf != null && message.hasOwnProperty("tableConf"))
            $root.PBConfigTableItem.encode(message.tableConf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PBConfigTableList message, length delimited. Does not implicitly {@link PBConfigTableList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigTableList
     * @static
     * @param {IPBConfigTableList} message PBConfigTableList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigTableList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigTableList message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigTableList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigTableList} PBConfigTableList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigTableList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigTableList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.beginId = reader.uint32();
                break;
            case 2:
                message.tableNum = reader.uint32();
                break;
            case 3:
                message.tableConf = $root.PBConfigTableItem.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigTableList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigTableList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigTableList} PBConfigTableList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigTableList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigTableList message.
     * @function verify
     * @memberof PBConfigTableList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigTableList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.beginId != null && message.hasOwnProperty("beginId"))
            if (!$util.isInteger(message.beginId))
                return "beginId: integer expected";
        if (message.tableNum != null && message.hasOwnProperty("tableNum"))
            if (!$util.isInteger(message.tableNum))
                return "tableNum: integer expected";
        if (message.tableConf != null && message.hasOwnProperty("tableConf")) {
            var error = $root.PBConfigTableItem.verify(message.tableConf);
            if (error)
                return "tableConf." + error;
        }
        return null;
    };

    /**
     * Creates a PBConfigTableList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigTableList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigTableList} PBConfigTableList
     */
    PBConfigTableList.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigTableList)
            return object;
        var message = new $root.PBConfigTableList();
        if (object.beginId != null)
            message.beginId = object.beginId >>> 0;
        if (object.tableNum != null)
            message.tableNum = object.tableNum >>> 0;
        if (object.tableConf != null) {
            if (typeof object.tableConf !== "object")
                throw TypeError(".PBConfigTableList.tableConf: object expected");
            message.tableConf = $root.PBConfigTableItem.fromObject(object.tableConf);
        }
        return message;
    };

    /**
     * Creates a plain object from a PBConfigTableList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigTableList
     * @static
     * @param {PBConfigTableList} message PBConfigTableList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigTableList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.beginId = 0;
            object.tableNum = 0;
            object.tableConf = null;
        }
        if (message.beginId != null && message.hasOwnProperty("beginId"))
            object.beginId = message.beginId;
        if (message.tableNum != null && message.hasOwnProperty("tableNum"))
            object.tableNum = message.tableNum;
        if (message.tableConf != null && message.hasOwnProperty("tableConf"))
            object.tableConf = $root.PBConfigTableItem.toObject(message.tableConf, options);
        return object;
    };

    /**
     * Converts this PBConfigTableList to JSON.
     * @function toJSON
     * @memberof PBConfigTableList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigTableList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigTableList;
})();

$root.PBConfigTable = (function() {

    /**
     * Properties of a PBConfigTable.
     * @exports IPBConfigTable
     * @interface IPBConfigTable
     * @property {number} [version] PBConfigTable version
     * @property {Array.<IPBConfigTableList>} [tableConfLists] PBConfigTable tableConfLists
     * @property {number} [actionTime] PBConfigTable actionTime
     * @property {number} [maxObNum] PBConfigTable maxObNum
     * @property {number} [minPlayerNum] PBConfigTable minPlayerNum
     * @property {number} [maxPlayerNum] PBConfigTable maxPlayerNum
     */

    /**
     * Constructs a new PBConfigTable.
     * @exports PBConfigTable
     * @classdesc Represents a PBConfigTable.
     * @constructor
     * @param {IPBConfigTable=} [properties] Properties to set
     */
    function PBConfigTable(properties) {
        this.tableConfLists = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigTable version.
     * @member {number}version
     * @memberof PBConfigTable
     * @instance
     */
    PBConfigTable.prototype.version = 0;

    /**
     * PBConfigTable tableConfLists.
     * @member {Array.<IPBConfigTableList>}tableConfLists
     * @memberof PBConfigTable
     * @instance
     */
    PBConfigTable.prototype.tableConfLists = $util.emptyArray;

    /**
     * PBConfigTable actionTime.
     * @member {number}actionTime
     * @memberof PBConfigTable
     * @instance
     */
    PBConfigTable.prototype.actionTime = 0;

    /**
     * PBConfigTable maxObNum.
     * @member {number}maxObNum
     * @memberof PBConfigTable
     * @instance
     */
    PBConfigTable.prototype.maxObNum = 0;

    /**
     * PBConfigTable minPlayerNum.
     * @member {number}minPlayerNum
     * @memberof PBConfigTable
     * @instance
     */
    PBConfigTable.prototype.minPlayerNum = 0;

    /**
     * PBConfigTable maxPlayerNum.
     * @member {number}maxPlayerNum
     * @memberof PBConfigTable
     * @instance
     */
    PBConfigTable.prototype.maxPlayerNum = 0;

    /**
     * Creates a new PBConfigTable instance using the specified properties.
     * @function create
     * @memberof PBConfigTable
     * @static
     * @param {IPBConfigTable=} [properties] Properties to set
     * @returns {PBConfigTable} PBConfigTable instance
     */
    PBConfigTable.create = function create(properties) {
        return new PBConfigTable(properties);
    };

    /**
     * Encodes the specified PBConfigTable message. Does not implicitly {@link PBConfigTable.verify|verify} messages.
     * @function encode
     * @memberof PBConfigTable
     * @static
     * @param {IPBConfigTable} message PBConfigTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.version != null && message.hasOwnProperty("version"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
        if (message.tableConfLists != null && message.tableConfLists.length)
            for (var i = 0; i < message.tableConfLists.length; ++i)
                $root.PBConfigTableList.encode(message.tableConfLists[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.actionTime != null && message.hasOwnProperty("actionTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.actionTime);
        if (message.maxObNum != null && message.hasOwnProperty("maxObNum"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.maxObNum);
        if (message.minPlayerNum != null && message.hasOwnProperty("minPlayerNum"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.minPlayerNum);
        if (message.maxPlayerNum != null && message.hasOwnProperty("maxPlayerNum"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.maxPlayerNum);
        return writer;
    };

    /**
     * Encodes the specified PBConfigTable message, length delimited. Does not implicitly {@link PBConfigTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigTable
     * @static
     * @param {IPBConfigTable} message PBConfigTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigTable message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigTable} PBConfigTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.version = reader.uint32();
                break;
            case 2:
                if (!(message.tableConfLists && message.tableConfLists.length))
                    message.tableConfLists = [];
                message.tableConfLists.push($root.PBConfigTableList.decode(reader, reader.uint32()));
                break;
            case 3:
                message.actionTime = reader.uint32();
                break;
            case 4:
                message.maxObNum = reader.uint32();
                break;
            case 5:
                message.minPlayerNum = reader.uint32();
                break;
            case 6:
                message.maxPlayerNum = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigTable} PBConfigTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigTable message.
     * @function verify
     * @memberof PBConfigTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.version != null && message.hasOwnProperty("version"))
            if (!$util.isInteger(message.version))
                return "version: integer expected";
        if (message.tableConfLists != null && message.hasOwnProperty("tableConfLists")) {
            if (!Array.isArray(message.tableConfLists))
                return "tableConfLists: array expected";
            for (var i = 0; i < message.tableConfLists.length; ++i) {
                var error = $root.PBConfigTableList.verify(message.tableConfLists[i]);
                if (error)
                    return "tableConfLists." + error;
            }
        }
        if (message.actionTime != null && message.hasOwnProperty("actionTime"))
            if (!$util.isInteger(message.actionTime))
                return "actionTime: integer expected";
        if (message.maxObNum != null && message.hasOwnProperty("maxObNum"))
            if (!$util.isInteger(message.maxObNum))
                return "maxObNum: integer expected";
        if (message.minPlayerNum != null && message.hasOwnProperty("minPlayerNum"))
            if (!$util.isInteger(message.minPlayerNum))
                return "minPlayerNum: integer expected";
        if (message.maxPlayerNum != null && message.hasOwnProperty("maxPlayerNum"))
            if (!$util.isInteger(message.maxPlayerNum))
                return "maxPlayerNum: integer expected";
        return null;
    };

    /**
     * Creates a PBConfigTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigTable} PBConfigTable
     */
    PBConfigTable.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigTable)
            return object;
        var message = new $root.PBConfigTable();
        if (object.version != null)
            message.version = object.version >>> 0;
        if (object.tableConfLists) {
            if (!Array.isArray(object.tableConfLists))
                throw TypeError(".PBConfigTable.tableConfLists: array expected");
            message.tableConfLists = [];
            for (var i = 0; i < object.tableConfLists.length; ++i) {
                if (typeof object.tableConfLists[i] !== "object")
                    throw TypeError(".PBConfigTable.tableConfLists: object expected");
                message.tableConfLists[i] = $root.PBConfigTableList.fromObject(object.tableConfLists[i]);
            }
        }
        if (object.actionTime != null)
            message.actionTime = object.actionTime >>> 0;
        if (object.maxObNum != null)
            message.maxObNum = object.maxObNum >>> 0;
        if (object.minPlayerNum != null)
            message.minPlayerNum = object.minPlayerNum >>> 0;
        if (object.maxPlayerNum != null)
            message.maxPlayerNum = object.maxPlayerNum >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a PBConfigTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigTable
     * @static
     * @param {PBConfigTable} message PBConfigTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.tableConfLists = [];
        if (options.defaults) {
            object.version = 0;
            object.actionTime = 0;
            object.maxObNum = 0;
            object.minPlayerNum = 0;
            object.maxPlayerNum = 0;
        }
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        if (message.tableConfLists && message.tableConfLists.length) {
            object.tableConfLists = [];
            for (var j = 0; j < message.tableConfLists.length; ++j)
                object.tableConfLists[j] = $root.PBConfigTableList.toObject(message.tableConfLists[j], options);
        }
        if (message.actionTime != null && message.hasOwnProperty("actionTime"))
            object.actionTime = message.actionTime;
        if (message.maxObNum != null && message.hasOwnProperty("maxObNum"))
            object.maxObNum = message.maxObNum;
        if (message.minPlayerNum != null && message.hasOwnProperty("minPlayerNum"))
            object.minPlayerNum = message.minPlayerNum;
        if (message.maxPlayerNum != null && message.hasOwnProperty("maxPlayerNum"))
            object.maxPlayerNum = message.maxPlayerNum;
        return object;
    };

    /**
     * Converts this PBConfigTable to JSON.
     * @function toJSON
     * @memberof PBConfigTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigTable;
})();

$root.PBConfigRobotList = (function() {

    /**
     * Properties of a PBConfigRobotList.
     * @exports IPBConfigRobotList
     * @interface IPBConfigRobotList
     * @property {number|Long} [beginUid] PBConfigRobotList beginUid
     * @property {number} [robotNum] PBConfigRobotList robotNum
     * @property {number} [robotMaxNum] PBConfigRobotList robotMaxNum
     * @property {ENTableType} [tableType] PBConfigRobotList tableType
     * @property {number|Long} [minChips] PBConfigRobotList minChips
     * @property {number|Long} [maxChips] PBConfigRobotList maxChips
     * @property {number} [minLevel] PBConfigRobotList minLevel
     * @property {number} [maxLevel] PBConfigRobotList maxLevel
     * @property {number} [minPlayTimes] PBConfigRobotList minPlayTimes
     * @property {number} [maxPlayTimes] PBConfigRobotList maxPlayTimes
     * @property {number} [minWinRate] PBConfigRobotList minWinRate
     * @property {number} [maxWinRate] PBConfigRobotList maxWinRate
     * @property {Array.<number>} [tableListMakeFull] PBConfigRobotList tableListMakeFull
     * @property {Array.<number>} [tableListActive] PBConfigRobotList tableListActive
     */

    /**
     * Constructs a new PBConfigRobotList.
     * @exports PBConfigRobotList
     * @classdesc Represents a PBConfigRobotList.
     * @constructor
     * @param {IPBConfigRobotList=} [properties] Properties to set
     */
    function PBConfigRobotList(properties) {
        this.tableListMakeFull = [];
        this.tableListActive = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigRobotList beginUid.
     * @member {number|Long}beginUid
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.beginUid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBConfigRobotList robotNum.
     * @member {number}robotNum
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.robotNum = 0;

    /**
     * PBConfigRobotList robotMaxNum.
     * @member {number}robotMaxNum
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.robotMaxNum = 0;

    /**
     * PBConfigRobotList tableType.
     * @member {ENTableType}tableType
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.tableType = 0;

    /**
     * PBConfigRobotList minChips.
     * @member {number|Long}minChips
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.minChips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBConfigRobotList maxChips.
     * @member {number|Long}maxChips
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.maxChips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBConfigRobotList minLevel.
     * @member {number}minLevel
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.minLevel = 0;

    /**
     * PBConfigRobotList maxLevel.
     * @member {number}maxLevel
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.maxLevel = 0;

    /**
     * PBConfigRobotList minPlayTimes.
     * @member {number}minPlayTimes
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.minPlayTimes = 0;

    /**
     * PBConfigRobotList maxPlayTimes.
     * @member {number}maxPlayTimes
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.maxPlayTimes = 0;

    /**
     * PBConfigRobotList minWinRate.
     * @member {number}minWinRate
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.minWinRate = 0;

    /**
     * PBConfigRobotList maxWinRate.
     * @member {number}maxWinRate
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.maxWinRate = 0;

    /**
     * PBConfigRobotList tableListMakeFull.
     * @member {Array.<number>}tableListMakeFull
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.tableListMakeFull = $util.emptyArray;

    /**
     * PBConfigRobotList tableListActive.
     * @member {Array.<number>}tableListActive
     * @memberof PBConfigRobotList
     * @instance
     */
    PBConfigRobotList.prototype.tableListActive = $util.emptyArray;

    /**
     * Creates a new PBConfigRobotList instance using the specified properties.
     * @function create
     * @memberof PBConfigRobotList
     * @static
     * @param {IPBConfigRobotList=} [properties] Properties to set
     * @returns {PBConfigRobotList} PBConfigRobotList instance
     */
    PBConfigRobotList.create = function create(properties) {
        return new PBConfigRobotList(properties);
    };

    /**
     * Encodes the specified PBConfigRobotList message. Does not implicitly {@link PBConfigRobotList.verify|verify} messages.
     * @function encode
     * @memberof PBConfigRobotList
     * @static
     * @param {IPBConfigRobotList} message PBConfigRobotList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigRobotList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.beginUid != null && message.hasOwnProperty("beginUid"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.beginUid);
        if (message.robotNum != null && message.hasOwnProperty("robotNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.robotNum);
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.tableType);
        if (message.minChips != null && message.hasOwnProperty("minChips"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.minChips);
        if (message.robotMaxNum != null && message.hasOwnProperty("robotMaxNum"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.robotMaxNum);
        if (message.maxChips != null && message.hasOwnProperty("maxChips"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.maxChips);
        if (message.minLevel != null && message.hasOwnProperty("minLevel"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.minLevel);
        if (message.maxLevel != null && message.hasOwnProperty("maxLevel"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.maxLevel);
        if (message.minPlayTimes != null && message.hasOwnProperty("minPlayTimes"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.minPlayTimes);
        if (message.maxPlayTimes != null && message.hasOwnProperty("maxPlayTimes"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.maxPlayTimes);
        if (message.minWinRate != null && message.hasOwnProperty("minWinRate"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.minWinRate);
        if (message.maxWinRate != null && message.hasOwnProperty("maxWinRate"))
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.maxWinRate);
        if (message.tableListMakeFull != null && message.tableListMakeFull.length)
            for (var i = 0; i < message.tableListMakeFull.length; ++i)
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.tableListMakeFull[i]);
        if (message.tableListActive != null && message.tableListActive.length)
            for (var i = 0; i < message.tableListActive.length; ++i)
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.tableListActive[i]);
        return writer;
    };

    /**
     * Encodes the specified PBConfigRobotList message, length delimited. Does not implicitly {@link PBConfigRobotList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigRobotList
     * @static
     * @param {IPBConfigRobotList} message PBConfigRobotList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigRobotList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigRobotList message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigRobotList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigRobotList} PBConfigRobotList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigRobotList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigRobotList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.beginUid = reader.uint64();
                break;
            case 2:
                message.robotNum = reader.uint32();
                break;
            case 5:
                message.robotMaxNum = reader.uint32();
                break;
            case 3:
                message.tableType = reader.int32();
                break;
            case 4:
                message.minChips = reader.uint64();
                break;
            case 6:
                message.maxChips = reader.uint64();
                break;
            case 7:
                message.minLevel = reader.uint32();
                break;
            case 8:
                message.maxLevel = reader.uint32();
                break;
            case 9:
                message.minPlayTimes = reader.uint32();
                break;
            case 10:
                message.maxPlayTimes = reader.uint32();
                break;
            case 11:
                message.minWinRate = reader.uint32();
                break;
            case 12:
                message.maxWinRate = reader.uint32();
                break;
            case 13:
                if (!(message.tableListMakeFull && message.tableListMakeFull.length))
                    message.tableListMakeFull = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.tableListMakeFull.push(reader.uint32());
                } else
                    message.tableListMakeFull.push(reader.uint32());
                break;
            case 14:
                if (!(message.tableListActive && message.tableListActive.length))
                    message.tableListActive = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.tableListActive.push(reader.uint32());
                } else
                    message.tableListActive.push(reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigRobotList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigRobotList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigRobotList} PBConfigRobotList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigRobotList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigRobotList message.
     * @function verify
     * @memberof PBConfigRobotList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigRobotList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.beginUid != null && message.hasOwnProperty("beginUid"))
            if (!$util.isInteger(message.beginUid) && !(message.beginUid && $util.isInteger(message.beginUid.low) && $util.isInteger(message.beginUid.high)))
                return "beginUid: integer|Long expected";
        if (message.robotNum != null && message.hasOwnProperty("robotNum"))
            if (!$util.isInteger(message.robotNum))
                return "robotNum: integer expected";
        if (message.robotMaxNum != null && message.hasOwnProperty("robotMaxNum"))
            if (!$util.isInteger(message.robotMaxNum))
                return "robotMaxNum: integer expected";
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            switch (message.tableType) {
            default:
                return "tableType: enum value expected";
            case 0:
            case 100:
            case 200:
                break;
            }
        if (message.minChips != null && message.hasOwnProperty("minChips"))
            if (!$util.isInteger(message.minChips) && !(message.minChips && $util.isInteger(message.minChips.low) && $util.isInteger(message.minChips.high)))
                return "minChips: integer|Long expected";
        if (message.maxChips != null && message.hasOwnProperty("maxChips"))
            if (!$util.isInteger(message.maxChips) && !(message.maxChips && $util.isInteger(message.maxChips.low) && $util.isInteger(message.maxChips.high)))
                return "maxChips: integer|Long expected";
        if (message.minLevel != null && message.hasOwnProperty("minLevel"))
            if (!$util.isInteger(message.minLevel))
                return "minLevel: integer expected";
        if (message.maxLevel != null && message.hasOwnProperty("maxLevel"))
            if (!$util.isInteger(message.maxLevel))
                return "maxLevel: integer expected";
        if (message.minPlayTimes != null && message.hasOwnProperty("minPlayTimes"))
            if (!$util.isInteger(message.minPlayTimes))
                return "minPlayTimes: integer expected";
        if (message.maxPlayTimes != null && message.hasOwnProperty("maxPlayTimes"))
            if (!$util.isInteger(message.maxPlayTimes))
                return "maxPlayTimes: integer expected";
        if (message.minWinRate != null && message.hasOwnProperty("minWinRate"))
            if (!$util.isInteger(message.minWinRate))
                return "minWinRate: integer expected";
        if (message.maxWinRate != null && message.hasOwnProperty("maxWinRate"))
            if (!$util.isInteger(message.maxWinRate))
                return "maxWinRate: integer expected";
        if (message.tableListMakeFull != null && message.hasOwnProperty("tableListMakeFull")) {
            if (!Array.isArray(message.tableListMakeFull))
                return "tableListMakeFull: array expected";
            for (var i = 0; i < message.tableListMakeFull.length; ++i)
                if (!$util.isInteger(message.tableListMakeFull[i]))
                    return "tableListMakeFull: integer[] expected";
        }
        if (message.tableListActive != null && message.hasOwnProperty("tableListActive")) {
            if (!Array.isArray(message.tableListActive))
                return "tableListActive: array expected";
            for (var i = 0; i < message.tableListActive.length; ++i)
                if (!$util.isInteger(message.tableListActive[i]))
                    return "tableListActive: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a PBConfigRobotList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigRobotList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigRobotList} PBConfigRobotList
     */
    PBConfigRobotList.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigRobotList)
            return object;
        var message = new $root.PBConfigRobotList();
        if (object.beginUid != null)
            if ($util.Long)
                (message.beginUid = $util.Long.fromValue(object.beginUid)).unsigned = true;
            else if (typeof object.beginUid === "string")
                message.beginUid = parseInt(object.beginUid, 10);
            else if (typeof object.beginUid === "number")
                message.beginUid = object.beginUid;
            else if (typeof object.beginUid === "object")
                message.beginUid = new $util.LongBits(object.beginUid.low >>> 0, object.beginUid.high >>> 0).toNumber(true);
        if (object.robotNum != null)
            message.robotNum = object.robotNum >>> 0;
        if (object.robotMaxNum != null)
            message.robotMaxNum = object.robotMaxNum >>> 0;
        switch (object.tableType) {
        case "EN_TABLE_CREATE_NORMAL":
        case 0:
            message.tableType = 0;
            break;
        case "EN_TABLE_SNG_TIME":
        case 100:
            message.tableType = 100;
            break;
        case "EN_TABLE_TRAINING_TIME":
        case 200:
            message.tableType = 200;
            break;
        }
        if (object.minChips != null)
            if ($util.Long)
                (message.minChips = $util.Long.fromValue(object.minChips)).unsigned = true;
            else if (typeof object.minChips === "string")
                message.minChips = parseInt(object.minChips, 10);
            else if (typeof object.minChips === "number")
                message.minChips = object.minChips;
            else if (typeof object.minChips === "object")
                message.minChips = new $util.LongBits(object.minChips.low >>> 0, object.minChips.high >>> 0).toNumber(true);
        if (object.maxChips != null)
            if ($util.Long)
                (message.maxChips = $util.Long.fromValue(object.maxChips)).unsigned = true;
            else if (typeof object.maxChips === "string")
                message.maxChips = parseInt(object.maxChips, 10);
            else if (typeof object.maxChips === "number")
                message.maxChips = object.maxChips;
            else if (typeof object.maxChips === "object")
                message.maxChips = new $util.LongBits(object.maxChips.low >>> 0, object.maxChips.high >>> 0).toNumber(true);
        if (object.minLevel != null)
            message.minLevel = object.minLevel >>> 0;
        if (object.maxLevel != null)
            message.maxLevel = object.maxLevel >>> 0;
        if (object.minPlayTimes != null)
            message.minPlayTimes = object.minPlayTimes >>> 0;
        if (object.maxPlayTimes != null)
            message.maxPlayTimes = object.maxPlayTimes >>> 0;
        if (object.minWinRate != null)
            message.minWinRate = object.minWinRate >>> 0;
        if (object.maxWinRate != null)
            message.maxWinRate = object.maxWinRate >>> 0;
        if (object.tableListMakeFull) {
            if (!Array.isArray(object.tableListMakeFull))
                throw TypeError(".PBConfigRobotList.tableListMakeFull: array expected");
            message.tableListMakeFull = [];
            for (var i = 0; i < object.tableListMakeFull.length; ++i)
                message.tableListMakeFull[i] = object.tableListMakeFull[i] >>> 0;
        }
        if (object.tableListActive) {
            if (!Array.isArray(object.tableListActive))
                throw TypeError(".PBConfigRobotList.tableListActive: array expected");
            message.tableListActive = [];
            for (var i = 0; i < object.tableListActive.length; ++i)
                message.tableListActive[i] = object.tableListActive[i] >>> 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a PBConfigRobotList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigRobotList
     * @static
     * @param {PBConfigRobotList} message PBConfigRobotList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigRobotList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.tableListMakeFull = [];
            object.tableListActive = [];
        }
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.beginUid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.beginUid = options.longs === String ? "0" : 0;
            object.robotNum = 0;
            object.tableType = options.enums === String ? "EN_TABLE_CREATE_NORMAL" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.minChips = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.minChips = options.longs === String ? "0" : 0;
            object.robotMaxNum = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.maxChips = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.maxChips = options.longs === String ? "0" : 0;
            object.minLevel = 0;
            object.maxLevel = 0;
            object.minPlayTimes = 0;
            object.maxPlayTimes = 0;
            object.minWinRate = 0;
            object.maxWinRate = 0;
        }
        if (message.beginUid != null && message.hasOwnProperty("beginUid"))
            if (typeof message.beginUid === "number")
                object.beginUid = options.longs === String ? String(message.beginUid) : message.beginUid;
            else
                object.beginUid = options.longs === String ? $util.Long.prototype.toString.call(message.beginUid) : options.longs === Number ? new $util.LongBits(message.beginUid.low >>> 0, message.beginUid.high >>> 0).toNumber(true) : message.beginUid;
        if (message.robotNum != null && message.hasOwnProperty("robotNum"))
            object.robotNum = message.robotNum;
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            object.tableType = options.enums === String ? $root.ENTableType[message.tableType] : message.tableType;
        if (message.minChips != null && message.hasOwnProperty("minChips"))
            if (typeof message.minChips === "number")
                object.minChips = options.longs === String ? String(message.minChips) : message.minChips;
            else
                object.minChips = options.longs === String ? $util.Long.prototype.toString.call(message.minChips) : options.longs === Number ? new $util.LongBits(message.minChips.low >>> 0, message.minChips.high >>> 0).toNumber(true) : message.minChips;
        if (message.robotMaxNum != null && message.hasOwnProperty("robotMaxNum"))
            object.robotMaxNum = message.robotMaxNum;
        if (message.maxChips != null && message.hasOwnProperty("maxChips"))
            if (typeof message.maxChips === "number")
                object.maxChips = options.longs === String ? String(message.maxChips) : message.maxChips;
            else
                object.maxChips = options.longs === String ? $util.Long.prototype.toString.call(message.maxChips) : options.longs === Number ? new $util.LongBits(message.maxChips.low >>> 0, message.maxChips.high >>> 0).toNumber(true) : message.maxChips;
        if (message.minLevel != null && message.hasOwnProperty("minLevel"))
            object.minLevel = message.minLevel;
        if (message.maxLevel != null && message.hasOwnProperty("maxLevel"))
            object.maxLevel = message.maxLevel;
        if (message.minPlayTimes != null && message.hasOwnProperty("minPlayTimes"))
            object.minPlayTimes = message.minPlayTimes;
        if (message.maxPlayTimes != null && message.hasOwnProperty("maxPlayTimes"))
            object.maxPlayTimes = message.maxPlayTimes;
        if (message.minWinRate != null && message.hasOwnProperty("minWinRate"))
            object.minWinRate = message.minWinRate;
        if (message.maxWinRate != null && message.hasOwnProperty("maxWinRate"))
            object.maxWinRate = message.maxWinRate;
        if (message.tableListMakeFull && message.tableListMakeFull.length) {
            object.tableListMakeFull = [];
            for (var j = 0; j < message.tableListMakeFull.length; ++j)
                object.tableListMakeFull[j] = message.tableListMakeFull[j];
        }
        if (message.tableListActive && message.tableListActive.length) {
            object.tableListActive = [];
            for (var j = 0; j < message.tableListActive.length; ++j)
                object.tableListActive[j] = message.tableListActive[j];
        }
        return object;
    };

    /**
     * Converts this PBConfigRobotList to JSON.
     * @function toJSON
     * @memberof PBConfigRobotList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigRobotList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigRobotList;
})();

$root.PBConfigRobot = (function() {

    /**
     * Properties of a PBConfigRobot.
     * @exports IPBConfigRobot
     * @interface IPBConfigRobot
     * @property {number} [version] PBConfigRobot version
     * @property {Array.<IPBConfigRobotList>} [robotConfLists] PBConfigRobot robotConfLists
     */

    /**
     * Constructs a new PBConfigRobot.
     * @exports PBConfigRobot
     * @classdesc Represents a PBConfigRobot.
     * @constructor
     * @param {IPBConfigRobot=} [properties] Properties to set
     */
    function PBConfigRobot(properties) {
        this.robotConfLists = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigRobot version.
     * @member {number}version
     * @memberof PBConfigRobot
     * @instance
     */
    PBConfigRobot.prototype.version = 0;

    /**
     * PBConfigRobot robotConfLists.
     * @member {Array.<IPBConfigRobotList>}robotConfLists
     * @memberof PBConfigRobot
     * @instance
     */
    PBConfigRobot.prototype.robotConfLists = $util.emptyArray;

    /**
     * Creates a new PBConfigRobot instance using the specified properties.
     * @function create
     * @memberof PBConfigRobot
     * @static
     * @param {IPBConfigRobot=} [properties] Properties to set
     * @returns {PBConfigRobot} PBConfigRobot instance
     */
    PBConfigRobot.create = function create(properties) {
        return new PBConfigRobot(properties);
    };

    /**
     * Encodes the specified PBConfigRobot message. Does not implicitly {@link PBConfigRobot.verify|verify} messages.
     * @function encode
     * @memberof PBConfigRobot
     * @static
     * @param {IPBConfigRobot} message PBConfigRobot message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigRobot.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.version != null && message.hasOwnProperty("version"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
        if (message.robotConfLists != null && message.robotConfLists.length)
            for (var i = 0; i < message.robotConfLists.length; ++i)
                $root.PBConfigRobotList.encode(message.robotConfLists[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PBConfigRobot message, length delimited. Does not implicitly {@link PBConfigRobot.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigRobot
     * @static
     * @param {IPBConfigRobot} message PBConfigRobot message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigRobot.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigRobot message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigRobot
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigRobot} PBConfigRobot
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigRobot.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigRobot();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.version = reader.uint32();
                break;
            case 2:
                if (!(message.robotConfLists && message.robotConfLists.length))
                    message.robotConfLists = [];
                message.robotConfLists.push($root.PBConfigRobotList.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigRobot message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigRobot
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigRobot} PBConfigRobot
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigRobot.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigRobot message.
     * @function verify
     * @memberof PBConfigRobot
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigRobot.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.version != null && message.hasOwnProperty("version"))
            if (!$util.isInteger(message.version))
                return "version: integer expected";
        if (message.robotConfLists != null && message.hasOwnProperty("robotConfLists")) {
            if (!Array.isArray(message.robotConfLists))
                return "robotConfLists: array expected";
            for (var i = 0; i < message.robotConfLists.length; ++i) {
                var error = $root.PBConfigRobotList.verify(message.robotConfLists[i]);
                if (error)
                    return "robotConfLists." + error;
            }
        }
        return null;
    };

    /**
     * Creates a PBConfigRobot message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigRobot
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigRobot} PBConfigRobot
     */
    PBConfigRobot.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigRobot)
            return object;
        var message = new $root.PBConfigRobot();
        if (object.version != null)
            message.version = object.version >>> 0;
        if (object.robotConfLists) {
            if (!Array.isArray(object.robotConfLists))
                throw TypeError(".PBConfigRobot.robotConfLists: array expected");
            message.robotConfLists = [];
            for (var i = 0; i < object.robotConfLists.length; ++i) {
                if (typeof object.robotConfLists[i] !== "object")
                    throw TypeError(".PBConfigRobot.robotConfLists: object expected");
                message.robotConfLists[i] = $root.PBConfigRobotList.fromObject(object.robotConfLists[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a PBConfigRobot message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigRobot
     * @static
     * @param {PBConfigRobot} message PBConfigRobot
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigRobot.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.robotConfLists = [];
        if (options.defaults)
            object.version = 0;
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        if (message.robotConfLists && message.robotConfLists.length) {
            object.robotConfLists = [];
            for (var j = 0; j < message.robotConfLists.length; ++j)
                object.robotConfLists[j] = $root.PBConfigRobotList.toObject(message.robotConfLists[j], options);
        }
        return object;
    };

    /**
     * Converts this PBConfigRobot to JSON.
     * @function toJSON
     * @memberof PBConfigRobot
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigRobot.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigRobot;
})();

$root.PBConfigRandomName = (function() {

    /**
     * Properties of a PBConfigRandomName.
     * @exports IPBConfigRandomName
     * @interface IPBConfigRandomName
     * @property {number} [version] PBConfigRandomName version
     * @property {Array.<string>} [name] PBConfigRandomName name
     */

    /**
     * Constructs a new PBConfigRandomName.
     * @exports PBConfigRandomName
     * @classdesc Represents a PBConfigRandomName.
     * @constructor
     * @param {IPBConfigRandomName=} [properties] Properties to set
     */
    function PBConfigRandomName(properties) {
        this.name = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigRandomName version.
     * @member {number}version
     * @memberof PBConfigRandomName
     * @instance
     */
    PBConfigRandomName.prototype.version = 0;

    /**
     * PBConfigRandomName name.
     * @member {Array.<string>}name
     * @memberof PBConfigRandomName
     * @instance
     */
    PBConfigRandomName.prototype.name = $util.emptyArray;

    /**
     * Creates a new PBConfigRandomName instance using the specified properties.
     * @function create
     * @memberof PBConfigRandomName
     * @static
     * @param {IPBConfigRandomName=} [properties] Properties to set
     * @returns {PBConfigRandomName} PBConfigRandomName instance
     */
    PBConfigRandomName.create = function create(properties) {
        return new PBConfigRandomName(properties);
    };

    /**
     * Encodes the specified PBConfigRandomName message. Does not implicitly {@link PBConfigRandomName.verify|verify} messages.
     * @function encode
     * @memberof PBConfigRandomName
     * @static
     * @param {IPBConfigRandomName} message PBConfigRandomName message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigRandomName.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.version != null && message.hasOwnProperty("version"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
        if (message.name != null && message.name.length)
            for (var i = 0; i < message.name.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name[i]);
        return writer;
    };

    /**
     * Encodes the specified PBConfigRandomName message, length delimited. Does not implicitly {@link PBConfigRandomName.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigRandomName
     * @static
     * @param {IPBConfigRandomName} message PBConfigRandomName message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigRandomName.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigRandomName message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigRandomName
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigRandomName} PBConfigRandomName
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigRandomName.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigRandomName();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.version = reader.uint32();
                break;
            case 2:
                if (!(message.name && message.name.length))
                    message.name = [];
                message.name.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigRandomName message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigRandomName
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigRandomName} PBConfigRandomName
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigRandomName.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigRandomName message.
     * @function verify
     * @memberof PBConfigRandomName
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigRandomName.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.version != null && message.hasOwnProperty("version"))
            if (!$util.isInteger(message.version))
                return "version: integer expected";
        if (message.name != null && message.hasOwnProperty("name")) {
            if (!Array.isArray(message.name))
                return "name: array expected";
            for (var i = 0; i < message.name.length; ++i)
                if (!$util.isString(message.name[i]))
                    return "name: string[] expected";
        }
        return null;
    };

    /**
     * Creates a PBConfigRandomName message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigRandomName
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigRandomName} PBConfigRandomName
     */
    PBConfigRandomName.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigRandomName)
            return object;
        var message = new $root.PBConfigRandomName();
        if (object.version != null)
            message.version = object.version >>> 0;
        if (object.name) {
            if (!Array.isArray(object.name))
                throw TypeError(".PBConfigRandomName.name: array expected");
            message.name = [];
            for (var i = 0; i < object.name.length; ++i)
                message.name[i] = String(object.name[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a PBConfigRandomName message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigRandomName
     * @static
     * @param {PBConfigRandomName} message PBConfigRandomName
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigRandomName.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.name = [];
        if (options.defaults)
            object.version = 0;
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        if (message.name && message.name.length) {
            object.name = [];
            for (var j = 0; j < message.name.length; ++j)
                object.name[j] = message.name[j];
        }
        return object;
    };

    /**
     * Converts this PBConfigRandomName to JSON.
     * @function toJSON
     * @memberof PBConfigRandomName
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigRandomName.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigRandomName;
})();

/**
 * ENSngSignUpFeeType enum.
 * @exports ENSngSignUpFeeType
 * @enum {string}
 * @property {number} EN_SNG_FEE_TYPE_CHIP=0 EN_SNG_FEE_TYPE_CHIP value
 * @property {number} EN_SNG_FEE_TYPE_DIAMOND=1 EN_SNG_FEE_TYPE_DIAMOND value
 * @property {number} EN_SNG_FEE_TYPE_NONE=2 EN_SNG_FEE_TYPE_NONE value
 */
$root.ENSngSignUpFeeType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "EN_SNG_FEE_TYPE_CHIP"] = 0;
    values[valuesById[1] = "EN_SNG_FEE_TYPE_DIAMOND"] = 1;
    values[valuesById[2] = "EN_SNG_FEE_TYPE_NONE"] = 2;
    return values;
})();

$root.PBObjectReward = (function() {

    /**
     * Properties of a PBObjectReward.
     * @exports IPBObjectReward
     * @interface IPBObjectReward
     * @property {number} [objId] PBObjectReward objId
     * @property {number} [objCount] PBObjectReward objCount
     * @property {string} [objName] PBObjectReward objName
     * @property {string} [objId2] PBObjectReward objId2
     * @property {number} [objType] PBObjectReward objType
     * @property {string} [objIcon] PBObjectReward objIcon
     * @property {number} [tempId] PBObjectReward tempId
     * @property {number|Long} [validTime] PBObjectReward validTime
     */

    /**
     * Constructs a new PBObjectReward.
     * @exports PBObjectReward
     * @classdesc Represents a PBObjectReward.
     * @constructor
     * @param {IPBObjectReward=} [properties] Properties to set
     */
    function PBObjectReward(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBObjectReward objId.
     * @member {number}objId
     * @memberof PBObjectReward
     * @instance
     */
    PBObjectReward.prototype.objId = 0;

    /**
     * PBObjectReward objCount.
     * @member {number}objCount
     * @memberof PBObjectReward
     * @instance
     */
    PBObjectReward.prototype.objCount = 0;

    /**
     * PBObjectReward objName.
     * @member {string}objName
     * @memberof PBObjectReward
     * @instance
     */
    PBObjectReward.prototype.objName = "";

    /**
     * PBObjectReward objId2.
     * @member {string}objId2
     * @memberof PBObjectReward
     * @instance
     */
    PBObjectReward.prototype.objId2 = "";

    /**
     * PBObjectReward objType.
     * @member {number}objType
     * @memberof PBObjectReward
     * @instance
     */
    PBObjectReward.prototype.objType = 0;

    /**
     * PBObjectReward objIcon.
     * @member {string}objIcon
     * @memberof PBObjectReward
     * @instance
     */
    PBObjectReward.prototype.objIcon = "";

    /**
     * PBObjectReward tempId.
     * @member {number}tempId
     * @memberof PBObjectReward
     * @instance
     */
    PBObjectReward.prototype.tempId = 0;

    /**
     * PBObjectReward validTime.
     * @member {number|Long}validTime
     * @memberof PBObjectReward
     * @instance
     */
    PBObjectReward.prototype.validTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new PBObjectReward instance using the specified properties.
     * @function create
     * @memberof PBObjectReward
     * @static
     * @param {IPBObjectReward=} [properties] Properties to set
     * @returns {PBObjectReward} PBObjectReward instance
     */
    PBObjectReward.create = function create(properties) {
        return new PBObjectReward(properties);
    };

    /**
     * Encodes the specified PBObjectReward message. Does not implicitly {@link PBObjectReward.verify|verify} messages.
     * @function encode
     * @memberof PBObjectReward
     * @static
     * @param {IPBObjectReward} message PBObjectReward message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBObjectReward.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.objId != null && message.hasOwnProperty("objId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.objId);
        if (message.objName != null && message.hasOwnProperty("objName"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.objName);
        if (message.objCount != null && message.hasOwnProperty("objCount"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.objCount);
        if (message.objId2 != null && message.hasOwnProperty("objId2"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.objId2);
        if (message.objType != null && message.hasOwnProperty("objType"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.objType);
        if (message.objIcon != null && message.hasOwnProperty("objIcon"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.objIcon);
        if (message.tempId != null && message.hasOwnProperty("tempId"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.tempId);
        if (message.validTime != null && message.hasOwnProperty("validTime"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.validTime);
        return writer;
    };

    /**
     * Encodes the specified PBObjectReward message, length delimited. Does not implicitly {@link PBObjectReward.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBObjectReward
     * @static
     * @param {IPBObjectReward} message PBObjectReward message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBObjectReward.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBObjectReward message from the specified reader or buffer.
     * @function decode
     * @memberof PBObjectReward
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBObjectReward} PBObjectReward
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBObjectReward.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBObjectReward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.objId = reader.uint32();
                break;
            case 6:
                message.objCount = reader.uint32();
                break;
            case 4:
                message.objName = reader.string();
                break;
            case 7:
                message.objId2 = reader.string();
                break;
            case 8:
                message.objType = reader.uint32();
                break;
            case 9:
                message.objIcon = reader.string();
                break;
            case 10:
                message.tempId = reader.uint32();
                break;
            case 11:
                message.validTime = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBObjectReward message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBObjectReward
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBObjectReward} PBObjectReward
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBObjectReward.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBObjectReward message.
     * @function verify
     * @memberof PBObjectReward
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBObjectReward.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.objId != null && message.hasOwnProperty("objId"))
            if (!$util.isInteger(message.objId))
                return "objId: integer expected";
        if (message.objCount != null && message.hasOwnProperty("objCount"))
            if (!$util.isInteger(message.objCount))
                return "objCount: integer expected";
        if (message.objName != null && message.hasOwnProperty("objName"))
            if (!$util.isString(message.objName))
                return "objName: string expected";
        if (message.objId2 != null && message.hasOwnProperty("objId2"))
            if (!$util.isString(message.objId2))
                return "objId2: string expected";
        if (message.objType != null && message.hasOwnProperty("objType"))
            if (!$util.isInteger(message.objType))
                return "objType: integer expected";
        if (message.objIcon != null && message.hasOwnProperty("objIcon"))
            if (!$util.isString(message.objIcon))
                return "objIcon: string expected";
        if (message.tempId != null && message.hasOwnProperty("tempId"))
            if (!$util.isInteger(message.tempId))
                return "tempId: integer expected";
        if (message.validTime != null && message.hasOwnProperty("validTime"))
            if (!$util.isInteger(message.validTime) && !(message.validTime && $util.isInteger(message.validTime.low) && $util.isInteger(message.validTime.high)))
                return "validTime: integer|Long expected";
        return null;
    };

    /**
     * Creates a PBObjectReward message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBObjectReward
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBObjectReward} PBObjectReward
     */
    PBObjectReward.fromObject = function fromObject(object) {
        if (object instanceof $root.PBObjectReward)
            return object;
        var message = new $root.PBObjectReward();
        if (object.objId != null)
            message.objId = object.objId >>> 0;
        if (object.objCount != null)
            message.objCount = object.objCount >>> 0;
        if (object.objName != null)
            message.objName = String(object.objName);
        if (object.objId2 != null)
            message.objId2 = String(object.objId2);
        if (object.objType != null)
            message.objType = object.objType >>> 0;
        if (object.objIcon != null)
            message.objIcon = String(object.objIcon);
        if (object.tempId != null)
            message.tempId = object.tempId >>> 0;
        if (object.validTime != null)
            if ($util.Long)
                (message.validTime = $util.Long.fromValue(object.validTime)).unsigned = true;
            else if (typeof object.validTime === "string")
                message.validTime = parseInt(object.validTime, 10);
            else if (typeof object.validTime === "number")
                message.validTime = object.validTime;
            else if (typeof object.validTime === "object")
                message.validTime = new $util.LongBits(object.validTime.low >>> 0, object.validTime.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a PBObjectReward message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBObjectReward
     * @static
     * @param {PBObjectReward} message PBObjectReward
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBObjectReward.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.objId = 0;
            object.objName = "";
            object.objCount = 0;
            object.objId2 = "";
            object.objType = 0;
            object.objIcon = "";
            object.tempId = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.validTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.validTime = options.longs === String ? "0" : 0;
        }
        if (message.objId != null && message.hasOwnProperty("objId"))
            object.objId = message.objId;
        if (message.objName != null && message.hasOwnProperty("objName"))
            object.objName = message.objName;
        if (message.objCount != null && message.hasOwnProperty("objCount"))
            object.objCount = message.objCount;
        if (message.objId2 != null && message.hasOwnProperty("objId2"))
            object.objId2 = message.objId2;
        if (message.objType != null && message.hasOwnProperty("objType"))
            object.objType = message.objType;
        if (message.objIcon != null && message.hasOwnProperty("objIcon"))
            object.objIcon = message.objIcon;
        if (message.tempId != null && message.hasOwnProperty("tempId"))
            object.tempId = message.tempId;
        if (message.validTime != null && message.hasOwnProperty("validTime"))
            if (typeof message.validTime === "number")
                object.validTime = options.longs === String ? String(message.validTime) : message.validTime;
            else
                object.validTime = options.longs === String ? $util.Long.prototype.toString.call(message.validTime) : options.longs === Number ? new $util.LongBits(message.validTime.low >>> 0, message.validTime.high >>> 0).toNumber(true) : message.validTime;
        return object;
    };

    /**
     * Converts this PBObjectReward to JSON.
     * @function toJSON
     * @memberof PBObjectReward
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBObjectReward.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBObjectReward;
})();

$root.PBReward = (function() {

    /**
     * Properties of a PBReward.
     * @exports IPBReward
     * @interface IPBReward
     * @property {number|Long} [chip] PBReward chip
     * @property {number} [diamond] PBReward diamond
     * @property {string} [des] PBReward des
     * @property {Array.<IPBObjectReward>} [objs] PBReward objs
     * @property {number} [masterScore] PBReward masterScore
     */

    /**
     * Constructs a new PBReward.
     * @exports PBReward
     * @classdesc Represents a PBReward.
     * @constructor
     * @param {IPBReward=} [properties] Properties to set
     */
    function PBReward(properties) {
        this.objs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBReward chip.
     * @member {number|Long}chip
     * @memberof PBReward
     * @instance
     */
    PBReward.prototype.chip = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBReward diamond.
     * @member {number}diamond
     * @memberof PBReward
     * @instance
     */
    PBReward.prototype.diamond = 0;

    /**
     * PBReward des.
     * @member {string}des
     * @memberof PBReward
     * @instance
     */
    PBReward.prototype.des = "";

    /**
     * PBReward objs.
     * @member {Array.<IPBObjectReward>}objs
     * @memberof PBReward
     * @instance
     */
    PBReward.prototype.objs = $util.emptyArray;

    /**
     * PBReward masterScore.
     * @member {number}masterScore
     * @memberof PBReward
     * @instance
     */
    PBReward.prototype.masterScore = 0;

    /**
     * Creates a new PBReward instance using the specified properties.
     * @function create
     * @memberof PBReward
     * @static
     * @param {IPBReward=} [properties] Properties to set
     * @returns {PBReward} PBReward instance
     */
    PBReward.create = function create(properties) {
        return new PBReward(properties);
    };

    /**
     * Encodes the specified PBReward message. Does not implicitly {@link PBReward.verify|verify} messages.
     * @function encode
     * @memberof PBReward
     * @static
     * @param {IPBReward} message PBReward message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBReward.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.chip != null && message.hasOwnProperty("chip"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.chip);
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.diamond);
        if (message.des != null && message.hasOwnProperty("des"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.des);
        if (message.objs != null && message.objs.length)
            for (var i = 0; i < message.objs.length; ++i)
                $root.PBObjectReward.encode(message.objs[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.masterScore != null && message.hasOwnProperty("masterScore"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.masterScore);
        return writer;
    };

    /**
     * Encodes the specified PBReward message, length delimited. Does not implicitly {@link PBReward.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBReward
     * @static
     * @param {IPBReward} message PBReward message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBReward.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBReward message from the specified reader or buffer.
     * @function decode
     * @memberof PBReward
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBReward} PBReward
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBReward.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBReward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.chip = reader.uint64();
                break;
            case 2:
                message.diamond = reader.uint32();
                break;
            case 3:
                message.des = reader.string();
                break;
            case 4:
                if (!(message.objs && message.objs.length))
                    message.objs = [];
                message.objs.push($root.PBObjectReward.decode(reader, reader.uint32()));
                break;
            case 5:
                message.masterScore = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBReward message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBReward
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBReward} PBReward
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBReward.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBReward message.
     * @function verify
     * @memberof PBReward
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBReward.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (!$util.isInteger(message.chip) && !(message.chip && $util.isInteger(message.chip.low) && $util.isInteger(message.chip.high)))
                return "chip: integer|Long expected";
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            if (!$util.isInteger(message.diamond))
                return "diamond: integer expected";
        if (message.des != null && message.hasOwnProperty("des"))
            if (!$util.isString(message.des))
                return "des: string expected";
        if (message.objs != null && message.hasOwnProperty("objs")) {
            if (!Array.isArray(message.objs))
                return "objs: array expected";
            for (var i = 0; i < message.objs.length; ++i) {
                var error = $root.PBObjectReward.verify(message.objs[i]);
                if (error)
                    return "objs." + error;
            }
        }
        if (message.masterScore != null && message.hasOwnProperty("masterScore"))
            if (!$util.isInteger(message.masterScore))
                return "masterScore: integer expected";
        return null;
    };

    /**
     * Creates a PBReward message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBReward
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBReward} PBReward
     */
    PBReward.fromObject = function fromObject(object) {
        if (object instanceof $root.PBReward)
            return object;
        var message = new $root.PBReward();
        if (object.chip != null)
            if ($util.Long)
                (message.chip = $util.Long.fromValue(object.chip)).unsigned = true;
            else if (typeof object.chip === "string")
                message.chip = parseInt(object.chip, 10);
            else if (typeof object.chip === "number")
                message.chip = object.chip;
            else if (typeof object.chip === "object")
                message.chip = new $util.LongBits(object.chip.low >>> 0, object.chip.high >>> 0).toNumber(true);
        if (object.diamond != null)
            message.diamond = object.diamond >>> 0;
        if (object.des != null)
            message.des = String(object.des);
        if (object.objs) {
            if (!Array.isArray(object.objs))
                throw TypeError(".PBReward.objs: array expected");
            message.objs = [];
            for (var i = 0; i < object.objs.length; ++i) {
                if (typeof object.objs[i] !== "object")
                    throw TypeError(".PBReward.objs: object expected");
                message.objs[i] = $root.PBObjectReward.fromObject(object.objs[i]);
            }
        }
        if (object.masterScore != null)
            message.masterScore = object.masterScore >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a PBReward message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBReward
     * @static
     * @param {PBReward} message PBReward
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBReward.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.objs = [];
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.chip = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.chip = options.longs === String ? "0" : 0;
            object.diamond = 0;
            object.des = "";
            object.masterScore = 0;
        }
        if (message.chip != null && message.hasOwnProperty("chip"))
            if (typeof message.chip === "number")
                object.chip = options.longs === String ? String(message.chip) : message.chip;
            else
                object.chip = options.longs === String ? $util.Long.prototype.toString.call(message.chip) : options.longs === Number ? new $util.LongBits(message.chip.low >>> 0, message.chip.high >>> 0).toNumber(true) : message.chip;
        if (message.diamond != null && message.hasOwnProperty("diamond"))
            object.diamond = message.diamond;
        if (message.des != null && message.hasOwnProperty("des"))
            object.des = message.des;
        if (message.objs && message.objs.length) {
            object.objs = [];
            for (var j = 0; j < message.objs.length; ++j)
                object.objs[j] = $root.PBObjectReward.toObject(message.objs[j], options);
        }
        if (message.masterScore != null && message.hasOwnProperty("masterScore"))
            object.masterScore = message.masterScore;
        return object;
    };

    /**
     * Converts this PBReward to JSON.
     * @function toJSON
     * @memberof PBReward
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBReward.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBReward;
})();

$root.PBSngTableItem = (function() {

    /**
     * Properties of a PBSngTableItem.
     * @exports IPBSngTableItem
     * @interface IPBSngTableItem
     * @property {number} [tableId] PBSngTableItem tableId
     * @property {string} [name] PBSngTableItem name
     * @property {number} [minPlayer] PBSngTableItem minPlayer
     * @property {number} [maxPlayer] PBSngTableItem maxPlayer
     * @property {number|Long} [buyIn] PBSngTableItem buyIn
     * @property {number} [createTime] PBSngTableItem createTime
     * @property {number} [showTime] PBSngTableItem showTime
     * @property {Array.<IPBReward>} [rewards] PBSngTableItem rewards
     * @property {number} [raiseBlindIndex] PBSngTableItem raiseBlindIndex
     * @property {number} [raiseBlindTime] PBSngTableItem raiseBlindTime
     * @property {number|Long} [signUpFee] PBSngTableItem signUpFee
     * @property {string} [iconUrl] PBSngTableItem iconUrl
     * @property {number|Long} [serviceFee] PBSngTableItem serviceFee
     * @property {ENSngSignUpFeeType} [signUpFeeType] PBSngTableItem signUpFeeType
     * @property {ENSngSignUpFeeType} [serviceFeeType] PBSngTableItem serviceFeeType
     * @property {number} [tempId] PBSngTableItem tempId
     * @property {ENTableSubType} [subTableType] PBSngTableItem subTableType
     * @property {Array.<number>} [orderUserIds] PBSngTableItem orderUserIds
     * @property {boolean} [needNoticeStart] PBSngTableItem needNoticeStart
     */

    /**
     * Constructs a new PBSngTableItem.
     * @exports PBSngTableItem
     * @classdesc Represents a PBSngTableItem.
     * @constructor
     * @param {IPBSngTableItem=} [properties] Properties to set
     */
    function PBSngTableItem(properties) {
        this.rewards = [];
        this.orderUserIds = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBSngTableItem tableId.
     * @member {number}tableId
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.tableId = 0;

    /**
     * PBSngTableItem name.
     * @member {string}name
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.name = "";

    /**
     * PBSngTableItem minPlayer.
     * @member {number}minPlayer
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.minPlayer = 0;

    /**
     * PBSngTableItem maxPlayer.
     * @member {number}maxPlayer
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.maxPlayer = 0;

    /**
     * PBSngTableItem buyIn.
     * @member {number|Long}buyIn
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.buyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBSngTableItem createTime.
     * @member {number}createTime
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.createTime = 0;

    /**
     * PBSngTableItem showTime.
     * @member {number}showTime
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.showTime = 0;

    /**
     * PBSngTableItem rewards.
     * @member {Array.<IPBReward>}rewards
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.rewards = $util.emptyArray;

    /**
     * PBSngTableItem raiseBlindIndex.
     * @member {number}raiseBlindIndex
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.raiseBlindIndex = 0;

    /**
     * PBSngTableItem raiseBlindTime.
     * @member {number}raiseBlindTime
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.raiseBlindTime = 0;

    /**
     * PBSngTableItem signUpFee.
     * @member {number|Long}signUpFee
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.signUpFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBSngTableItem iconUrl.
     * @member {string}iconUrl
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.iconUrl = "";

    /**
     * PBSngTableItem serviceFee.
     * @member {number|Long}serviceFee
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.serviceFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBSngTableItem signUpFeeType.
     * @member {ENSngSignUpFeeType}signUpFeeType
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.signUpFeeType = 0;

    /**
     * PBSngTableItem serviceFeeType.
     * @member {ENSngSignUpFeeType}serviceFeeType
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.serviceFeeType = 0;

    /**
     * PBSngTableItem tempId.
     * @member {number}tempId
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.tempId = 0;

    /**
     * PBSngTableItem subTableType.
     * @member {ENTableSubType}subTableType
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.subTableType = 0;

    /**
     * PBSngTableItem orderUserIds.
     * @member {Array.<number>}orderUserIds
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.orderUserIds = $util.emptyArray;

    /**
     * PBSngTableItem needNoticeStart.
     * @member {boolean}needNoticeStart
     * @memberof PBSngTableItem
     * @instance
     */
    PBSngTableItem.prototype.needNoticeStart = false;

    /**
     * Creates a new PBSngTableItem instance using the specified properties.
     * @function create
     * @memberof PBSngTableItem
     * @static
     * @param {IPBSngTableItem=} [properties] Properties to set
     * @returns {PBSngTableItem} PBSngTableItem instance
     */
    PBSngTableItem.create = function create(properties) {
        return new PBSngTableItem(properties);
    };

    /**
     * Encodes the specified PBSngTableItem message. Does not implicitly {@link PBSngTableItem.verify|verify} messages.
     * @function encode
     * @memberof PBSngTableItem
     * @static
     * @param {IPBSngTableItem} message PBSngTableItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBSngTableItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tableId);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.minPlayer);
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.maxPlayer);
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.buyIn);
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.createTime);
        if (message.showTime != null && message.hasOwnProperty("showTime"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.showTime);
        if (message.rewards != null && message.rewards.length)
            for (var i = 0; i < message.rewards.length; ++i)
                $root.PBReward.encode(message.rewards[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.raiseBlindIndex != null && message.hasOwnProperty("raiseBlindIndex"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.raiseBlindIndex);
        if (message.raiseBlindTime != null && message.hasOwnProperty("raiseBlindTime"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.raiseBlindTime);
        if (message.signUpFee != null && message.hasOwnProperty("signUpFee"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.signUpFee);
        if (message.iconUrl != null && message.hasOwnProperty("iconUrl"))
            writer.uint32(/* id 12, wireType 2 =*/98).string(message.iconUrl);
        if (message.serviceFee != null && message.hasOwnProperty("serviceFee"))
            writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.serviceFee);
        if (message.signUpFeeType != null && message.hasOwnProperty("signUpFeeType"))
            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.signUpFeeType);
        if (message.serviceFeeType != null && message.hasOwnProperty("serviceFeeType"))
            writer.uint32(/* id 15, wireType 0 =*/120).int32(message.serviceFeeType);
        if (message.tempId != null && message.hasOwnProperty("tempId"))
            writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.tempId);
        if (message.subTableType != null && message.hasOwnProperty("subTableType"))
            writer.uint32(/* id 17, wireType 0 =*/136).int32(message.subTableType);
        if (message.orderUserIds != null && message.orderUserIds.length)
            for (var i = 0; i < message.orderUserIds.length; ++i)
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.orderUserIds[i]);
        if (message.needNoticeStart != null && message.hasOwnProperty("needNoticeStart"))
            writer.uint32(/* id 19, wireType 0 =*/152).bool(message.needNoticeStart);
        return writer;
    };

    /**
     * Encodes the specified PBSngTableItem message, length delimited. Does not implicitly {@link PBSngTableItem.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBSngTableItem
     * @static
     * @param {IPBSngTableItem} message PBSngTableItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBSngTableItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBSngTableItem message from the specified reader or buffer.
     * @function decode
     * @memberof PBSngTableItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBSngTableItem} PBSngTableItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBSngTableItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBSngTableItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.tableId = reader.uint32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.minPlayer = reader.uint32();
                break;
            case 4:
                message.maxPlayer = reader.uint32();
                break;
            case 5:
                message.buyIn = reader.uint64();
                break;
            case 6:
                message.createTime = reader.uint32();
                break;
            case 7:
                message.showTime = reader.uint32();
                break;
            case 8:
                if (!(message.rewards && message.rewards.length))
                    message.rewards = [];
                message.rewards.push($root.PBReward.decode(reader, reader.uint32()));
                break;
            case 9:
                message.raiseBlindIndex = reader.uint32();
                break;
            case 10:
                message.raiseBlindTime = reader.uint32();
                break;
            case 11:
                message.signUpFee = reader.uint64();
                break;
            case 12:
                message.iconUrl = reader.string();
                break;
            case 13:
                message.serviceFee = reader.uint64();
                break;
            case 14:
                message.signUpFeeType = reader.int32();
                break;
            case 15:
                message.serviceFeeType = reader.int32();
                break;
            case 16:
                message.tempId = reader.uint32();
                break;
            case 17:
                message.subTableType = reader.int32();
                break;
            case 18:
                if (!(message.orderUserIds && message.orderUserIds.length))
                    message.orderUserIds = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.orderUserIds.push(reader.uint32());
                } else
                    message.orderUserIds.push(reader.uint32());
                break;
            case 19:
                message.needNoticeStart = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBSngTableItem message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBSngTableItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBSngTableItem} PBSngTableItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBSngTableItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBSngTableItem message.
     * @function verify
     * @memberof PBSngTableItem
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBSngTableItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            if (!$util.isInteger(message.tableId))
                return "tableId: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            if (!$util.isInteger(message.minPlayer))
                return "minPlayer: integer expected";
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            if (!$util.isInteger(message.maxPlayer))
                return "maxPlayer: integer expected";
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            if (!$util.isInteger(message.buyIn) && !(message.buyIn && $util.isInteger(message.buyIn.low) && $util.isInteger(message.buyIn.high)))
                return "buyIn: integer|Long expected";
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            if (!$util.isInteger(message.createTime))
                return "createTime: integer expected";
        if (message.showTime != null && message.hasOwnProperty("showTime"))
            if (!$util.isInteger(message.showTime))
                return "showTime: integer expected";
        if (message.rewards != null && message.hasOwnProperty("rewards")) {
            if (!Array.isArray(message.rewards))
                return "rewards: array expected";
            for (var i = 0; i < message.rewards.length; ++i) {
                var error = $root.PBReward.verify(message.rewards[i]);
                if (error)
                    return "rewards." + error;
            }
        }
        if (message.raiseBlindIndex != null && message.hasOwnProperty("raiseBlindIndex"))
            if (!$util.isInteger(message.raiseBlindIndex))
                return "raiseBlindIndex: integer expected";
        if (message.raiseBlindTime != null && message.hasOwnProperty("raiseBlindTime"))
            if (!$util.isInteger(message.raiseBlindTime))
                return "raiseBlindTime: integer expected";
        if (message.signUpFee != null && message.hasOwnProperty("signUpFee"))
            if (!$util.isInteger(message.signUpFee) && !(message.signUpFee && $util.isInteger(message.signUpFee.low) && $util.isInteger(message.signUpFee.high)))
                return "signUpFee: integer|Long expected";
        if (message.iconUrl != null && message.hasOwnProperty("iconUrl"))
            if (!$util.isString(message.iconUrl))
                return "iconUrl: string expected";
        if (message.serviceFee != null && message.hasOwnProperty("serviceFee"))
            if (!$util.isInteger(message.serviceFee) && !(message.serviceFee && $util.isInteger(message.serviceFee.low) && $util.isInteger(message.serviceFee.high)))
                return "serviceFee: integer|Long expected";
        if (message.signUpFeeType != null && message.hasOwnProperty("signUpFeeType"))
            switch (message.signUpFeeType) {
            default:
                return "signUpFeeType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.serviceFeeType != null && message.hasOwnProperty("serviceFeeType"))
            switch (message.serviceFeeType) {
            default:
                return "serviceFeeType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.tempId != null && message.hasOwnProperty("tempId"))
            if (!$util.isInteger(message.tempId))
                return "tempId: integer expected";
        if (message.subTableType != null && message.hasOwnProperty("subTableType"))
            switch (message.subTableType) {
            default:
                return "subTableType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 4:
                break;
            }
        if (message.orderUserIds != null && message.hasOwnProperty("orderUserIds")) {
            if (!Array.isArray(message.orderUserIds))
                return "orderUserIds: array expected";
            for (var i = 0; i < message.orderUserIds.length; ++i)
                if (!$util.isInteger(message.orderUserIds[i]))
                    return "orderUserIds: integer[] expected";
        }
        if (message.needNoticeStart != null && message.hasOwnProperty("needNoticeStart"))
            if (typeof message.needNoticeStart !== "boolean")
                return "needNoticeStart: boolean expected";
        return null;
    };

    /**
     * Creates a PBSngTableItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBSngTableItem
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBSngTableItem} PBSngTableItem
     */
    PBSngTableItem.fromObject = function fromObject(object) {
        if (object instanceof $root.PBSngTableItem)
            return object;
        var message = new $root.PBSngTableItem();
        if (object.tableId != null)
            message.tableId = object.tableId >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.minPlayer != null)
            message.minPlayer = object.minPlayer >>> 0;
        if (object.maxPlayer != null)
            message.maxPlayer = object.maxPlayer >>> 0;
        if (object.buyIn != null)
            if ($util.Long)
                (message.buyIn = $util.Long.fromValue(object.buyIn)).unsigned = true;
            else if (typeof object.buyIn === "string")
                message.buyIn = parseInt(object.buyIn, 10);
            else if (typeof object.buyIn === "number")
                message.buyIn = object.buyIn;
            else if (typeof object.buyIn === "object")
                message.buyIn = new $util.LongBits(object.buyIn.low >>> 0, object.buyIn.high >>> 0).toNumber(true);
        if (object.createTime != null)
            message.createTime = object.createTime >>> 0;
        if (object.showTime != null)
            message.showTime = object.showTime >>> 0;
        if (object.rewards) {
            if (!Array.isArray(object.rewards))
                throw TypeError(".PBSngTableItem.rewards: array expected");
            message.rewards = [];
            for (var i = 0; i < object.rewards.length; ++i) {
                if (typeof object.rewards[i] !== "object")
                    throw TypeError(".PBSngTableItem.rewards: object expected");
                message.rewards[i] = $root.PBReward.fromObject(object.rewards[i]);
            }
        }
        if (object.raiseBlindIndex != null)
            message.raiseBlindIndex = object.raiseBlindIndex >>> 0;
        if (object.raiseBlindTime != null)
            message.raiseBlindTime = object.raiseBlindTime >>> 0;
        if (object.signUpFee != null)
            if ($util.Long)
                (message.signUpFee = $util.Long.fromValue(object.signUpFee)).unsigned = true;
            else if (typeof object.signUpFee === "string")
                message.signUpFee = parseInt(object.signUpFee, 10);
            else if (typeof object.signUpFee === "number")
                message.signUpFee = object.signUpFee;
            else if (typeof object.signUpFee === "object")
                message.signUpFee = new $util.LongBits(object.signUpFee.low >>> 0, object.signUpFee.high >>> 0).toNumber(true);
        if (object.iconUrl != null)
            message.iconUrl = String(object.iconUrl);
        if (object.serviceFee != null)
            if ($util.Long)
                (message.serviceFee = $util.Long.fromValue(object.serviceFee)).unsigned = true;
            else if (typeof object.serviceFee === "string")
                message.serviceFee = parseInt(object.serviceFee, 10);
            else if (typeof object.serviceFee === "number")
                message.serviceFee = object.serviceFee;
            else if (typeof object.serviceFee === "object")
                message.serviceFee = new $util.LongBits(object.serviceFee.low >>> 0, object.serviceFee.high >>> 0).toNumber(true);
        switch (object.signUpFeeType) {
        case "EN_SNG_FEE_TYPE_CHIP":
        case 0:
            message.signUpFeeType = 0;
            break;
        case "EN_SNG_FEE_TYPE_DIAMOND":
        case 1:
            message.signUpFeeType = 1;
            break;
        case "EN_SNG_FEE_TYPE_NONE":
        case 2:
            message.signUpFeeType = 2;
            break;
        }
        switch (object.serviceFeeType) {
        case "EN_SNG_FEE_TYPE_CHIP":
        case 0:
            message.serviceFeeType = 0;
            break;
        case "EN_SNG_FEE_TYPE_DIAMOND":
        case 1:
            message.serviceFeeType = 1;
            break;
        case "EN_SNG_FEE_TYPE_NONE":
        case 2:
            message.serviceFeeType = 2;
            break;
        }
        if (object.tempId != null)
            message.tempId = object.tempId >>> 0;
        switch (object.subTableType) {
        case "EN_TABLE_SUB_TYPE_UNKNOWN":
        case 0:
            message.subTableType = 0;
            break;
        case "EN_TABLE_SUB_TYPE_RECOMMEND":
        case 1:
            message.subTableType = 1;
            break;
        case "EN_TABLE_SUB_TYPE_GOLDEN":
        case 2:
            message.subTableType = 2;
            break;
        case "EN_TABLE_SUB_TYPE_FRAGMENT":
        case 4:
            message.subTableType = 4;
            break;
        }
        if (object.orderUserIds) {
            if (!Array.isArray(object.orderUserIds))
                throw TypeError(".PBSngTableItem.orderUserIds: array expected");
            message.orderUserIds = [];
            for (var i = 0; i < object.orderUserIds.length; ++i)
                message.orderUserIds[i] = object.orderUserIds[i] >>> 0;
        }
        if (object.needNoticeStart != null)
            message.needNoticeStart = Boolean(object.needNoticeStart);
        return message;
    };

    /**
     * Creates a plain object from a PBSngTableItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBSngTableItem
     * @static
     * @param {PBSngTableItem} message PBSngTableItem
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBSngTableItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.rewards = [];
            object.orderUserIds = [];
        }
        if (options.defaults) {
            object.tableId = 0;
            object.name = "";
            object.minPlayer = 0;
            object.maxPlayer = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.buyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.buyIn = options.longs === String ? "0" : 0;
            object.createTime = 0;
            object.showTime = 0;
            object.raiseBlindIndex = 0;
            object.raiseBlindTime = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.signUpFee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.signUpFee = options.longs === String ? "0" : 0;
            object.iconUrl = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.serviceFee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.serviceFee = options.longs === String ? "0" : 0;
            object.signUpFeeType = options.enums === String ? "EN_SNG_FEE_TYPE_CHIP" : 0;
            object.serviceFeeType = options.enums === String ? "EN_SNG_FEE_TYPE_CHIP" : 0;
            object.tempId = 0;
            object.subTableType = options.enums === String ? "EN_TABLE_SUB_TYPE_UNKNOWN" : 0;
            object.needNoticeStart = false;
        }
        if (message.tableId != null && message.hasOwnProperty("tableId"))
            object.tableId = message.tableId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            object.minPlayer = message.minPlayer;
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            object.maxPlayer = message.maxPlayer;
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            if (typeof message.buyIn === "number")
                object.buyIn = options.longs === String ? String(message.buyIn) : message.buyIn;
            else
                object.buyIn = options.longs === String ? $util.Long.prototype.toString.call(message.buyIn) : options.longs === Number ? new $util.LongBits(message.buyIn.low >>> 0, message.buyIn.high >>> 0).toNumber(true) : message.buyIn;
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            object.createTime = message.createTime;
        if (message.showTime != null && message.hasOwnProperty("showTime"))
            object.showTime = message.showTime;
        if (message.rewards && message.rewards.length) {
            object.rewards = [];
            for (var j = 0; j < message.rewards.length; ++j)
                object.rewards[j] = $root.PBReward.toObject(message.rewards[j], options);
        }
        if (message.raiseBlindIndex != null && message.hasOwnProperty("raiseBlindIndex"))
            object.raiseBlindIndex = message.raiseBlindIndex;
        if (message.raiseBlindTime != null && message.hasOwnProperty("raiseBlindTime"))
            object.raiseBlindTime = message.raiseBlindTime;
        if (message.signUpFee != null && message.hasOwnProperty("signUpFee"))
            if (typeof message.signUpFee === "number")
                object.signUpFee = options.longs === String ? String(message.signUpFee) : message.signUpFee;
            else
                object.signUpFee = options.longs === String ? $util.Long.prototype.toString.call(message.signUpFee) : options.longs === Number ? new $util.LongBits(message.signUpFee.low >>> 0, message.signUpFee.high >>> 0).toNumber(true) : message.signUpFee;
        if (message.iconUrl != null && message.hasOwnProperty("iconUrl"))
            object.iconUrl = message.iconUrl;
        if (message.serviceFee != null && message.hasOwnProperty("serviceFee"))
            if (typeof message.serviceFee === "number")
                object.serviceFee = options.longs === String ? String(message.serviceFee) : message.serviceFee;
            else
                object.serviceFee = options.longs === String ? $util.Long.prototype.toString.call(message.serviceFee) : options.longs === Number ? new $util.LongBits(message.serviceFee.low >>> 0, message.serviceFee.high >>> 0).toNumber(true) : message.serviceFee;
        if (message.signUpFeeType != null && message.hasOwnProperty("signUpFeeType"))
            object.signUpFeeType = options.enums === String ? $root.ENSngSignUpFeeType[message.signUpFeeType] : message.signUpFeeType;
        if (message.serviceFeeType != null && message.hasOwnProperty("serviceFeeType"))
            object.serviceFeeType = options.enums === String ? $root.ENSngSignUpFeeType[message.serviceFeeType] : message.serviceFeeType;
        if (message.tempId != null && message.hasOwnProperty("tempId"))
            object.tempId = message.tempId;
        if (message.subTableType != null && message.hasOwnProperty("subTableType"))
            object.subTableType = options.enums === String ? $root.ENTableSubType[message.subTableType] : message.subTableType;
        if (message.orderUserIds && message.orderUserIds.length) {
            object.orderUserIds = [];
            for (var j = 0; j < message.orderUserIds.length; ++j)
                object.orderUserIds[j] = message.orderUserIds[j];
        }
        if (message.needNoticeStart != null && message.hasOwnProperty("needNoticeStart"))
            object.needNoticeStart = message.needNoticeStart;
        return object;
    };

    /**
     * Converts this PBSngTableItem to JSON.
     * @function toJSON
     * @memberof PBSngTableItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBSngTableItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBSngTableItem;
})();

$root.PBConfigSng = (function() {

    /**
     * Properties of a PBConfigSng.
     * @exports IPBConfigSng
     * @interface IPBConfigSng
     * @property {Array.<IPBSngTableItem>} [tables] PBConfigSng tables
     */

    /**
     * Constructs a new PBConfigSng.
     * @exports PBConfigSng
     * @classdesc Represents a PBConfigSng.
     * @constructor
     * @param {IPBConfigSng=} [properties] Properties to set
     */
    function PBConfigSng(properties) {
        this.tables = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigSng tables.
     * @member {Array.<IPBSngTableItem>}tables
     * @memberof PBConfigSng
     * @instance
     */
    PBConfigSng.prototype.tables = $util.emptyArray;

    /**
     * Creates a new PBConfigSng instance using the specified properties.
     * @function create
     * @memberof PBConfigSng
     * @static
     * @param {IPBConfigSng=} [properties] Properties to set
     * @returns {PBConfigSng} PBConfigSng instance
     */
    PBConfigSng.create = function create(properties) {
        return new PBConfigSng(properties);
    };

    /**
     * Encodes the specified PBConfigSng message. Does not implicitly {@link PBConfigSng.verify|verify} messages.
     * @function encode
     * @memberof PBConfigSng
     * @static
     * @param {IPBConfigSng} message PBConfigSng message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigSng.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tables != null && message.tables.length)
            for (var i = 0; i < message.tables.length; ++i)
                $root.PBSngTableItem.encode(message.tables[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PBConfigSng message, length delimited. Does not implicitly {@link PBConfigSng.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigSng
     * @static
     * @param {IPBConfigSng} message PBConfigSng message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigSng.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigSng message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigSng
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigSng} PBConfigSng
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigSng.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigSng();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.tables && message.tables.length))
                    message.tables = [];
                message.tables.push($root.PBSngTableItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigSng message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigSng
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigSng} PBConfigSng
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigSng.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigSng message.
     * @function verify
     * @memberof PBConfigSng
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigSng.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tables != null && message.hasOwnProperty("tables")) {
            if (!Array.isArray(message.tables))
                return "tables: array expected";
            for (var i = 0; i < message.tables.length; ++i) {
                var error = $root.PBSngTableItem.verify(message.tables[i]);
                if (error)
                    return "tables." + error;
            }
        }
        return null;
    };

    /**
     * Creates a PBConfigSng message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigSng
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigSng} PBConfigSng
     */
    PBConfigSng.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigSng)
            return object;
        var message = new $root.PBConfigSng();
        if (object.tables) {
            if (!Array.isArray(object.tables))
                throw TypeError(".PBConfigSng.tables: array expected");
            message.tables = [];
            for (var i = 0; i < object.tables.length; ++i) {
                if (typeof object.tables[i] !== "object")
                    throw TypeError(".PBConfigSng.tables: object expected");
                message.tables[i] = $root.PBSngTableItem.fromObject(object.tables[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a PBConfigSng message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigSng
     * @static
     * @param {PBConfigSng} message PBConfigSng
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigSng.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.tables = [];
        if (message.tables && message.tables.length) {
            object.tables = [];
            for (var j = 0; j < message.tables.length; ++j)
                object.tables[j] = $root.PBSngTableItem.toObject(message.tables[j], options);
        }
        return object;
    };

    /**
     * Converts this PBConfigSng to JSON.
     * @function toJSON
     * @memberof PBConfigSng
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigSng.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigSng;
})();

$root.PBTrainingTableItem = (function() {

    /**
     * Properties of a PBTrainingTableItem.
     * @exports IPBTrainingTableItem
     * @interface IPBTrainingTableItem
     * @property {ENTrainingTableLevel} [tableLevel] PBTrainingTableItem tableLevel
     * @property {number} [minPlayer] PBTrainingTableItem minPlayer
     * @property {number} [maxPlayer] PBTrainingTableItem maxPlayer
     * @property {number|Long} [smallBlind] PBTrainingTableItem smallBlind
     * @property {number|Long} [bigBlind] PBTrainingTableItem bigBlind
     * @property {number|Long} [minBuyIn] PBTrainingTableItem minBuyIn
     * @property {number|Long} [maxBuyIn] PBTrainingTableItem maxBuyIn
     * @property {number|Long} [fee] PBTrainingTableItem fee
     * @property {number} [masterRewardValue] PBTrainingTableItem masterRewardValue
     * @property {number} [masterRewardDuring] PBTrainingTableItem masterRewardDuring
     * @property {string} [name] PBTrainingTableItem name
     * @property {number|Long} [maxChip] PBTrainingTableItem maxChip
     */

    /**
     * Constructs a new PBTrainingTableItem.
     * @exports PBTrainingTableItem
     * @classdesc Represents a PBTrainingTableItem.
     * @constructor
     * @param {IPBTrainingTableItem=} [properties] Properties to set
     */
    function PBTrainingTableItem(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBTrainingTableItem tableLevel.
     * @member {ENTrainingTableLevel}tableLevel
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.tableLevel = 0;

    /**
     * PBTrainingTableItem minPlayer.
     * @member {number}minPlayer
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.minPlayer = 2;

    /**
     * PBTrainingTableItem maxPlayer.
     * @member {number}maxPlayer
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.maxPlayer = 6;

    /**
     * PBTrainingTableItem smallBlind.
     * @member {number|Long}smallBlind
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.smallBlind = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBTrainingTableItem bigBlind.
     * @member {number|Long}bigBlind
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.bigBlind = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBTrainingTableItem minBuyIn.
     * @member {number|Long}minBuyIn
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.minBuyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBTrainingTableItem maxBuyIn.
     * @member {number|Long}maxBuyIn
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.maxBuyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBTrainingTableItem fee.
     * @member {number|Long}fee
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.fee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBTrainingTableItem masterRewardValue.
     * @member {number}masterRewardValue
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.masterRewardValue = 0;

    /**
     * PBTrainingTableItem masterRewardDuring.
     * @member {number}masterRewardDuring
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.masterRewardDuring = 0;

    /**
     * PBTrainingTableItem name.
     * @member {string}name
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.name = "";

    /**
     * PBTrainingTableItem maxChip.
     * @member {number|Long}maxChip
     * @memberof PBTrainingTableItem
     * @instance
     */
    PBTrainingTableItem.prototype.maxChip = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new PBTrainingTableItem instance using the specified properties.
     * @function create
     * @memberof PBTrainingTableItem
     * @static
     * @param {IPBTrainingTableItem=} [properties] Properties to set
     * @returns {PBTrainingTableItem} PBTrainingTableItem instance
     */
    PBTrainingTableItem.create = function create(properties) {
        return new PBTrainingTableItem(properties);
    };

    /**
     * Encodes the specified PBTrainingTableItem message. Does not implicitly {@link PBTrainingTableItem.verify|verify} messages.
     * @function encode
     * @memberof PBTrainingTableItem
     * @static
     * @param {IPBTrainingTableItem} message PBTrainingTableItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBTrainingTableItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tableLevel != null && message.hasOwnProperty("tableLevel"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.tableLevel);
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.minPlayer);
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.maxPlayer);
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.smallBlind);
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.bigBlind);
        if (message.minBuyIn != null && message.hasOwnProperty("minBuyIn"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.minBuyIn);
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.maxBuyIn);
        if (message.fee != null && message.hasOwnProperty("fee"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.fee);
        if (message.masterRewardValue != null && message.hasOwnProperty("masterRewardValue"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.masterRewardValue);
        if (message.masterRewardDuring != null && message.hasOwnProperty("masterRewardDuring"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.masterRewardDuring);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 11, wireType 2 =*/90).string(message.name);
        if (message.maxChip != null && message.hasOwnProperty("maxChip"))
            writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.maxChip);
        return writer;
    };

    /**
     * Encodes the specified PBTrainingTableItem message, length delimited. Does not implicitly {@link PBTrainingTableItem.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBTrainingTableItem
     * @static
     * @param {IPBTrainingTableItem} message PBTrainingTableItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBTrainingTableItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBTrainingTableItem message from the specified reader or buffer.
     * @function decode
     * @memberof PBTrainingTableItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBTrainingTableItem} PBTrainingTableItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBTrainingTableItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBTrainingTableItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.tableLevel = reader.int32();
                break;
            case 2:
                message.minPlayer = reader.uint32();
                break;
            case 3:
                message.maxPlayer = reader.uint32();
                break;
            case 4:
                message.smallBlind = reader.uint64();
                break;
            case 5:
                message.bigBlind = reader.uint64();
                break;
            case 6:
                message.minBuyIn = reader.uint64();
                break;
            case 7:
                message.maxBuyIn = reader.uint64();
                break;
            case 8:
                message.fee = reader.uint64();
                break;
            case 9:
                message.masterRewardValue = reader.uint32();
                break;
            case 10:
                message.masterRewardDuring = reader.uint32();
                break;
            case 11:
                message.name = reader.string();
                break;
            case 12:
                message.maxChip = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBTrainingTableItem message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBTrainingTableItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBTrainingTableItem} PBTrainingTableItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBTrainingTableItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBTrainingTableItem message.
     * @function verify
     * @memberof PBTrainingTableItem
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBTrainingTableItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tableLevel != null && message.hasOwnProperty("tableLevel"))
            switch (message.tableLevel) {
            default:
                return "tableLevel: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            if (!$util.isInteger(message.minPlayer))
                return "minPlayer: integer expected";
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            if (!$util.isInteger(message.maxPlayer))
                return "maxPlayer: integer expected";
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            if (!$util.isInteger(message.smallBlind) && !(message.smallBlind && $util.isInteger(message.smallBlind.low) && $util.isInteger(message.smallBlind.high)))
                return "smallBlind: integer|Long expected";
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            if (!$util.isInteger(message.bigBlind) && !(message.bigBlind && $util.isInteger(message.bigBlind.low) && $util.isInteger(message.bigBlind.high)))
                return "bigBlind: integer|Long expected";
        if (message.minBuyIn != null && message.hasOwnProperty("minBuyIn"))
            if (!$util.isInteger(message.minBuyIn) && !(message.minBuyIn && $util.isInteger(message.minBuyIn.low) && $util.isInteger(message.minBuyIn.high)))
                return "minBuyIn: integer|Long expected";
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            if (!$util.isInteger(message.maxBuyIn) && !(message.maxBuyIn && $util.isInteger(message.maxBuyIn.low) && $util.isInteger(message.maxBuyIn.high)))
                return "maxBuyIn: integer|Long expected";
        if (message.fee != null && message.hasOwnProperty("fee"))
            if (!$util.isInteger(message.fee) && !(message.fee && $util.isInteger(message.fee.low) && $util.isInteger(message.fee.high)))
                return "fee: integer|Long expected";
        if (message.masterRewardValue != null && message.hasOwnProperty("masterRewardValue"))
            if (!$util.isInteger(message.masterRewardValue))
                return "masterRewardValue: integer expected";
        if (message.masterRewardDuring != null && message.hasOwnProperty("masterRewardDuring"))
            if (!$util.isInteger(message.masterRewardDuring))
                return "masterRewardDuring: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.maxChip != null && message.hasOwnProperty("maxChip"))
            if (!$util.isInteger(message.maxChip) && !(message.maxChip && $util.isInteger(message.maxChip.low) && $util.isInteger(message.maxChip.high)))
                return "maxChip: integer|Long expected";
        return null;
    };

    /**
     * Creates a PBTrainingTableItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBTrainingTableItem
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBTrainingTableItem} PBTrainingTableItem
     */
    PBTrainingTableItem.fromObject = function fromObject(object) {
        if (object instanceof $root.PBTrainingTableItem)
            return object;
        var message = new $root.PBTrainingTableItem();
        switch (object.tableLevel) {
        case "EN_TRAINING_TABLE_LEVEL_JUNIOR":
        case 0:
            message.tableLevel = 0;
            break;
        case "EN_TRAINING_TABLE_LEVEL_MIDDLE":
        case 1:
            message.tableLevel = 1;
            break;
        case "EN_TRAINING_TABLE_LEVEL_SENIOR":
        case 2:
            message.tableLevel = 2;
            break;
        }
        if (object.minPlayer != null)
            message.minPlayer = object.minPlayer >>> 0;
        if (object.maxPlayer != null)
            message.maxPlayer = object.maxPlayer >>> 0;
        if (object.smallBlind != null)
            if ($util.Long)
                (message.smallBlind = $util.Long.fromValue(object.smallBlind)).unsigned = true;
            else if (typeof object.smallBlind === "string")
                message.smallBlind = parseInt(object.smallBlind, 10);
            else if (typeof object.smallBlind === "number")
                message.smallBlind = object.smallBlind;
            else if (typeof object.smallBlind === "object")
                message.smallBlind = new $util.LongBits(object.smallBlind.low >>> 0, object.smallBlind.high >>> 0).toNumber(true);
        if (object.bigBlind != null)
            if ($util.Long)
                (message.bigBlind = $util.Long.fromValue(object.bigBlind)).unsigned = true;
            else if (typeof object.bigBlind === "string")
                message.bigBlind = parseInt(object.bigBlind, 10);
            else if (typeof object.bigBlind === "number")
                message.bigBlind = object.bigBlind;
            else if (typeof object.bigBlind === "object")
                message.bigBlind = new $util.LongBits(object.bigBlind.low >>> 0, object.bigBlind.high >>> 0).toNumber(true);
        if (object.minBuyIn != null)
            if ($util.Long)
                (message.minBuyIn = $util.Long.fromValue(object.minBuyIn)).unsigned = true;
            else if (typeof object.minBuyIn === "string")
                message.minBuyIn = parseInt(object.minBuyIn, 10);
            else if (typeof object.minBuyIn === "number")
                message.minBuyIn = object.minBuyIn;
            else if (typeof object.minBuyIn === "object")
                message.minBuyIn = new $util.LongBits(object.minBuyIn.low >>> 0, object.minBuyIn.high >>> 0).toNumber(true);
        if (object.maxBuyIn != null)
            if ($util.Long)
                (message.maxBuyIn = $util.Long.fromValue(object.maxBuyIn)).unsigned = true;
            else if (typeof object.maxBuyIn === "string")
                message.maxBuyIn = parseInt(object.maxBuyIn, 10);
            else if (typeof object.maxBuyIn === "number")
                message.maxBuyIn = object.maxBuyIn;
            else if (typeof object.maxBuyIn === "object")
                message.maxBuyIn = new $util.LongBits(object.maxBuyIn.low >>> 0, object.maxBuyIn.high >>> 0).toNumber(true);
        if (object.fee != null)
            if ($util.Long)
                (message.fee = $util.Long.fromValue(object.fee)).unsigned = true;
            else if (typeof object.fee === "string")
                message.fee = parseInt(object.fee, 10);
            else if (typeof object.fee === "number")
                message.fee = object.fee;
            else if (typeof object.fee === "object")
                message.fee = new $util.LongBits(object.fee.low >>> 0, object.fee.high >>> 0).toNumber(true);
        if (object.masterRewardValue != null)
            message.masterRewardValue = object.masterRewardValue >>> 0;
        if (object.masterRewardDuring != null)
            message.masterRewardDuring = object.masterRewardDuring >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.maxChip != null)
            if ($util.Long)
                (message.maxChip = $util.Long.fromValue(object.maxChip)).unsigned = true;
            else if (typeof object.maxChip === "string")
                message.maxChip = parseInt(object.maxChip, 10);
            else if (typeof object.maxChip === "number")
                message.maxChip = object.maxChip;
            else if (typeof object.maxChip === "object")
                message.maxChip = new $util.LongBits(object.maxChip.low >>> 0, object.maxChip.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a PBTrainingTableItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBTrainingTableItem
     * @static
     * @param {PBTrainingTableItem} message PBTrainingTableItem
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBTrainingTableItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.tableLevel = options.enums === String ? "EN_TRAINING_TABLE_LEVEL_JUNIOR" : 0;
            object.minPlayer = 2;
            object.maxPlayer = 6;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.smallBlind = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.smallBlind = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.bigBlind = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.bigBlind = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.minBuyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.minBuyIn = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.maxBuyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.maxBuyIn = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.fee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.fee = options.longs === String ? "0" : 0;
            object.masterRewardValue = 0;
            object.masterRewardDuring = 0;
            object.name = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.maxChip = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.maxChip = options.longs === String ? "0" : 0;
        }
        if (message.tableLevel != null && message.hasOwnProperty("tableLevel"))
            object.tableLevel = options.enums === String ? $root.ENTrainingTableLevel[message.tableLevel] : message.tableLevel;
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            object.minPlayer = message.minPlayer;
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            object.maxPlayer = message.maxPlayer;
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            if (typeof message.smallBlind === "number")
                object.smallBlind = options.longs === String ? String(message.smallBlind) : message.smallBlind;
            else
                object.smallBlind = options.longs === String ? $util.Long.prototype.toString.call(message.smallBlind) : options.longs === Number ? new $util.LongBits(message.smallBlind.low >>> 0, message.smallBlind.high >>> 0).toNumber(true) : message.smallBlind;
        if (message.bigBlind != null && message.hasOwnProperty("bigBlind"))
            if (typeof message.bigBlind === "number")
                object.bigBlind = options.longs === String ? String(message.bigBlind) : message.bigBlind;
            else
                object.bigBlind = options.longs === String ? $util.Long.prototype.toString.call(message.bigBlind) : options.longs === Number ? new $util.LongBits(message.bigBlind.low >>> 0, message.bigBlind.high >>> 0).toNumber(true) : message.bigBlind;
        if (message.minBuyIn != null && message.hasOwnProperty("minBuyIn"))
            if (typeof message.minBuyIn === "number")
                object.minBuyIn = options.longs === String ? String(message.minBuyIn) : message.minBuyIn;
            else
                object.minBuyIn = options.longs === String ? $util.Long.prototype.toString.call(message.minBuyIn) : options.longs === Number ? new $util.LongBits(message.minBuyIn.low >>> 0, message.minBuyIn.high >>> 0).toNumber(true) : message.minBuyIn;
        if (message.maxBuyIn != null && message.hasOwnProperty("maxBuyIn"))
            if (typeof message.maxBuyIn === "number")
                object.maxBuyIn = options.longs === String ? String(message.maxBuyIn) : message.maxBuyIn;
            else
                object.maxBuyIn = options.longs === String ? $util.Long.prototype.toString.call(message.maxBuyIn) : options.longs === Number ? new $util.LongBits(message.maxBuyIn.low >>> 0, message.maxBuyIn.high >>> 0).toNumber(true) : message.maxBuyIn;
        if (message.fee != null && message.hasOwnProperty("fee"))
            if (typeof message.fee === "number")
                object.fee = options.longs === String ? String(message.fee) : message.fee;
            else
                object.fee = options.longs === String ? $util.Long.prototype.toString.call(message.fee) : options.longs === Number ? new $util.LongBits(message.fee.low >>> 0, message.fee.high >>> 0).toNumber(true) : message.fee;
        if (message.masterRewardValue != null && message.hasOwnProperty("masterRewardValue"))
            object.masterRewardValue = message.masterRewardValue;
        if (message.masterRewardDuring != null && message.hasOwnProperty("masterRewardDuring"))
            object.masterRewardDuring = message.masterRewardDuring;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.maxChip != null && message.hasOwnProperty("maxChip"))
            if (typeof message.maxChip === "number")
                object.maxChip = options.longs === String ? String(message.maxChip) : message.maxChip;
            else
                object.maxChip = options.longs === String ? $util.Long.prototype.toString.call(message.maxChip) : options.longs === Number ? new $util.LongBits(message.maxChip.low >>> 0, message.maxChip.high >>> 0).toNumber(true) : message.maxChip;
        return object;
    };

    /**
     * Converts this PBTrainingTableItem to JSON.
     * @function toJSON
     * @memberof PBTrainingTableItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBTrainingTableItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBTrainingTableItem;
})();

$root.PBConfigTraining = (function() {

    /**
     * Properties of a PBConfigTraining.
     * @exports IPBConfigTraining
     * @interface IPBConfigTraining
     * @property {Array.<IPBTrainingTableItem>} [tables] PBConfigTraining tables
     * @property {number} [version] PBConfigTraining version
     */

    /**
     * Constructs a new PBConfigTraining.
     * @exports PBConfigTraining
     * @classdesc Represents a PBConfigTraining.
     * @constructor
     * @param {IPBConfigTraining=} [properties] Properties to set
     */
    function PBConfigTraining(properties) {
        this.tables = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigTraining tables.
     * @member {Array.<IPBTrainingTableItem>}tables
     * @memberof PBConfigTraining
     * @instance
     */
    PBConfigTraining.prototype.tables = $util.emptyArray;

    /**
     * PBConfigTraining version.
     * @member {number}version
     * @memberof PBConfigTraining
     * @instance
     */
    PBConfigTraining.prototype.version = 0;

    /**
     * Creates a new PBConfigTraining instance using the specified properties.
     * @function create
     * @memberof PBConfigTraining
     * @static
     * @param {IPBConfigTraining=} [properties] Properties to set
     * @returns {PBConfigTraining} PBConfigTraining instance
     */
    PBConfigTraining.create = function create(properties) {
        return new PBConfigTraining(properties);
    };

    /**
     * Encodes the specified PBConfigTraining message. Does not implicitly {@link PBConfigTraining.verify|verify} messages.
     * @function encode
     * @memberof PBConfigTraining
     * @static
     * @param {IPBConfigTraining} message PBConfigTraining message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigTraining.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tables != null && message.tables.length)
            for (var i = 0; i < message.tables.length; ++i)
                $root.PBTrainingTableItem.encode(message.tables[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.version != null && message.hasOwnProperty("version"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.version);
        return writer;
    };

    /**
     * Encodes the specified PBConfigTraining message, length delimited. Does not implicitly {@link PBConfigTraining.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigTraining
     * @static
     * @param {IPBConfigTraining} message PBConfigTraining message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigTraining.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigTraining message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigTraining
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigTraining} PBConfigTraining
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigTraining.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigTraining();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.tables && message.tables.length))
                    message.tables = [];
                message.tables.push($root.PBTrainingTableItem.decode(reader, reader.uint32()));
                break;
            case 2:
                message.version = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigTraining message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigTraining
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigTraining} PBConfigTraining
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigTraining.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigTraining message.
     * @function verify
     * @memberof PBConfigTraining
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigTraining.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tables != null && message.hasOwnProperty("tables")) {
            if (!Array.isArray(message.tables))
                return "tables: array expected";
            for (var i = 0; i < message.tables.length; ++i) {
                var error = $root.PBTrainingTableItem.verify(message.tables[i]);
                if (error)
                    return "tables." + error;
            }
        }
        if (message.version != null && message.hasOwnProperty("version"))
            if (!$util.isInteger(message.version))
                return "version: integer expected";
        return null;
    };

    /**
     * Creates a PBConfigTraining message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigTraining
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigTraining} PBConfigTraining
     */
    PBConfigTraining.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigTraining)
            return object;
        var message = new $root.PBConfigTraining();
        if (object.tables) {
            if (!Array.isArray(object.tables))
                throw TypeError(".PBConfigTraining.tables: array expected");
            message.tables = [];
            for (var i = 0; i < object.tables.length; ++i) {
                if (typeof object.tables[i] !== "object")
                    throw TypeError(".PBConfigTraining.tables: object expected");
                message.tables[i] = $root.PBTrainingTableItem.fromObject(object.tables[i]);
            }
        }
        if (object.version != null)
            message.version = object.version >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a PBConfigTraining message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigTraining
     * @static
     * @param {PBConfigTraining} message PBConfigTraining
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigTraining.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.tables = [];
        if (options.defaults)
            object.version = 0;
        if (message.tables && message.tables.length) {
            object.tables = [];
            for (var j = 0; j < message.tables.length; ++j)
                object.tables[j] = $root.PBTrainingTableItem.toObject(message.tables[j], options);
        }
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        return object;
    };

    /**
     * Converts this PBConfigTraining to JSON.
     * @function toJSON
     * @memberof PBConfigTraining
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigTraining.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigTraining;
})();

$root.PBAutoCreateTableItem = (function() {

    /**
     * Properties of a PBAutoCreateTableItem.
     * @exports IPBAutoCreateTableItem
     * @interface IPBAutoCreateTableItem
     * @property {string} [name] PBAutoCreateTableItem name
     * @property {number} [minPlayer] PBAutoCreateTableItem minPlayer
     * @property {number} [maxPlayer] PBAutoCreateTableItem maxPlayer
     * @property {number|Long} [buyIn] PBAutoCreateTableItem buyIn
     * @property {Array.<IPBReward>} [rewards] PBAutoCreateTableItem rewards
     * @property {number} [raiseBlindIndex] PBAutoCreateTableItem raiseBlindIndex
     * @property {number} [raiseBlindTime] PBAutoCreateTableItem raiseBlindTime
     * @property {number|Long} [signUpFee] PBAutoCreateTableItem signUpFee
     * @property {string} [iconUrl] PBAutoCreateTableItem iconUrl
     * @property {number|Long} [serviceFee] PBAutoCreateTableItem serviceFee
     * @property {ENSngSignUpFeeType} [signUpFeeType] PBAutoCreateTableItem signUpFeeType
     * @property {ENSngSignUpFeeType} [serviceFeeType] PBAutoCreateTableItem serviceFeeType
     * @property {number} [tempId] PBAutoCreateTableItem tempId
     * @property {ENTableSubType} [subTableType] PBAutoCreateTableItem subTableType
     * @property {ENTableType} [tableType] PBAutoCreateTableItem tableType
     * @property {Array.<number>} [intervals] PBAutoCreateTableItem intervals
     * @property {boolean} [needNoticeStart] PBAutoCreateTableItem needNoticeStart
     */

    /**
     * Constructs a new PBAutoCreateTableItem.
     * @exports PBAutoCreateTableItem
     * @classdesc Represents a PBAutoCreateTableItem.
     * @constructor
     * @param {IPBAutoCreateTableItem=} [properties] Properties to set
     */
    function PBAutoCreateTableItem(properties) {
        this.rewards = [];
        this.intervals = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBAutoCreateTableItem name.
     * @member {string}name
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.name = "";

    /**
     * PBAutoCreateTableItem minPlayer.
     * @member {number}minPlayer
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.minPlayer = 9;

    /**
     * PBAutoCreateTableItem maxPlayer.
     * @member {number}maxPlayer
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.maxPlayer = 9;

    /**
     * PBAutoCreateTableItem buyIn.
     * @member {number|Long}buyIn
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.buyIn = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBAutoCreateTableItem rewards.
     * @member {Array.<IPBReward>}rewards
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.rewards = $util.emptyArray;

    /**
     * PBAutoCreateTableItem raiseBlindIndex.
     * @member {number}raiseBlindIndex
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.raiseBlindIndex = 0;

    /**
     * PBAutoCreateTableItem raiseBlindTime.
     * @member {number}raiseBlindTime
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.raiseBlindTime = 0;

    /**
     * PBAutoCreateTableItem signUpFee.
     * @member {number|Long}signUpFee
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.signUpFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBAutoCreateTableItem iconUrl.
     * @member {string}iconUrl
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.iconUrl = "";

    /**
     * PBAutoCreateTableItem serviceFee.
     * @member {number|Long}serviceFee
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.serviceFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBAutoCreateTableItem signUpFeeType.
     * @member {ENSngSignUpFeeType}signUpFeeType
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.signUpFeeType = 0;

    /**
     * PBAutoCreateTableItem serviceFeeType.
     * @member {ENSngSignUpFeeType}serviceFeeType
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.serviceFeeType = 0;

    /**
     * PBAutoCreateTableItem tempId.
     * @member {number}tempId
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.tempId = 0;

    /**
     * PBAutoCreateTableItem subTableType.
     * @member {ENTableSubType}subTableType
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.subTableType = 2;

    /**
     * PBAutoCreateTableItem tableType.
     * @member {ENTableType}tableType
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.tableType = 100;

    /**
     * PBAutoCreateTableItem intervals.
     * @member {Array.<number>}intervals
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.intervals = $util.emptyArray;

    /**
     * PBAutoCreateTableItem needNoticeStart.
     * @member {boolean}needNoticeStart
     * @memberof PBAutoCreateTableItem
     * @instance
     */
    PBAutoCreateTableItem.prototype.needNoticeStart = false;

    /**
     * Creates a new PBAutoCreateTableItem instance using the specified properties.
     * @function create
     * @memberof PBAutoCreateTableItem
     * @static
     * @param {IPBAutoCreateTableItem=} [properties] Properties to set
     * @returns {PBAutoCreateTableItem} PBAutoCreateTableItem instance
     */
    PBAutoCreateTableItem.create = function create(properties) {
        return new PBAutoCreateTableItem(properties);
    };

    /**
     * Encodes the specified PBAutoCreateTableItem message. Does not implicitly {@link PBAutoCreateTableItem.verify|verify} messages.
     * @function encode
     * @memberof PBAutoCreateTableItem
     * @static
     * @param {IPBAutoCreateTableItem} message PBAutoCreateTableItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBAutoCreateTableItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.minPlayer);
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.maxPlayer);
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.buyIn);
        if (message.rewards != null && message.rewards.length)
            for (var i = 0; i < message.rewards.length; ++i)
                $root.PBReward.encode(message.rewards[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.raiseBlindIndex != null && message.hasOwnProperty("raiseBlindIndex"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.raiseBlindIndex);
        if (message.raiseBlindTime != null && message.hasOwnProperty("raiseBlindTime"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.raiseBlindTime);
        if (message.signUpFee != null && message.hasOwnProperty("signUpFee"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.signUpFee);
        if (message.iconUrl != null && message.hasOwnProperty("iconUrl"))
            writer.uint32(/* id 12, wireType 2 =*/98).string(message.iconUrl);
        if (message.serviceFee != null && message.hasOwnProperty("serviceFee"))
            writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.serviceFee);
        if (message.signUpFeeType != null && message.hasOwnProperty("signUpFeeType"))
            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.signUpFeeType);
        if (message.serviceFeeType != null && message.hasOwnProperty("serviceFeeType"))
            writer.uint32(/* id 15, wireType 0 =*/120).int32(message.serviceFeeType);
        if (message.tempId != null && message.hasOwnProperty("tempId"))
            writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.tempId);
        if (message.subTableType != null && message.hasOwnProperty("subTableType"))
            writer.uint32(/* id 17, wireType 0 =*/136).int32(message.subTableType);
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            writer.uint32(/* id 18, wireType 0 =*/144).int32(message.tableType);
        if (message.intervals != null && message.intervals.length)
            for (var i = 0; i < message.intervals.length; ++i)
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.intervals[i]);
        if (message.needNoticeStart != null && message.hasOwnProperty("needNoticeStart"))
            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.needNoticeStart);
        return writer;
    };

    /**
     * Encodes the specified PBAutoCreateTableItem message, length delimited. Does not implicitly {@link PBAutoCreateTableItem.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBAutoCreateTableItem
     * @static
     * @param {IPBAutoCreateTableItem} message PBAutoCreateTableItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBAutoCreateTableItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBAutoCreateTableItem message from the specified reader or buffer.
     * @function decode
     * @memberof PBAutoCreateTableItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBAutoCreateTableItem} PBAutoCreateTableItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBAutoCreateTableItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBAutoCreateTableItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.minPlayer = reader.uint32();
                break;
            case 4:
                message.maxPlayer = reader.uint32();
                break;
            case 5:
                message.buyIn = reader.uint64();
                break;
            case 8:
                if (!(message.rewards && message.rewards.length))
                    message.rewards = [];
                message.rewards.push($root.PBReward.decode(reader, reader.uint32()));
                break;
            case 9:
                message.raiseBlindIndex = reader.uint32();
                break;
            case 10:
                message.raiseBlindTime = reader.uint32();
                break;
            case 11:
                message.signUpFee = reader.uint64();
                break;
            case 12:
                message.iconUrl = reader.string();
                break;
            case 13:
                message.serviceFee = reader.uint64();
                break;
            case 14:
                message.signUpFeeType = reader.int32();
                break;
            case 15:
                message.serviceFeeType = reader.int32();
                break;
            case 16:
                message.tempId = reader.uint32();
                break;
            case 17:
                message.subTableType = reader.int32();
                break;
            case 18:
                message.tableType = reader.int32();
                break;
            case 19:
                if (!(message.intervals && message.intervals.length))
                    message.intervals = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.intervals.push(reader.uint32());
                } else
                    message.intervals.push(reader.uint32());
                break;
            case 20:
                message.needNoticeStart = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBAutoCreateTableItem message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBAutoCreateTableItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBAutoCreateTableItem} PBAutoCreateTableItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBAutoCreateTableItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBAutoCreateTableItem message.
     * @function verify
     * @memberof PBAutoCreateTableItem
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBAutoCreateTableItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            if (!$util.isInteger(message.minPlayer))
                return "minPlayer: integer expected";
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            if (!$util.isInteger(message.maxPlayer))
                return "maxPlayer: integer expected";
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            if (!$util.isInteger(message.buyIn) && !(message.buyIn && $util.isInteger(message.buyIn.low) && $util.isInteger(message.buyIn.high)))
                return "buyIn: integer|Long expected";
        if (message.rewards != null && message.hasOwnProperty("rewards")) {
            if (!Array.isArray(message.rewards))
                return "rewards: array expected";
            for (var i = 0; i < message.rewards.length; ++i) {
                var error = $root.PBReward.verify(message.rewards[i]);
                if (error)
                    return "rewards." + error;
            }
        }
        if (message.raiseBlindIndex != null && message.hasOwnProperty("raiseBlindIndex"))
            if (!$util.isInteger(message.raiseBlindIndex))
                return "raiseBlindIndex: integer expected";
        if (message.raiseBlindTime != null && message.hasOwnProperty("raiseBlindTime"))
            if (!$util.isInteger(message.raiseBlindTime))
                return "raiseBlindTime: integer expected";
        if (message.signUpFee != null && message.hasOwnProperty("signUpFee"))
            if (!$util.isInteger(message.signUpFee) && !(message.signUpFee && $util.isInteger(message.signUpFee.low) && $util.isInteger(message.signUpFee.high)))
                return "signUpFee: integer|Long expected";
        if (message.iconUrl != null && message.hasOwnProperty("iconUrl"))
            if (!$util.isString(message.iconUrl))
                return "iconUrl: string expected";
        if (message.serviceFee != null && message.hasOwnProperty("serviceFee"))
            if (!$util.isInteger(message.serviceFee) && !(message.serviceFee && $util.isInteger(message.serviceFee.low) && $util.isInteger(message.serviceFee.high)))
                return "serviceFee: integer|Long expected";
        if (message.signUpFeeType != null && message.hasOwnProperty("signUpFeeType"))
            switch (message.signUpFeeType) {
            default:
                return "signUpFeeType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.serviceFeeType != null && message.hasOwnProperty("serviceFeeType"))
            switch (message.serviceFeeType) {
            default:
                return "serviceFeeType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.tempId != null && message.hasOwnProperty("tempId"))
            if (!$util.isInteger(message.tempId))
                return "tempId: integer expected";
        if (message.subTableType != null && message.hasOwnProperty("subTableType"))
            switch (message.subTableType) {
            default:
                return "subTableType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 4:
                break;
            }
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            switch (message.tableType) {
            default:
                return "tableType: enum value expected";
            case 0:
            case 100:
            case 200:
                break;
            }
        if (message.intervals != null && message.hasOwnProperty("intervals")) {
            if (!Array.isArray(message.intervals))
                return "intervals: array expected";
            for (var i = 0; i < message.intervals.length; ++i)
                if (!$util.isInteger(message.intervals[i]))
                    return "intervals: integer[] expected";
        }
        if (message.needNoticeStart != null && message.hasOwnProperty("needNoticeStart"))
            if (typeof message.needNoticeStart !== "boolean")
                return "needNoticeStart: boolean expected";
        return null;
    };

    /**
     * Creates a PBAutoCreateTableItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBAutoCreateTableItem
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBAutoCreateTableItem} PBAutoCreateTableItem
     */
    PBAutoCreateTableItem.fromObject = function fromObject(object) {
        if (object instanceof $root.PBAutoCreateTableItem)
            return object;
        var message = new $root.PBAutoCreateTableItem();
        if (object.name != null)
            message.name = String(object.name);
        if (object.minPlayer != null)
            message.minPlayer = object.minPlayer >>> 0;
        if (object.maxPlayer != null)
            message.maxPlayer = object.maxPlayer >>> 0;
        if (object.buyIn != null)
            if ($util.Long)
                (message.buyIn = $util.Long.fromValue(object.buyIn)).unsigned = true;
            else if (typeof object.buyIn === "string")
                message.buyIn = parseInt(object.buyIn, 10);
            else if (typeof object.buyIn === "number")
                message.buyIn = object.buyIn;
            else if (typeof object.buyIn === "object")
                message.buyIn = new $util.LongBits(object.buyIn.low >>> 0, object.buyIn.high >>> 0).toNumber(true);
        if (object.rewards) {
            if (!Array.isArray(object.rewards))
                throw TypeError(".PBAutoCreateTableItem.rewards: array expected");
            message.rewards = [];
            for (var i = 0; i < object.rewards.length; ++i) {
                if (typeof object.rewards[i] !== "object")
                    throw TypeError(".PBAutoCreateTableItem.rewards: object expected");
                message.rewards[i] = $root.PBReward.fromObject(object.rewards[i]);
            }
        }
        if (object.raiseBlindIndex != null)
            message.raiseBlindIndex = object.raiseBlindIndex >>> 0;
        if (object.raiseBlindTime != null)
            message.raiseBlindTime = object.raiseBlindTime >>> 0;
        if (object.signUpFee != null)
            if ($util.Long)
                (message.signUpFee = $util.Long.fromValue(object.signUpFee)).unsigned = true;
            else if (typeof object.signUpFee === "string")
                message.signUpFee = parseInt(object.signUpFee, 10);
            else if (typeof object.signUpFee === "number")
                message.signUpFee = object.signUpFee;
            else if (typeof object.signUpFee === "object")
                message.signUpFee = new $util.LongBits(object.signUpFee.low >>> 0, object.signUpFee.high >>> 0).toNumber(true);
        if (object.iconUrl != null)
            message.iconUrl = String(object.iconUrl);
        if (object.serviceFee != null)
            if ($util.Long)
                (message.serviceFee = $util.Long.fromValue(object.serviceFee)).unsigned = true;
            else if (typeof object.serviceFee === "string")
                message.serviceFee = parseInt(object.serviceFee, 10);
            else if (typeof object.serviceFee === "number")
                message.serviceFee = object.serviceFee;
            else if (typeof object.serviceFee === "object")
                message.serviceFee = new $util.LongBits(object.serviceFee.low >>> 0, object.serviceFee.high >>> 0).toNumber(true);
        switch (object.signUpFeeType) {
        case "EN_SNG_FEE_TYPE_CHIP":
        case 0:
            message.signUpFeeType = 0;
            break;
        case "EN_SNG_FEE_TYPE_DIAMOND":
        case 1:
            message.signUpFeeType = 1;
            break;
        case "EN_SNG_FEE_TYPE_NONE":
        case 2:
            message.signUpFeeType = 2;
            break;
        }
        switch (object.serviceFeeType) {
        case "EN_SNG_FEE_TYPE_CHIP":
        case 0:
            message.serviceFeeType = 0;
            break;
        case "EN_SNG_FEE_TYPE_DIAMOND":
        case 1:
            message.serviceFeeType = 1;
            break;
        case "EN_SNG_FEE_TYPE_NONE":
        case 2:
            message.serviceFeeType = 2;
            break;
        }
        if (object.tempId != null)
            message.tempId = object.tempId >>> 0;
        switch (object.subTableType) {
        case "EN_TABLE_SUB_TYPE_UNKNOWN":
        case 0:
            message.subTableType = 0;
            break;
        case "EN_TABLE_SUB_TYPE_RECOMMEND":
        case 1:
            message.subTableType = 1;
            break;
        case "EN_TABLE_SUB_TYPE_GOLDEN":
        case 2:
            message.subTableType = 2;
            break;
        case "EN_TABLE_SUB_TYPE_FRAGMENT":
        case 4:
            message.subTableType = 4;
            break;
        }
        switch (object.tableType) {
        case "EN_TABLE_CREATE_NORMAL":
        case 0:
            message.tableType = 0;
            break;
        case "EN_TABLE_SNG_TIME":
        case 100:
            message.tableType = 100;
            break;
        case "EN_TABLE_TRAINING_TIME":
        case 200:
            message.tableType = 200;
            break;
        }
        if (object.intervals) {
            if (!Array.isArray(object.intervals))
                throw TypeError(".PBAutoCreateTableItem.intervals: array expected");
            message.intervals = [];
            for (var i = 0; i < object.intervals.length; ++i)
                message.intervals[i] = object.intervals[i] >>> 0;
        }
        if (object.needNoticeStart != null)
            message.needNoticeStart = Boolean(object.needNoticeStart);
        return message;
    };

    /**
     * Creates a plain object from a PBAutoCreateTableItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBAutoCreateTableItem
     * @static
     * @param {PBAutoCreateTableItem} message PBAutoCreateTableItem
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBAutoCreateTableItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.rewards = [];
            object.intervals = [];
        }
        if (options.defaults) {
            object.name = "";
            object.minPlayer = 9;
            object.maxPlayer = 9;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.buyIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.buyIn = options.longs === String ? "0" : 0;
            object.raiseBlindIndex = 0;
            object.raiseBlindTime = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.signUpFee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.signUpFee = options.longs === String ? "0" : 0;
            object.iconUrl = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.serviceFee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.serviceFee = options.longs === String ? "0" : 0;
            object.signUpFeeType = options.enums === String ? "EN_SNG_FEE_TYPE_CHIP" : 0;
            object.serviceFeeType = options.enums === String ? "EN_SNG_FEE_TYPE_CHIP" : 0;
            object.tempId = 0;
            object.subTableType = options.enums === String ? "EN_TABLE_SUB_TYPE_GOLDEN" : 2;
            object.tableType = options.enums === String ? "EN_TABLE_SNG_TIME" : 100;
            object.needNoticeStart = false;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.minPlayer != null && message.hasOwnProperty("minPlayer"))
            object.minPlayer = message.minPlayer;
        if (message.maxPlayer != null && message.hasOwnProperty("maxPlayer"))
            object.maxPlayer = message.maxPlayer;
        if (message.buyIn != null && message.hasOwnProperty("buyIn"))
            if (typeof message.buyIn === "number")
                object.buyIn = options.longs === String ? String(message.buyIn) : message.buyIn;
            else
                object.buyIn = options.longs === String ? $util.Long.prototype.toString.call(message.buyIn) : options.longs === Number ? new $util.LongBits(message.buyIn.low >>> 0, message.buyIn.high >>> 0).toNumber(true) : message.buyIn;
        if (message.rewards && message.rewards.length) {
            object.rewards = [];
            for (var j = 0; j < message.rewards.length; ++j)
                object.rewards[j] = $root.PBReward.toObject(message.rewards[j], options);
        }
        if (message.raiseBlindIndex != null && message.hasOwnProperty("raiseBlindIndex"))
            object.raiseBlindIndex = message.raiseBlindIndex;
        if (message.raiseBlindTime != null && message.hasOwnProperty("raiseBlindTime"))
            object.raiseBlindTime = message.raiseBlindTime;
        if (message.signUpFee != null && message.hasOwnProperty("signUpFee"))
            if (typeof message.signUpFee === "number")
                object.signUpFee = options.longs === String ? String(message.signUpFee) : message.signUpFee;
            else
                object.signUpFee = options.longs === String ? $util.Long.prototype.toString.call(message.signUpFee) : options.longs === Number ? new $util.LongBits(message.signUpFee.low >>> 0, message.signUpFee.high >>> 0).toNumber(true) : message.signUpFee;
        if (message.iconUrl != null && message.hasOwnProperty("iconUrl"))
            object.iconUrl = message.iconUrl;
        if (message.serviceFee != null && message.hasOwnProperty("serviceFee"))
            if (typeof message.serviceFee === "number")
                object.serviceFee = options.longs === String ? String(message.serviceFee) : message.serviceFee;
            else
                object.serviceFee = options.longs === String ? $util.Long.prototype.toString.call(message.serviceFee) : options.longs === Number ? new $util.LongBits(message.serviceFee.low >>> 0, message.serviceFee.high >>> 0).toNumber(true) : message.serviceFee;
        if (message.signUpFeeType != null && message.hasOwnProperty("signUpFeeType"))
            object.signUpFeeType = options.enums === String ? $root.ENSngSignUpFeeType[message.signUpFeeType] : message.signUpFeeType;
        if (message.serviceFeeType != null && message.hasOwnProperty("serviceFeeType"))
            object.serviceFeeType = options.enums === String ? $root.ENSngSignUpFeeType[message.serviceFeeType] : message.serviceFeeType;
        if (message.tempId != null && message.hasOwnProperty("tempId"))
            object.tempId = message.tempId;
        if (message.subTableType != null && message.hasOwnProperty("subTableType"))
            object.subTableType = options.enums === String ? $root.ENTableSubType[message.subTableType] : message.subTableType;
        if (message.tableType != null && message.hasOwnProperty("tableType"))
            object.tableType = options.enums === String ? $root.ENTableType[message.tableType] : message.tableType;
        if (message.intervals && message.intervals.length) {
            object.intervals = [];
            for (var j = 0; j < message.intervals.length; ++j)
                object.intervals[j] = message.intervals[j];
        }
        if (message.needNoticeStart != null && message.hasOwnProperty("needNoticeStart"))
            object.needNoticeStart = message.needNoticeStart;
        return object;
    };

    /**
     * Converts this PBAutoCreateTableItem to JSON.
     * @function toJSON
     * @memberof PBAutoCreateTableItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBAutoCreateTableItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBAutoCreateTableItem;
})();

$root.PBConfigAutoCreate = (function() {

    /**
     * Properties of a PBConfigAutoCreate.
     * @exports IPBConfigAutoCreate
     * @interface IPBConfigAutoCreate
     * @property {Array.<IPBAutoCreateTableItem>} [tables] PBConfigAutoCreate tables
     */

    /**
     * Constructs a new PBConfigAutoCreate.
     * @exports PBConfigAutoCreate
     * @classdesc Represents a PBConfigAutoCreate.
     * @constructor
     * @param {IPBConfigAutoCreate=} [properties] Properties to set
     */
    function PBConfigAutoCreate(properties) {
        this.tables = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigAutoCreate tables.
     * @member {Array.<IPBAutoCreateTableItem>}tables
     * @memberof PBConfigAutoCreate
     * @instance
     */
    PBConfigAutoCreate.prototype.tables = $util.emptyArray;

    /**
     * Creates a new PBConfigAutoCreate instance using the specified properties.
     * @function create
     * @memberof PBConfigAutoCreate
     * @static
     * @param {IPBConfigAutoCreate=} [properties] Properties to set
     * @returns {PBConfigAutoCreate} PBConfigAutoCreate instance
     */
    PBConfigAutoCreate.create = function create(properties) {
        return new PBConfigAutoCreate(properties);
    };

    /**
     * Encodes the specified PBConfigAutoCreate message. Does not implicitly {@link PBConfigAutoCreate.verify|verify} messages.
     * @function encode
     * @memberof PBConfigAutoCreate
     * @static
     * @param {IPBConfigAutoCreate} message PBConfigAutoCreate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigAutoCreate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.tables != null && message.tables.length)
            for (var i = 0; i < message.tables.length; ++i)
                $root.PBAutoCreateTableItem.encode(message.tables[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PBConfigAutoCreate message, length delimited. Does not implicitly {@link PBConfigAutoCreate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigAutoCreate
     * @static
     * @param {IPBConfigAutoCreate} message PBConfigAutoCreate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigAutoCreate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigAutoCreate message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigAutoCreate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigAutoCreate} PBConfigAutoCreate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigAutoCreate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigAutoCreate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.tables && message.tables.length))
                    message.tables = [];
                message.tables.push($root.PBAutoCreateTableItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigAutoCreate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigAutoCreate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigAutoCreate} PBConfigAutoCreate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigAutoCreate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigAutoCreate message.
     * @function verify
     * @memberof PBConfigAutoCreate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigAutoCreate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.tables != null && message.hasOwnProperty("tables")) {
            if (!Array.isArray(message.tables))
                return "tables: array expected";
            for (var i = 0; i < message.tables.length; ++i) {
                var error = $root.PBAutoCreateTableItem.verify(message.tables[i]);
                if (error)
                    return "tables." + error;
            }
        }
        return null;
    };

    /**
     * Creates a PBConfigAutoCreate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigAutoCreate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigAutoCreate} PBConfigAutoCreate
     */
    PBConfigAutoCreate.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigAutoCreate)
            return object;
        var message = new $root.PBConfigAutoCreate();
        if (object.tables) {
            if (!Array.isArray(object.tables))
                throw TypeError(".PBConfigAutoCreate.tables: array expected");
            message.tables = [];
            for (var i = 0; i < object.tables.length; ++i) {
                if (typeof object.tables[i] !== "object")
                    throw TypeError(".PBConfigAutoCreate.tables: object expected");
                message.tables[i] = $root.PBAutoCreateTableItem.fromObject(object.tables[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a PBConfigAutoCreate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigAutoCreate
     * @static
     * @param {PBConfigAutoCreate} message PBConfigAutoCreate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigAutoCreate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.tables = [];
        if (message.tables && message.tables.length) {
            object.tables = [];
            for (var j = 0; j < message.tables.length; ++j)
                object.tables[j] = $root.PBAutoCreateTableItem.toObject(message.tables[j], options);
        }
        return object;
    };

    /**
     * Converts this PBConfigAutoCreate to JSON.
     * @function toJSON
     * @memberof PBConfigAutoCreate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigAutoCreate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigAutoCreate;
})();

$root.PBRaiseBlindItem = (function() {

    /**
     * Properties of a PBRaiseBlindItem.
     * @exports IPBRaiseBlindItem
     * @interface IPBRaiseBlindItem
     * @property {number|Long} [smallBlind] PBRaiseBlindItem smallBlind
     * @property {number|Long} [preBet] PBRaiseBlindItem preBet
     */

    /**
     * Constructs a new PBRaiseBlindItem.
     * @exports PBRaiseBlindItem
     * @classdesc Represents a PBRaiseBlindItem.
     * @constructor
     * @param {IPBRaiseBlindItem=} [properties] Properties to set
     */
    function PBRaiseBlindItem(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBRaiseBlindItem smallBlind.
     * @member {number|Long}smallBlind
     * @memberof PBRaiseBlindItem
     * @instance
     */
    PBRaiseBlindItem.prototype.smallBlind = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * PBRaiseBlindItem preBet.
     * @member {number|Long}preBet
     * @memberof PBRaiseBlindItem
     * @instance
     */
    PBRaiseBlindItem.prototype.preBet = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new PBRaiseBlindItem instance using the specified properties.
     * @function create
     * @memberof PBRaiseBlindItem
     * @static
     * @param {IPBRaiseBlindItem=} [properties] Properties to set
     * @returns {PBRaiseBlindItem} PBRaiseBlindItem instance
     */
    PBRaiseBlindItem.create = function create(properties) {
        return new PBRaiseBlindItem(properties);
    };

    /**
     * Encodes the specified PBRaiseBlindItem message. Does not implicitly {@link PBRaiseBlindItem.verify|verify} messages.
     * @function encode
     * @memberof PBRaiseBlindItem
     * @static
     * @param {IPBRaiseBlindItem} message PBRaiseBlindItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBRaiseBlindItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.smallBlind);
        if (message.preBet != null && message.hasOwnProperty("preBet"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.preBet);
        return writer;
    };

    /**
     * Encodes the specified PBRaiseBlindItem message, length delimited. Does not implicitly {@link PBRaiseBlindItem.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBRaiseBlindItem
     * @static
     * @param {IPBRaiseBlindItem} message PBRaiseBlindItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBRaiseBlindItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBRaiseBlindItem message from the specified reader or buffer.
     * @function decode
     * @memberof PBRaiseBlindItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBRaiseBlindItem} PBRaiseBlindItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBRaiseBlindItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBRaiseBlindItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.smallBlind = reader.uint64();
                break;
            case 2:
                message.preBet = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBRaiseBlindItem message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBRaiseBlindItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBRaiseBlindItem} PBRaiseBlindItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBRaiseBlindItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBRaiseBlindItem message.
     * @function verify
     * @memberof PBRaiseBlindItem
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBRaiseBlindItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            if (!$util.isInteger(message.smallBlind) && !(message.smallBlind && $util.isInteger(message.smallBlind.low) && $util.isInteger(message.smallBlind.high)))
                return "smallBlind: integer|Long expected";
        if (message.preBet != null && message.hasOwnProperty("preBet"))
            if (!$util.isInteger(message.preBet) && !(message.preBet && $util.isInteger(message.preBet.low) && $util.isInteger(message.preBet.high)))
                return "preBet: integer|Long expected";
        return null;
    };

    /**
     * Creates a PBRaiseBlindItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBRaiseBlindItem
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBRaiseBlindItem} PBRaiseBlindItem
     */
    PBRaiseBlindItem.fromObject = function fromObject(object) {
        if (object instanceof $root.PBRaiseBlindItem)
            return object;
        var message = new $root.PBRaiseBlindItem();
        if (object.smallBlind != null)
            if ($util.Long)
                (message.smallBlind = $util.Long.fromValue(object.smallBlind)).unsigned = true;
            else if (typeof object.smallBlind === "string")
                message.smallBlind = parseInt(object.smallBlind, 10);
            else if (typeof object.smallBlind === "number")
                message.smallBlind = object.smallBlind;
            else if (typeof object.smallBlind === "object")
                message.smallBlind = new $util.LongBits(object.smallBlind.low >>> 0, object.smallBlind.high >>> 0).toNumber(true);
        if (object.preBet != null)
            if ($util.Long)
                (message.preBet = $util.Long.fromValue(object.preBet)).unsigned = true;
            else if (typeof object.preBet === "string")
                message.preBet = parseInt(object.preBet, 10);
            else if (typeof object.preBet === "number")
                message.preBet = object.preBet;
            else if (typeof object.preBet === "object")
                message.preBet = new $util.LongBits(object.preBet.low >>> 0, object.preBet.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a PBRaiseBlindItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBRaiseBlindItem
     * @static
     * @param {PBRaiseBlindItem} message PBRaiseBlindItem
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBRaiseBlindItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.smallBlind = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.smallBlind = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.preBet = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.preBet = options.longs === String ? "0" : 0;
        }
        if (message.smallBlind != null && message.hasOwnProperty("smallBlind"))
            if (typeof message.smallBlind === "number")
                object.smallBlind = options.longs === String ? String(message.smallBlind) : message.smallBlind;
            else
                object.smallBlind = options.longs === String ? $util.Long.prototype.toString.call(message.smallBlind) : options.longs === Number ? new $util.LongBits(message.smallBlind.low >>> 0, message.smallBlind.high >>> 0).toNumber(true) : message.smallBlind;
        if (message.preBet != null && message.hasOwnProperty("preBet"))
            if (typeof message.preBet === "number")
                object.preBet = options.longs === String ? String(message.preBet) : message.preBet;
            else
                object.preBet = options.longs === String ? $util.Long.prototype.toString.call(message.preBet) : options.longs === Number ? new $util.LongBits(message.preBet.low >>> 0, message.preBet.high >>> 0).toNumber(true) : message.preBet;
        return object;
    };

    /**
     * Converts this PBRaiseBlindItem to JSON.
     * @function toJSON
     * @memberof PBRaiseBlindItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBRaiseBlindItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBRaiseBlindItem;
})();

$root.PBRaiseBlindIndex = (function() {

    /**
     * Properties of a PBRaiseBlindIndex.
     * @exports IPBRaiseBlindIndex
     * @interface IPBRaiseBlindIndex
     * @property {string} [desc] PBRaiseBlindIndex desc
     * @property {Array.<IPBRaiseBlindItem>} [items] PBRaiseBlindIndex items
     */

    /**
     * Constructs a new PBRaiseBlindIndex.
     * @exports PBRaiseBlindIndex
     * @classdesc Represents a PBRaiseBlindIndex.
     * @constructor
     * @param {IPBRaiseBlindIndex=} [properties] Properties to set
     */
    function PBRaiseBlindIndex(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBRaiseBlindIndex desc.
     * @member {string}desc
     * @memberof PBRaiseBlindIndex
     * @instance
     */
    PBRaiseBlindIndex.prototype.desc = "";

    /**
     * PBRaiseBlindIndex items.
     * @member {Array.<IPBRaiseBlindItem>}items
     * @memberof PBRaiseBlindIndex
     * @instance
     */
    PBRaiseBlindIndex.prototype.items = $util.emptyArray;

    /**
     * Creates a new PBRaiseBlindIndex instance using the specified properties.
     * @function create
     * @memberof PBRaiseBlindIndex
     * @static
     * @param {IPBRaiseBlindIndex=} [properties] Properties to set
     * @returns {PBRaiseBlindIndex} PBRaiseBlindIndex instance
     */
    PBRaiseBlindIndex.create = function create(properties) {
        return new PBRaiseBlindIndex(properties);
    };

    /**
     * Encodes the specified PBRaiseBlindIndex message. Does not implicitly {@link PBRaiseBlindIndex.verify|verify} messages.
     * @function encode
     * @memberof PBRaiseBlindIndex
     * @static
     * @param {IPBRaiseBlindIndex} message PBRaiseBlindIndex message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBRaiseBlindIndex.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.desc != null && message.hasOwnProperty("desc"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.desc);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.PBRaiseBlindItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PBRaiseBlindIndex message, length delimited. Does not implicitly {@link PBRaiseBlindIndex.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBRaiseBlindIndex
     * @static
     * @param {IPBRaiseBlindIndex} message PBRaiseBlindIndex message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBRaiseBlindIndex.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBRaiseBlindIndex message from the specified reader or buffer.
     * @function decode
     * @memberof PBRaiseBlindIndex
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBRaiseBlindIndex} PBRaiseBlindIndex
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBRaiseBlindIndex.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBRaiseBlindIndex();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.desc = reader.string();
                break;
            case 2:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.PBRaiseBlindItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBRaiseBlindIndex message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBRaiseBlindIndex
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBRaiseBlindIndex} PBRaiseBlindIndex
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBRaiseBlindIndex.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBRaiseBlindIndex message.
     * @function verify
     * @memberof PBRaiseBlindIndex
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBRaiseBlindIndex.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.desc != null && message.hasOwnProperty("desc"))
            if (!$util.isString(message.desc))
                return "desc: string expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.PBRaiseBlindItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };

    /**
     * Creates a PBRaiseBlindIndex message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBRaiseBlindIndex
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBRaiseBlindIndex} PBRaiseBlindIndex
     */
    PBRaiseBlindIndex.fromObject = function fromObject(object) {
        if (object instanceof $root.PBRaiseBlindIndex)
            return object;
        var message = new $root.PBRaiseBlindIndex();
        if (object.desc != null)
            message.desc = String(object.desc);
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".PBRaiseBlindIndex.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".PBRaiseBlindIndex.items: object expected");
                message.items[i] = $root.PBRaiseBlindItem.fromObject(object.items[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a PBRaiseBlindIndex message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBRaiseBlindIndex
     * @static
     * @param {PBRaiseBlindIndex} message PBRaiseBlindIndex
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBRaiseBlindIndex.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults)
            object.desc = "";
        if (message.desc != null && message.hasOwnProperty("desc"))
            object.desc = message.desc;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.PBRaiseBlindItem.toObject(message.items[j], options);
        }
        return object;
    };

    /**
     * Converts this PBRaiseBlindIndex to JSON.
     * @function toJSON
     * @memberof PBRaiseBlindIndex
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBRaiseBlindIndex.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBRaiseBlindIndex;
})();

$root.PBConfigRaiseBlind = (function() {

    /**
     * Properties of a PBConfigRaiseBlind.
     * @exports IPBConfigRaiseBlind
     * @interface IPBConfigRaiseBlind
     * @property {number} [version] PBConfigRaiseBlind version
     * @property {Array.<IPBRaiseBlindItem>} [items] PBConfigRaiseBlind items
     * @property {number} [raiseTime] PBConfigRaiseBlind raiseTime
     * @property {Array.<IPBRaiseBlindIndex>} [indexs] PBConfigRaiseBlind indexs
     */

    /**
     * Constructs a new PBConfigRaiseBlind.
     * @exports PBConfigRaiseBlind
     * @classdesc Represents a PBConfigRaiseBlind.
     * @constructor
     * @param {IPBConfigRaiseBlind=} [properties] Properties to set
     */
    function PBConfigRaiseBlind(properties) {
        this.items = [];
        this.indexs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigRaiseBlind version.
     * @member {number}version
     * @memberof PBConfigRaiseBlind
     * @instance
     */
    PBConfigRaiseBlind.prototype.version = 0;

    /**
     * PBConfigRaiseBlind items.
     * @member {Array.<IPBRaiseBlindItem>}items
     * @memberof PBConfigRaiseBlind
     * @instance
     */
    PBConfigRaiseBlind.prototype.items = $util.emptyArray;

    /**
     * PBConfigRaiseBlind raiseTime.
     * @member {number}raiseTime
     * @memberof PBConfigRaiseBlind
     * @instance
     */
    PBConfigRaiseBlind.prototype.raiseTime = 0;

    /**
     * PBConfigRaiseBlind indexs.
     * @member {Array.<IPBRaiseBlindIndex>}indexs
     * @memberof PBConfigRaiseBlind
     * @instance
     */
    PBConfigRaiseBlind.prototype.indexs = $util.emptyArray;

    /**
     * Creates a new PBConfigRaiseBlind instance using the specified properties.
     * @function create
     * @memberof PBConfigRaiseBlind
     * @static
     * @param {IPBConfigRaiseBlind=} [properties] Properties to set
     * @returns {PBConfigRaiseBlind} PBConfigRaiseBlind instance
     */
    PBConfigRaiseBlind.create = function create(properties) {
        return new PBConfigRaiseBlind(properties);
    };

    /**
     * Encodes the specified PBConfigRaiseBlind message. Does not implicitly {@link PBConfigRaiseBlind.verify|verify} messages.
     * @function encode
     * @memberof PBConfigRaiseBlind
     * @static
     * @param {IPBConfigRaiseBlind} message PBConfigRaiseBlind message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigRaiseBlind.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.version != null && message.hasOwnProperty("version"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.PBRaiseBlindItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.raiseTime != null && message.hasOwnProperty("raiseTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.raiseTime);
        if (message.indexs != null && message.indexs.length)
            for (var i = 0; i < message.indexs.length; ++i)
                $root.PBRaiseBlindIndex.encode(message.indexs[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PBConfigRaiseBlind message, length delimited. Does not implicitly {@link PBConfigRaiseBlind.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigRaiseBlind
     * @static
     * @param {IPBConfigRaiseBlind} message PBConfigRaiseBlind message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigRaiseBlind.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigRaiseBlind message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigRaiseBlind
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigRaiseBlind} PBConfigRaiseBlind
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigRaiseBlind.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigRaiseBlind();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.version = reader.uint32();
                break;
            case 2:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.PBRaiseBlindItem.decode(reader, reader.uint32()));
                break;
            case 3:
                message.raiseTime = reader.uint32();
                break;
            case 4:
                if (!(message.indexs && message.indexs.length))
                    message.indexs = [];
                message.indexs.push($root.PBRaiseBlindIndex.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigRaiseBlind message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigRaiseBlind
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigRaiseBlind} PBConfigRaiseBlind
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigRaiseBlind.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigRaiseBlind message.
     * @function verify
     * @memberof PBConfigRaiseBlind
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigRaiseBlind.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.version != null && message.hasOwnProperty("version"))
            if (!$util.isInteger(message.version))
                return "version: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.PBRaiseBlindItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        if (message.raiseTime != null && message.hasOwnProperty("raiseTime"))
            if (!$util.isInteger(message.raiseTime))
                return "raiseTime: integer expected";
        if (message.indexs != null && message.hasOwnProperty("indexs")) {
            if (!Array.isArray(message.indexs))
                return "indexs: array expected";
            for (var i = 0; i < message.indexs.length; ++i) {
                error = $root.PBRaiseBlindIndex.verify(message.indexs[i]);
                if (error)
                    return "indexs." + error;
            }
        }
        return null;
    };

    /**
     * Creates a PBConfigRaiseBlind message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigRaiseBlind
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigRaiseBlind} PBConfigRaiseBlind
     */
    PBConfigRaiseBlind.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigRaiseBlind)
            return object;
        var message = new $root.PBConfigRaiseBlind();
        if (object.version != null)
            message.version = object.version >>> 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".PBConfigRaiseBlind.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".PBConfigRaiseBlind.items: object expected");
                message.items[i] = $root.PBRaiseBlindItem.fromObject(object.items[i]);
            }
        }
        if (object.raiseTime != null)
            message.raiseTime = object.raiseTime >>> 0;
        if (object.indexs) {
            if (!Array.isArray(object.indexs))
                throw TypeError(".PBConfigRaiseBlind.indexs: array expected");
            message.indexs = [];
            for (var i = 0; i < object.indexs.length; ++i) {
                if (typeof object.indexs[i] !== "object")
                    throw TypeError(".PBConfigRaiseBlind.indexs: object expected");
                message.indexs[i] = $root.PBRaiseBlindIndex.fromObject(object.indexs[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a PBConfigRaiseBlind message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigRaiseBlind
     * @static
     * @param {PBConfigRaiseBlind} message PBConfigRaiseBlind
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigRaiseBlind.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.items = [];
            object.indexs = [];
        }
        if (options.defaults) {
            object.version = 0;
            object.raiseTime = 0;
        }
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.PBRaiseBlindItem.toObject(message.items[j], options);
        }
        if (message.raiseTime != null && message.hasOwnProperty("raiseTime"))
            object.raiseTime = message.raiseTime;
        if (message.indexs && message.indexs.length) {
            object.indexs = [];
            for (var j = 0; j < message.indexs.length; ++j)
                object.indexs[j] = $root.PBRaiseBlindIndex.toObject(message.indexs[j], options);
        }
        return object;
    };

    /**
     * Converts this PBConfigRaiseBlind to JSON.
     * @function toJSON
     * @memberof PBConfigRaiseBlind
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigRaiseBlind.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigRaiseBlind;
})();

$root.PBConfigGlobal = (function() {

    /**
     * Properties of a PBConfigGlobal.
     * @exports IPBConfigGlobal
     * @interface IPBConfigGlobal
     * @property {number|Long} [regChip] PBConfigGlobal regChip
     */

    /**
     * Constructs a new PBConfigGlobal.
     * @exports PBConfigGlobal
     * @classdesc Represents a PBConfigGlobal.
     * @constructor
     * @param {IPBConfigGlobal=} [properties] Properties to set
     */
    function PBConfigGlobal(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfigGlobal regChip.
     * @member {number|Long}regChip
     * @memberof PBConfigGlobal
     * @instance
     */
    PBConfigGlobal.prototype.regChip = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new PBConfigGlobal instance using the specified properties.
     * @function create
     * @memberof PBConfigGlobal
     * @static
     * @param {IPBConfigGlobal=} [properties] Properties to set
     * @returns {PBConfigGlobal} PBConfigGlobal instance
     */
    PBConfigGlobal.create = function create(properties) {
        return new PBConfigGlobal(properties);
    };

    /**
     * Encodes the specified PBConfigGlobal message. Does not implicitly {@link PBConfigGlobal.verify|verify} messages.
     * @function encode
     * @memberof PBConfigGlobal
     * @static
     * @param {IPBConfigGlobal} message PBConfigGlobal message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigGlobal.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.regChip != null && message.hasOwnProperty("regChip"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.regChip);
        return writer;
    };

    /**
     * Encodes the specified PBConfigGlobal message, length delimited. Does not implicitly {@link PBConfigGlobal.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfigGlobal
     * @static
     * @param {IPBConfigGlobal} message PBConfigGlobal message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfigGlobal.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfigGlobal message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfigGlobal
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfigGlobal} PBConfigGlobal
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigGlobal.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfigGlobal();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.regChip = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfigGlobal message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfigGlobal
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfigGlobal} PBConfigGlobal
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfigGlobal.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfigGlobal message.
     * @function verify
     * @memberof PBConfigGlobal
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfigGlobal.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.regChip != null && message.hasOwnProperty("regChip"))
            if (!$util.isInteger(message.regChip) && !(message.regChip && $util.isInteger(message.regChip.low) && $util.isInteger(message.regChip.high)))
                return "regChip: integer|Long expected";
        return null;
    };

    /**
     * Creates a PBConfigGlobal message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfigGlobal
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfigGlobal} PBConfigGlobal
     */
    PBConfigGlobal.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfigGlobal)
            return object;
        var message = new $root.PBConfigGlobal();
        if (object.regChip != null)
            if ($util.Long)
                (message.regChip = $util.Long.fromValue(object.regChip)).unsigned = true;
            else if (typeof object.regChip === "string")
                message.regChip = parseInt(object.regChip, 10);
            else if (typeof object.regChip === "number")
                message.regChip = object.regChip;
            else if (typeof object.regChip === "object")
                message.regChip = new $util.LongBits(object.regChip.low >>> 0, object.regChip.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a PBConfigGlobal message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfigGlobal
     * @static
     * @param {PBConfigGlobal} message PBConfigGlobal
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfigGlobal.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.regChip = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.regChip = options.longs === String ? "0" : 0;
        if (message.regChip != null && message.hasOwnProperty("regChip"))
            if (typeof message.regChip === "number")
                object.regChip = options.longs === String ? String(message.regChip) : message.regChip;
            else
                object.regChip = options.longs === String ? $util.Long.prototype.toString.call(message.regChip) : options.longs === Number ? new $util.LongBits(message.regChip.low >>> 0, message.regChip.high >>> 0).toNumber(true) : message.regChip;
        return object;
    };

    /**
     * Converts this PBConfigGlobal to JSON.
     * @function toJSON
     * @memberof PBConfigGlobal
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfigGlobal.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfigGlobal;
})();

$root.PBConfig = (function() {

    /**
     * Properties of a PBConfig.
     * @exports IPBConfig
     * @interface IPBConfig
     * @property {IPBConfigGlobal} [global] PBConfig global
     * @property {IPBConfigTable} [table] PBConfig table
     * @property {IPBConfigRobot} [robot] PBConfig robot
     * @property {IPBConfigRandomName} [randomName] PBConfig randomName
     * @property {IPBConfigSng} [sng] PBConfig sng
     * @property {IPBConfigTraining} [training] PBConfig training
     * @property {IPBConfigAutoCreate} [autoCreate] PBConfig autoCreate
     * @property {IPBConfigCreateTable} [createTable] PBConfig createTable
     * @property {IPBConfigRaiseBlind} [raiseBlind] PBConfig raiseBlind
     */

    /**
     * Constructs a new PBConfig.
     * @exports PBConfig
     * @classdesc Represents a PBConfig.
     * @constructor
     * @param {IPBConfig=} [properties] Properties to set
     */
    function PBConfig(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PBConfig global.
     * @member {(IPBConfigGlobal|null|undefined)}global
     * @memberof PBConfig
     * @instance
     */
    PBConfig.prototype.global = null;

    /**
     * PBConfig table.
     * @member {(IPBConfigTable|null|undefined)}table
     * @memberof PBConfig
     * @instance
     */
    PBConfig.prototype.table = null;

    /**
     * PBConfig robot.
     * @member {(IPBConfigRobot|null|undefined)}robot
     * @memberof PBConfig
     * @instance
     */
    PBConfig.prototype.robot = null;

    /**
     * PBConfig randomName.
     * @member {(IPBConfigRandomName|null|undefined)}randomName
     * @memberof PBConfig
     * @instance
     */
    PBConfig.prototype.randomName = null;

    /**
     * PBConfig sng.
     * @member {(IPBConfigSng|null|undefined)}sng
     * @memberof PBConfig
     * @instance
     */
    PBConfig.prototype.sng = null;

    /**
     * PBConfig training.
     * @member {(IPBConfigTraining|null|undefined)}training
     * @memberof PBConfig
     * @instance
     */
    PBConfig.prototype.training = null;

    /**
     * PBConfig autoCreate.
     * @member {(IPBConfigAutoCreate|null|undefined)}autoCreate
     * @memberof PBConfig
     * @instance
     */
    PBConfig.prototype.autoCreate = null;

    /**
     * PBConfig createTable.
     * @member {(IPBConfigCreateTable|null|undefined)}createTable
     * @memberof PBConfig
     * @instance
     */
    PBConfig.prototype.createTable = null;

    /**
     * PBConfig raiseBlind.
     * @member {(IPBConfigRaiseBlind|null|undefined)}raiseBlind
     * @memberof PBConfig
     * @instance
     */
    PBConfig.prototype.raiseBlind = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * PBConfig msgUnion.
     * @member {string|undefined} msgUnion
     * @memberof PBConfig
     * @instance
     */
    Object.defineProperty(PBConfig.prototype, "msgUnion", {
        get: $util.oneOfGetter($oneOfFields = ["global", "table", "robot", "randomName", "sng", "training", "autoCreate", "createTable", "raiseBlind"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new PBConfig instance using the specified properties.
     * @function create
     * @memberof PBConfig
     * @static
     * @param {IPBConfig=} [properties] Properties to set
     * @returns {PBConfig} PBConfig instance
     */
    PBConfig.create = function create(properties) {
        return new PBConfig(properties);
    };

    /**
     * Encodes the specified PBConfig message. Does not implicitly {@link PBConfig.verify|verify} messages.
     * @function encode
     * @memberof PBConfig
     * @static
     * @param {IPBConfig} message PBConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.table != null && message.hasOwnProperty("table"))
            $root.PBConfigTable.encode(message.table, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.robot != null && message.hasOwnProperty("robot"))
            $root.PBConfigRobot.encode(message.robot, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.randomName != null && message.hasOwnProperty("randomName"))
            $root.PBConfigRandomName.encode(message.randomName, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.global != null && message.hasOwnProperty("global"))
            $root.PBConfigGlobal.encode(message.global, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.sng != null && message.hasOwnProperty("sng"))
            $root.PBConfigSng.encode(message.sng, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.training != null && message.hasOwnProperty("training"))
            $root.PBConfigTraining.encode(message.training, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.autoCreate != null && message.hasOwnProperty("autoCreate"))
            $root.PBConfigAutoCreate.encode(message.autoCreate, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.createTable != null && message.hasOwnProperty("createTable"))
            $root.PBConfigCreateTable.encode(message.createTable, writer.uint32(/* id 1000, wireType 2 =*/8002).fork()).ldelim();
        if (message.raiseBlind != null && message.hasOwnProperty("raiseBlind"))
            $root.PBConfigRaiseBlind.encode(message.raiseBlind, writer.uint32(/* id 1001, wireType 2 =*/8010).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PBConfig message, length delimited. Does not implicitly {@link PBConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PBConfig
     * @static
     * @param {IPBConfig} message PBConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PBConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PBConfig message from the specified reader or buffer.
     * @function decode
     * @memberof PBConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PBConfig} PBConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PBConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 4:
                message.global = $root.PBConfigGlobal.decode(reader, reader.uint32());
                break;
            case 1:
                message.table = $root.PBConfigTable.decode(reader, reader.uint32());
                break;
            case 2:
                message.robot = $root.PBConfigRobot.decode(reader, reader.uint32());
                break;
            case 3:
                message.randomName = $root.PBConfigRandomName.decode(reader, reader.uint32());
                break;
            case 5:
                message.sng = $root.PBConfigSng.decode(reader, reader.uint32());
                break;
            case 6:
                message.training = $root.PBConfigTraining.decode(reader, reader.uint32());
                break;
            case 7:
                message.autoCreate = $root.PBConfigAutoCreate.decode(reader, reader.uint32());
                break;
            case 1000:
                message.createTable = $root.PBConfigCreateTable.decode(reader, reader.uint32());
                break;
            case 1001:
                message.raiseBlind = $root.PBConfigRaiseBlind.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PBConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PBConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PBConfig} PBConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PBConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PBConfig message.
     * @function verify
     * @memberof PBConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PBConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.global != null && message.hasOwnProperty("global")) {
            properties.msgUnion = 1;
            var error = $root.PBConfigGlobal.verify(message.global);
            if (error)
                return "global." + error;
        }
        if (message.table != null && message.hasOwnProperty("table")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.PBConfigTable.verify(message.table);
            if (error)
                return "table." + error;
        }
        if (message.robot != null && message.hasOwnProperty("robot")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.PBConfigRobot.verify(message.robot);
            if (error)
                return "robot." + error;
        }
        if (message.randomName != null && message.hasOwnProperty("randomName")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.PBConfigRandomName.verify(message.randomName);
            if (error)
                return "randomName." + error;
        }
        if (message.sng != null && message.hasOwnProperty("sng")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.PBConfigSng.verify(message.sng);
            if (error)
                return "sng." + error;
        }
        if (message.training != null && message.hasOwnProperty("training")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.PBConfigTraining.verify(message.training);
            if (error)
                return "training." + error;
        }
        if (message.autoCreate != null && message.hasOwnProperty("autoCreate")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.PBConfigAutoCreate.verify(message.autoCreate);
            if (error)
                return "autoCreate." + error;
        }
        if (message.createTable != null && message.hasOwnProperty("createTable")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.PBConfigCreateTable.verify(message.createTable);
            if (error)
                return "createTable." + error;
        }
        if (message.raiseBlind != null && message.hasOwnProperty("raiseBlind")) {
            if (properties.msgUnion === 1)
                return "msgUnion: multiple values";
            properties.msgUnion = 1;
            error = $root.PBConfigRaiseBlind.verify(message.raiseBlind);
            if (error)
                return "raiseBlind." + error;
        }
        return null;
    };

    /**
     * Creates a PBConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PBConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PBConfig} PBConfig
     */
    PBConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.PBConfig)
            return object;
        var message = new $root.PBConfig();
        if (object.global != null) {
            if (typeof object.global !== "object")
                throw TypeError(".PBConfig.global: object expected");
            message.global = $root.PBConfigGlobal.fromObject(object.global);
        }
        if (object.table != null) {
            if (typeof object.table !== "object")
                throw TypeError(".PBConfig.table: object expected");
            message.table = $root.PBConfigTable.fromObject(object.table);
        }
        if (object.robot != null) {
            if (typeof object.robot !== "object")
                throw TypeError(".PBConfig.robot: object expected");
            message.robot = $root.PBConfigRobot.fromObject(object.robot);
        }
        if (object.randomName != null) {
            if (typeof object.randomName !== "object")
                throw TypeError(".PBConfig.randomName: object expected");
            message.randomName = $root.PBConfigRandomName.fromObject(object.randomName);
        }
        if (object.sng != null) {
            if (typeof object.sng !== "object")
                throw TypeError(".PBConfig.sng: object expected");
            message.sng = $root.PBConfigSng.fromObject(object.sng);
        }
        if (object.training != null) {
            if (typeof object.training !== "object")
                throw TypeError(".PBConfig.training: object expected");
            message.training = $root.PBConfigTraining.fromObject(object.training);
        }
        if (object.autoCreate != null) {
            if (typeof object.autoCreate !== "object")
                throw TypeError(".PBConfig.autoCreate: object expected");
            message.autoCreate = $root.PBConfigAutoCreate.fromObject(object.autoCreate);
        }
        if (object.createTable != null) {
            if (typeof object.createTable !== "object")
                throw TypeError(".PBConfig.createTable: object expected");
            message.createTable = $root.PBConfigCreateTable.fromObject(object.createTable);
        }
        if (object.raiseBlind != null) {
            if (typeof object.raiseBlind !== "object")
                throw TypeError(".PBConfig.raiseBlind: object expected");
            message.raiseBlind = $root.PBConfigRaiseBlind.fromObject(object.raiseBlind);
        }
        return message;
    };

    /**
     * Creates a plain object from a PBConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PBConfig
     * @static
     * @param {PBConfig} message PBConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PBConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (message.table != null && message.hasOwnProperty("table")) {
            object.table = $root.PBConfigTable.toObject(message.table, options);
            if (options.oneofs)
                object.msgUnion = "table";
        }
        if (message.robot != null && message.hasOwnProperty("robot")) {
            object.robot = $root.PBConfigRobot.toObject(message.robot, options);
            if (options.oneofs)
                object.msgUnion = "robot";
        }
        if (message.randomName != null && message.hasOwnProperty("randomName")) {
            object.randomName = $root.PBConfigRandomName.toObject(message.randomName, options);
            if (options.oneofs)
                object.msgUnion = "randomName";
        }
        if (message.global != null && message.hasOwnProperty("global")) {
            object.global = $root.PBConfigGlobal.toObject(message.global, options);
            if (options.oneofs)
                object.msgUnion = "global";
        }
        if (message.sng != null && message.hasOwnProperty("sng")) {
            object.sng = $root.PBConfigSng.toObject(message.sng, options);
            if (options.oneofs)
                object.msgUnion = "sng";
        }
        if (message.training != null && message.hasOwnProperty("training")) {
            object.training = $root.PBConfigTraining.toObject(message.training, options);
            if (options.oneofs)
                object.msgUnion = "training";
        }
        if (message.autoCreate != null && message.hasOwnProperty("autoCreate")) {
            object.autoCreate = $root.PBConfigAutoCreate.toObject(message.autoCreate, options);
            if (options.oneofs)
                object.msgUnion = "autoCreate";
        }
        if (message.createTable != null && message.hasOwnProperty("createTable")) {
            object.createTable = $root.PBConfigCreateTable.toObject(message.createTable, options);
            if (options.oneofs)
                object.msgUnion = "createTable";
        }
        if (message.raiseBlind != null && message.hasOwnProperty("raiseBlind")) {
            object.raiseBlind = $root.PBConfigRaiseBlind.toObject(message.raiseBlind, options);
            if (options.oneofs)
                object.msgUnion = "raiseBlind";
        }
        return object;
    };

    /**
     * Converts this PBConfig to JSON.
     * @function toJSON
     * @memberof PBConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PBConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PBConfig;
})();

module.exports = $root;
