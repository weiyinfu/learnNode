import "poker_common.proto";
import "poker_msg_cs.proto";
import "poker_config.proto";

message SSRedisData
{
    optional uint32 version = 1;
    optional uint32 updatetime = 2;
    optional uint64 key = 3;
    optional bytes  value = 4;
    optional bool   use_version_check = 5;
}

////////////////////////////////////////////////////////////
//DB相关协议
////////////////////////////////////////////////////////////
message SSRequestQueryData
{
    optional ENRedisDataType type = 1;
    optional uint64 uid = 2;
    repeated SSRedisData datas = 3;
}

message SSResponseQueryData
{
    optional ENMessageError result = 1;
    optional ENRedisDataType type = 2;
    optional uint64 uid = 3;
    repeated SSRedisData datas = 4; 
}

message SSRequestSaveData
{
    optional ENRedisDataType type = 1;
    optional uint64 uid = 2;
    repeated SSRedisData datas = 3;
}

message SSResponseSaveData
{
    optional ENMessageError result = 1;
    optional ENRedisDataType type = 2;
    optional uint64 uid = 3;
    repeated SSRedisData datas = 4; 
}

message SSRequestDelData
{
    optional ENRedisDataType type = 1;
    optional uint64 uid = 2;
    repeated SSRedisData datas = 3;
}

message SSResponseDelData
{
    optional ENMessageError result = 1;
    optional ENRedisDataType type = 2;
    optional uint64 uid = 3;
    repeated SSRedisData datas = 4; 
}

////////////////////////////////////////////////////////////
// toplist
////////////////////////////////////////////////////////////
message SSRankDataInfo
{
    optional uint64         rank_id = 1;
    optional uint64         rank_key = 2;
    optional int64          rank_score = 3;
}

message SSRankData
{
    optional uint64         rank_key = 3;
    optional int64          rank_score = 4;
    optional uint32         rank = 5;
}

message SSRequestToplistUpdate
{
    repeated SSRankDataInfo data_infos = 1;
}

message SSResponseToplistUpdate
{
    optional ENMessageError result = 1;
}

message SSRequestToplistGetSingle
{
    optional uint64         rank_id = 1;
    optional uint64         rank_key = 3;
}

message SSResponseToplistGetSingle
{
    optional ENMessageError result = 1;
    optional uint64         rank_id = 2;
    optional SSRankData     data = 4;
}

message SSRequestToplistGetRange
{
    optional uint64         rank_id = 1;
    optional uint32         begin = 3;
    optional uint32         count = 4;
}

message SSResponseToplistGetRange
{
    optional ENMessageError result = 1;
    optional uint64         rank_id = 2;
    repeated SSRankData     datas = 4;
}

////////////////////////////////////////////////////////////
// 房间服协议
////////////////////////////////////////////////////////////
message SSNotifyGameUploadTables
{
}

message SSNotifyClearTables
{
    optional uint32 game_svr_id = 1;
}

message SSNotifyRoomUploadTables
{
    optional uint32         game_svr_id = 1;
    repeated CSTableInfo    tables      = 2;
}

message SSNotifyUpdateTable
{
    optional uint32         game_svr_id = 1;
    optional CSTableInfo    table       = 2;
}

message SSNotifyDeleteTable
{
    optional uint32         game_svr_id = 1;
    optional uint32         table_id    = 2;
}

message SSGameToRoomHeartBeat
{
    optional uint32         game_svr_id = 1;
}

message SSNotifyCheckCore
{
    optional uint64 uid = 1;
}


////////////////////////////////////////////////////////////
// GM后台协议
////////////////////////////////////////////////////////////
message PBUpdate
{
    optional ENUpdateType   type    = 1;
    optional uint32         id      = 2;
    optional uint64         num     = 3;
    optional bool           sign    = 4; // num正负
    optional uint32         reason  = 5;
}
message GMUpdateInfo
{
    optional uint64         uid     = 1;
    repeated PBUpdate       updates = 2;
}
message GMRequestUpdate
{
    repeated GMUpdateInfo   infos   = 1;
}
message GMResponseUpdate
{
    optional int32  result      = 1;
    repeated uint64 failed_uids = 2;
}

message GMRequestNotifyUserUpdate
{
    optional uint64     uid     = 1;
    optional PBUpdate   update  = 2; // 这里的update里面的值为通知客户端的变化后的值
}
message GMResponseNotifyUserUpdate
{
    optional int32  result          = 1;
}

message GMPlayerInfo
{
    optional uint64 uid         = 2;
    optional uint64 diamond     = 1;
}
message GMRequestPlayerInfo
{
    optional uint64 uid         = 1;
}
message GMResponsePlayerInfo
{
    optional GMPlayerInfo   info    = 1;
}



message GMNotifyClient
{
    optional uint64 uid         = 1;
    optional string content     = 2;
}

message GMRequestNewNextSpinTable
{
    optional uint32 spin_reward_index = 1;       // 设置暴击场使用的奖励index，必须设置, 默认0
    optional uint32 spin_reward_row   = 2;       // 设置暴击场使用的奖励row in index, 如果设置了将使用此值，不再随机产生
    repeated uint32 order_user_ids    = 3;       // 预约用户id
    optional uint64 sign_up_fee       = 4;       // 根据报名费 插入暴击场奖励比赛
}

message GMResponseNewNextSpinTable
{
    optional ENMessageError result = 1;          
}

////////////////////////////////////////////////////////////
// 大协议定义
// 协议ID从1500开始，依次递增，最大为1999，若超出会与其他协议id冲突
// 转发协议从1500开始映射，规则为1500 + cs消息ID, 如果冲突，则安排当前转发协议最小的数量+1
////////////////////////////////////////////////////////////
message PBSSMsg
{
    oneof msg_union
    {
        // hall转发给其他服的cs协议
        CSRequestCreateTable    cs_request_create_table     = 1531; // 创建房间
        CSResponseCreateTable   cs_response_create_table    = 1532; // 
        CSRequestTableList      cs_request_table_list       = 1533; // 请求房间列表
        CSResponseTableList     cs_response_table_list      = 1534;
        CSRequestTableInfo      cs_request_table_info       = 1535;
        CSResponseTableInfo     cs_repsonse_table_info      = 1536;
        CSRequestSngSignUp      cs_request_sng_sign_up      = 1537;
        CSResponseSngSignUp     cs_response_sng_sign_up     = 1538;
        CSRequestTableListBySubType     cs_request_table_list_by_subtype = 1543;
        CSResponseTableListBySubType    cs_response_table_list_by_subtype = 1544;
        CSRequestTableListByStatus      cs_request_table_list_by_status = 1545;
        CSResponseTableListByStatus     cs_response_table_list_by_status = 1546;
        CSRequestTrainingSignUp         cs_request_training_sign_up = 1547;
        CSResponseTrainingSignUp        cs_response_training_sign_up = 1548;
        CSRequestTableListByWindow      cs_request_table_list_by_window   = 1595; // 请求房间列表通过窗口显示
        CSResponseTableListByWindow     cs_response_table_list_by_window  = 1596; 
        CSRequestTrainingList           cs_request_training_list    = 1582;
        CSResponseTrainingList          cs_response_training_list   = 1583;
        CSRequestTrainingSignUp2        cs_request_training_sign_up_2   = 1584;
        CSResponseTrainingSignUp2       cs_response_training_sign_up_2  = 1585;
        CSRequestSngObserver            cs_request_sng_observer         = 1501;
        CSResponseSngObserver           cs_response_sng_observer        = 1502;

        //DB相关协议
        SSRequestQueryData      ss_request_query_data       = 1804; // 请求查询数据
        SSResponseQueryData     ss_response_query_data      = 1805; // 响应查询数据
        SSRequestSaveData       ss_request_save_data        = 1806; // 请求保存数据
        SSResponseSaveData      ss_response_save_data       = 1807; // 请求保存数据
        SSRequestDelData        ss_request_del_data         = 1808; // 请求保存数据
        SSResponseDelData       ss_response_del_data        = 1809; // 请求保存数据

        //排行相关协议
        SSRequestToplistUpdate      ss_request_toplist_update      = 1810; // 请求更新排行
        SSResponseToplistUpdate     ss_response_toplist_update     = 1811; // 响应更新排行
        SSRequestToplistGetSingle   ss_request_toplist_get_single  = 1812; // 请求单个排行数据
        SSResponseToplistGetSingle  ss_response_toplist_get_single = 1813; // 响应单个排行数据
        SSRequestToplistGetRange    ss_request_toplist_get_range   = 1814; // 请求排行范围数据
        SSResponseToplistGetRange   ss_response_toplist_get_range  = 1815; // 响应排行范围数据

        SSNotifyGameUploadTables    ss_notify_game_upload_tables    = 1601; // room拉起时通知game上报桌子
        SSNotifyClearTables         ss_notify_clear_tables          = 1600; // 通知room清除桌子
        SSNotifyRoomUploadTables    ss_notify_room_upload_tables    = 1602; // 通知room上报桌子
        SSNotifyUpdateTable         ss_notify_update_table          = 1603; // 更新桌子信息
        SSNotifyDeleteTable         ss_notify_delete_table          = 1604;
        SSGameToRoomHeartBeat       ss_game_to_room_heart_beat      = 1605; // 游戏到room心跳
        SSNotifyCheckCore           ss_notify_check_core            = 1606;

        GMRequestUpdate             gm_request_update           = 1700; // 处理更新游戏内数据，金币，钻石
        GMResponseUpdate            gm_response_update          = 1701;
        GMNotifyClient              gm_notify_client            = 1702; // 外部系统向游戏发布文字消息

        GMRequestPlayerInfo         gm_request_player_info      = 1703;
        GMResponsePlayerInfo        gm_response_player_info     = 1704;

        GMRequestNewNextSpinTable    gm_request_new_next_spin_table     = 1705;//下一场新插入的暴击场比赛
        GMResponseNewNextSpinTable   gm_response_new_next_spin_table    = 1706;//

        GMRequestNotifyUserUpdate          gm_request_notify_user_update = 1707; // 外部系统通知用户信息变化
        GMResponseNotifyUserUpdate         gm_response_notify_user_update = 1708;
    }
}


// vim:ts=4:sw=4:et:
